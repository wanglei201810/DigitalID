// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: token_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Contracts.MultiToken {

  /// <summary>Holder for reflection information generated from token_contract.proto</summary>
  internal static partial class TokenContractReflection {

    #region Descriptor
    /// <summary>File descriptor for token_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TokenContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChR0b2tlbl9jb250cmFjdC5wcm90bxIFdG9rZW4aD2FlbGYvY29yZS5wcm90",
            "bxoSYWVsZi9vcHRpb25zLnByb3RvGhtnb29nbGUvcHJvdG9idWYvZW1wdHku",
            "cHJvdG8aHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90byLaAQoJVG9r",
            "ZW5JbmZvEg4KBnN5bWJvbBgBIAEoCRISCgp0b2tlbl9uYW1lGAIgASgJEg4K",
            "BnN1cHBseRgDIAEoEhIUCgx0b3RhbF9zdXBwbHkYBCABKBISEAoIZGVjaW1h",
            "bHMYBSABKBESHQoGaXNzdWVyGAYgASgLMg0uYWVsZi5BZGRyZXNzEhMKC2lz",
            "X2J1cm5hYmxlGAcgASgIEhUKDWlzX3Byb2ZpdGFibGUYCCABKAgSFgoOaXNz",
            "dWVfY2hhaW5faWQYCSABKBESDgoGYnVybmVkGAogASgSIuQBCgtDcmVhdGVJ",
            "bnB1dBIOCgZzeW1ib2wYASABKAkSEgoKdG9rZW5fbmFtZRgCIAEoCRIUCgx0",
            "b3RhbF9zdXBwbHkYAyABKBISEAoIZGVjaW1hbHMYBCABKBESHQoGaXNzdWVy",
            "GAUgASgLMg0uYWVsZi5BZGRyZXNzEhMKC2lzX2J1cm5hYmxlGAYgASgIEiYK",
            "D2xvY2tfd2hpdGVfbGlzdBgHIAMoCzINLmFlbGYuQWRkcmVzcxIVCg1pc19w",
            "cm9maXRhYmxlGAggASgIEhYKDmlzc3VlX2NoYWluX2lkGAkgASgFIs0BChxS",
            "ZWdpc3Rlck5hdGl2ZVRva2VuSW5mb0lucHV0Eg4KBnN5bWJvbBgBIAEoCRIS",
            "Cgp0b2tlbl9uYW1lGAIgASgJEhQKDHRvdGFsX3N1cHBseRgDIAEoEhIQCghk",
            "ZWNpbWFscxgEIAEoERIdCgZpc3N1ZXIYBSABKAsyDS5hZWxmLkFkZHJlc3MS",
            "EwoLaXNfYnVybmFibGUYBiABKAgSFQoNaXNfcHJvZml0YWJsZRgHIAEoCBIW",
            "Cg5pc3N1ZV9jaGFpbl9pZBgIIAEoESLLAQonUmVnaXN0ZXJOYXRpdmVBbmRS",
            "ZXNvdXJjZVRva2VuSW5mb0lucHV0Ej4KEW5hdGl2ZV90b2tlbl9pbmZvGAEg",
            "ASgLMiMudG9rZW4uUmVnaXN0ZXJOYXRpdmVUb2tlbkluZm9JbnB1dBIxChNy",
            "ZXNvdXJjZV90b2tlbl9saXN0GAIgASgLMhQudG9rZW4uVG9rZW5JbmZvTGlz",
            "dBItChNjaGFpbl9wcmltYXJ5X3Rva2VuGAMgASgLMhAudG9rZW4uVG9rZW5J",
            "bmZvIlUKCklzc3VlSW5wdXQSDgoGc3ltYm9sGAEgASgJEg4KBmFtb3VudBgC",
            "IAEoEhIMCgRtZW1vGAMgASgJEhkKAnRvGAQgASgLMg0uYWVsZi5BZGRyZXNz",
            "IlgKDVRyYW5zZmVySW5wdXQSGQoCdG8YASABKAsyDS5hZWxmLkFkZHJlc3MS",
            "DgoGc3ltYm9sGAIgASgJEg4KBmFtb3VudBgDIAEoEhIMCgRtZW1vGAQgASgJ",
            "IncKCUxvY2tJbnB1dBIeCgdhZGRyZXNzGAEgASgLMg0uYWVsZi5BZGRyZXNz",
            "EhsKB2xvY2tfaWQYAiABKAsyCi5hZWxmLkhhc2gSDgoGc3ltYm9sGAMgASgJ",
            "Eg0KBXVzYWdlGAQgASgJEg4KBmFtb3VudBgFIAEoAyJ5CgtVbmxvY2tJbnB1",
            "dBIeCgdhZGRyZXNzGAEgASgLMg0uYWVsZi5BZGRyZXNzEhsKB2xvY2tfaWQY",
            "AiABKAsyCi5hZWxmLkhhc2gSDgoGc3ltYm9sGAMgASgJEg0KBXVzYWdlGAQg",
            "ASgJEg4KBmFtb3VudBgFIAEoAyJ5ChFUcmFuc2ZlckZyb21JbnB1dBIbCgRm",
            "cm9tGAEgASgLMg0uYWVsZi5BZGRyZXNzEhkKAnRvGAIgASgLMg0uYWVsZi5B",
            "ZGRyZXNzEg4KBnN5bWJvbBgDIAEoCRIOCgZhbW91bnQYBCABKBISDAoEbWVt",
            "bxgFIAEoCSJOCgxBcHByb3ZlSW5wdXQSHgoHc3BlbmRlchgBIAEoCzINLmFl",
            "bGYuQWRkcmVzcxIOCgZzeW1ib2wYAiABKAkSDgoGYW1vdW50GAMgASgSIlAK",
            "DlVuQXBwcm92ZUlucHV0Eh4KB3NwZW5kZXIYASABKAsyDS5hZWxmLkFkZHJl",
            "c3MSDgoGc3ltYm9sGAIgASgJEg4KBmFtb3VudBgDIAEoEiIrCglCdXJuSW5w",
            "dXQSDgoGc3ltYm9sGAEgASgJEg4KBmFtb3VudBgCIAEoEiLXAQoaQ2hhcmdl",
            "VHJhbnNhY3Rpb25GZWVzSW5wdXQSEwoLbWV0aG9kX25hbWUYASABKAkSJwoQ",
            "Y29udHJhY3RfYWRkcmVzcxgCIAEoCzINLmFlbGYuQWRkcmVzcxIcChR0cmFu",
            "c2FjdGlvbl9zaXplX2ZlZRgDIAEoEhIcChRwcmltYXJ5X3Rva2VuX3N5bWJv",
            "bBgEIAEoCRI/ChpzeW1ib2xzX3RvX3BheV90eF9zaXplX2ZlZRgFIAMoCzIb",
            "LnRva2VuLlN5bWJvbFRvUGF5VFhTaXplRmVlIpEBChJUcmFuc2FjdGlvbkZl",
            "ZUJpbGwSRQoPdG9rZW5fdG9fYW1vdW50GAEgAygLMiwudG9rZW4uVHJhbnNh",
            "Y3Rpb25GZWVCaWxsLlRva2VuVG9BbW91bnRFbnRyeRo0ChJUb2tlblRvQW1v",
            "dW50RW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgSOgI4ASKMAQoY",
            "Q2hhcmdlUmVzb3VyY2VUb2tlbklucHV0EhQKDHRyYWZmaWNfY29zdBgBIAEo",
            "EhIUCgxzdG9yYWdlX2Nvc3QYAiABKBISEQoJcmVhZF9jb3N0GAMgASgSEhIK",
            "CndyaXRlX2Nvc3QYBCABKBISHQoGY2FsbGVyGAUgASgLMg0uYWVsZi5BZGRy",
            "ZXNzIiMKEUdldFRva2VuSW5mb0lucHV0Eg4KBnN5bWJvbBgBIAEoCSI/Cg9H",
            "ZXRCYWxhbmNlSW5wdXQSDgoGc3ltYm9sGAEgASgJEhwKBW93bmVyGAIgASgL",
            "Mg0uYWVsZi5BZGRyZXNzIlEKEEdldEJhbGFuY2VPdXRwdXQSDgoGc3ltYm9s",
            "GAEgASgJEhwKBW93bmVyGAIgASgLMg0uYWVsZi5BZGRyZXNzEg8KB2JhbGFu",
            "Y2UYAyABKBIiYQoRR2V0QWxsb3dhbmNlSW5wdXQSDgoGc3ltYm9sGAEgASgJ",
            "EhwKBW93bmVyGAIgASgLMg0uYWVsZi5BZGRyZXNzEh4KB3NwZW5kZXIYAyAB",
            "KAsyDS5hZWxmLkFkZHJlc3MidQoSR2V0QWxsb3dhbmNlT3V0cHV0Eg4KBnN5",
            "bWJvbBgBIAEoCRIcCgVvd25lchgCIAEoCzINLmFlbGYuQWRkcmVzcxIeCgdz",
            "cGVuZGVyGAMgASgLMg0uYWVsZi5BZGRyZXNzEhEKCWFsbG93YW5jZRgEIAEo",
            "EiKPAQoXQ3Jvc3NDaGFpblRyYW5zZmVySW5wdXQSGQoCdG8YASABKAsyDS5h",
            "ZWxmLkFkZHJlc3MSDgoGc3ltYm9sGAIgASgJEg4KBmFtb3VudBgDIAEoEhIM",
            "CgRtZW1vGAQgASgJEhMKC3RvX2NoYWluX2lkGAUgASgFEhYKDmlzc3VlX2No",
            "YWluX2lkGAYgASgFIpwBChtDcm9zc0NoYWluUmVjZWl2ZVRva2VuSW5wdXQS",
            "FQoNZnJvbV9jaGFpbl9pZBgBIAEoBRIbChNwYXJlbnRfY2hhaW5faGVpZ2h0",
            "GAIgASgDEiIKGnRyYW5zZmVyX3RyYW5zYWN0aW9uX2J5dGVzGAMgASgMEiUK",
            "C21lcmtsZV9wYXRoGAQgASgLMhAuYWVsZi5NZXJrbGVQYXRoIkQKEklzSW5X",
            "aGl0ZUxpc3RJbnB1dBIOCgZzeW1ib2wYASABKAkSHgoHYWRkcmVzcxgCIAEo",
            "CzINLmFlbGYuQWRkcmVzcyLaAQoTQ2hlY2tUaHJlc2hvbGRJbnB1dBIdCgZz",
            "ZW5kZXIYASABKAsyDS5hZWxmLkFkZHJlc3MSTgoTc3ltYm9sX3RvX3RocmVz",
            "aG9sZBgCIAMoCzIxLnRva2VuLkNoZWNrVGhyZXNob2xkSW5wdXQuU3ltYm9s",
            "VG9UaHJlc2hvbGRFbnRyeRIaChJpc19jaGVja19hbGxvd2FuY2UYAyABKAga",
            "OAoWU3ltYm9sVG9UaHJlc2hvbGRFbnRyeRILCgNrZXkYASABKAkSDQoFdmFs",
            "dWUYAiABKBI6AjgBIpkBChpQcm9maXRSZWNlaXZpbmdJbmZvcm1hdGlvbhIn",
            "ChBjb250cmFjdF9hZGRyZXNzGAEgASgLMg0uYWVsZi5BZGRyZXNzEi4KF3By",
            "b2ZpdF9yZWNlaXZlcl9hZGRyZXNzGAIgASgLMg0uYWVsZi5BZGRyZXNzEiIK",
            "GmRvbmF0aW9uX3BhcnRzX3Blcl9odW5kcmVkGAMgASgRIl4KE1JlY2VpdmVQ",
            "cm9maXRzSW5wdXQSJwoQY29udHJhY3RfYWRkcmVzcxgBIAEoCzINLmFlbGYu",
            "QWRkcmVzcxIOCgZzeW1ib2wYAiABKAkSDgoGYW1vdW50GAMgASgSIkcKF1Ry",
            "YW5zZmVyVG9Db250cmFjdElucHV0Eg4KBnN5bWJvbBgBIAEoCRIOCgZhbW91",
            "bnQYAiABKBISDAoEbWVtbxgDIAEoCSJkCg5SZXR1cm5UYXhJbnB1dBIeChZi",
            "YWxhbmNlX2JlZm9yZV9zZWxsaW5nGAEgASgSEjIKG3JldHVybl90YXhfcmVj",
            "ZWl2ZXJfYWRkcmVzcxgCIAEoCzINLmFlbGYuQWRkcmVzcyJzChlBZHZhbmNl",
            "UmVzb3VyY2VUb2tlbklucHV0EicKEGNvbnRyYWN0X2FkZHJlc3MYASABKAsy",
            "DS5hZWxmLkFkZHJlc3MSHQoVcmVzb3VyY2VfdG9rZW5fc3ltYm9sGAIgASgJ",
            "Eg4KBmFtb3VudBgDIAEoEiJ0ChpUYWtlUmVzb3VyY2VUb2tlbkJhY2tJbnB1",
            "dBInChBjb250cmFjdF9hZGRyZXNzGAEgASgLMg0uYWVsZi5BZGRyZXNzEh0K",
            "FXJlc291cmNlX3Rva2VuX3N5bWJvbBgCIAEoCRIOCgZhbW91bnQYAyABKBIi",
            "YwoUR2V0TG9ja2VkQW1vdW50SW5wdXQSHgoHYWRkcmVzcxgBIAEoCzINLmFl",
            "bGYuQWRkcmVzcxIOCgZzeW1ib2wYAiABKAkSGwoHbG9ja19pZBgDIAEoCzIK",
            "LmFlbGYuSGFzaCJ0ChVHZXRMb2NrZWRBbW91bnRPdXRwdXQSHgoHYWRkcmVz",
            "cxgBIAEoCzINLmFlbGYuQWRkcmVzcxIOCgZzeW1ib2wYAiABKAkSGwoHbG9j",
            "a19pZBgDIAEoCzIKLmFlbGYuSGFzaBIOCgZhbW91bnQYBCABKBIiXwogR2V0",
            "VmlydHVhbEFkZHJlc3NGb3JMb2NraW5nSW5wdXQSHgoHYWRkcmVzcxgBIAEo",
            "CzINLmFlbGYuQWRkcmVzcxIbCgdsb2NrX2lkGAIgASgLMgouYWVsZi5IYXNo",
            "IjAKDVRva2VuSW5mb0xpc3QSHwoFdmFsdWUYASADKAsyEC50b2tlbi5Ub2tl",
            "bkluZm8iQQouR2V0Q3Jvc3NDaGFpblRyYW5zZmVyVG9rZW5Db250cmFjdEFk",
            "ZHJlc3NJbnB1dBIPCgdjaGFpbklkGAEgASgFIpIBChpDcm9zc0NoYWluQ3Jl",
            "YXRlVG9rZW5JbnB1dBIVCg1mcm9tX2NoYWluX2lkGAEgASgFEhsKE3BhcmVu",
            "dF9jaGFpbl9oZWlnaHQYAiABKAMSGQoRdHJhbnNhY3Rpb25fYnl0ZXMYAyAB",
            "KAwSJQoLbWVya2xlX3BhdGgYBCABKAsyEC5hZWxmLk1lcmtsZVBhdGgi0gEK",
            "K1JlZ2lzdGVyQ3Jvc3NDaGFpblRva2VuQ29udHJhY3RBZGRyZXNzSW5wdXQS",
            "FQoNZnJvbV9jaGFpbl9pZBgBIAEoBRIbChNwYXJlbnRfY2hhaW5faGVpZ2h0",
            "GAIgASgDEhkKEXRyYW5zYWN0aW9uX2J5dGVzGAMgASgMEiUKC21lcmtsZV9w",
            "YXRoGAQgASgLMhAuYWVsZi5NZXJrbGVQYXRoEi0KFnRva2VuX2NvbnRyYWN0",
            "X2FkZHJlc3MYBSABKAsyDS5hZWxmLkFkZHJlc3MizQEKHFZhbGlkYXRlVG9r",
            "ZW5JbmZvRXhpc3RzSW5wdXQSDgoGc3ltYm9sGAEgASgJEhIKCnRva2VuX25h",
            "bWUYAiABKAkSFAoMdG90YWxfc3VwcGx5GAMgASgSEhAKCGRlY2ltYWxzGAQg",
            "ASgREh0KBmlzc3VlchgFIAEoCzINLmFlbGYuQWRkcmVzcxITCgtpc19idXJu",
            "YWJsZRgGIAEoCBIWCg5pc3N1ZV9jaGFpbl9pZBgHIAEoERIVCg1pc19wcm9m",
            "aXRhYmxlGAggASgIIo0BCg9Jbml0aWFsaXplSW5wdXQSQwoPcmVzb3VyY2Vf",
            "YW1vdW50GAEgAygLMioudG9rZW4uSW5pdGlhbGl6ZUlucHV0LlJlc291cmNl",
            "QW1vdW50RW50cnkaNQoTUmVzb3VyY2VBbW91bnRFbnRyeRILCgNrZXkYASAB",
            "KAkSDQoFdmFsdWUYAiABKBE6AjgBIngKEVVwZGF0ZVJlbnRhbElucHV0EjQK",
            "BnJlbnRhbBgBIAMoCzIkLnRva2VuLlVwZGF0ZVJlbnRhbElucHV0LlJlbnRh",
            "bEVudHJ5Gi0KC1JlbnRhbEVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoEjoCOAEiowEKGlVwZGF0ZVJlbnRlZFJlc291cmNlc0lucHV0Ek4KD3Jl",
            "c291cmNlX2Ftb3VudBgBIAMoCzI1LnRva2VuLlVwZGF0ZVJlbnRlZFJlc291",
            "cmNlc0lucHV0LlJlc291cmNlQW1vdW50RW50cnkaNQoTUmVzb3VyY2VBbW91",
            "bnRFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKBE6AjgBIocBCgxP",
            "d25pbmdSZW50YWwSQAoPcmVzb3VyY2VfYW1vdW50GAEgAygLMicudG9rZW4u",
            "T3duaW5nUmVudGFsLlJlc291cmNlQW1vdW50RW50cnkaNQoTUmVzb3VyY2VB",
            "bW91bnRFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKBI6AjgBIoMC",
            "ChVDb2VmZmljaWVudEZyb21TZW5kZXISEQoJcGllY2Vfa2V5GAEgASgREhsK",
            "E2lzX2NoYW5nZV9waWVjZV9rZXkYAiABKAgSEAoIaXNfbGluZXIYAyABKAgS",
            "MgoRbGluZXJfY29lZmZpY2llbnQYBCABKAsyFy50b2tlbi5MaW5lckNvZWZm",
            "aWNpZW50EjIKEXBvd2VyX2NvZWZmaWNpZW50GAUgASgLMhcudG9rZW4uUG93",
            "ZXJDb2VmZmljaWVudBJAChluZXdfcGllY2Vfa2V5X2NvZWZmaWNpZW50GAYg",
            "ASgLMh0udG9rZW4uTmV3UGllY2VLZXlDb2VmZmljaWVudCJSChBMaW5lckNv",
            "ZWZmaWNpZW50EhEKCW51bWVyYXRvchgBIAEoERITCgtkZW5vbWluYXRvchgC",
            "IAEoERIWCg5jb25zdGFudF92YWx1ZRgDIAEoESKRAQoQUG93ZXJDb2VmZmlj",
            "aWVudBIRCgludW1lcmF0b3IYASABKBESEwoLZGVub21pbmF0b3IYAiABKBES",
            "FgoOY29uc3RhbnRfdmFsdWUYAyABKBESGAoQY2hhbmdlX3NwYW5fYmFzZRgE",
            "IAEoERIOCgZ3ZWlnaHQYBSABKBESEwoLd2VpZ2h0X2Jhc2UYBiABKBEiLwoW",
            "TmV3UGllY2VLZXlDb2VmZmljaWVudBIVCg1uZXdfcGllY2Vfa2V5GAEgASgR",
            "InIKF0NvZWZmaWNpZW50RnJvbUNvbnRyYWN0EiQKCGZlZV90eXBlGAEgASgO",
            "MhIudG9rZW4uRmVlVHlwZUVudW0SMQoLY29lZmZpY2llbnQYAiABKAsyHC50",
            "b2tlbi5Db2VmZmljaWVudEZyb21TZW5kZXIiUwoWVG9rZW5TeW1ib2xXaXRo",
            "QWRkcmVzcxIUCgx0b2tlbl9zeW1ib2wYASABKAkSIwoMZnJvbV9hZGRyZXNz",
            "GAIgASgLMg0uYWVsZi5BZGRyZXNzIiQKE1Rva2VuU3RhdGVJbkFkZHJlc3MS",
            "DQoFdmFsdWUYASABKAgiTQoVQWRkVG9rZVdoaXRlTGlzdElucHV0EhQKDHRv",
            "a2VuX3N5bWJvbBgBIAEoCRIeCgdhZGRyZXNzGAIgASgLMg0uYWVsZi5BZGRy",
            "ZXNzIm0KDVJlc291cmNlVXNhZ2USLgoFdmFsdWUYASADKAsyHy50b2tlbi5S",
            "ZXNvdXJjZVVzYWdlLlZhbHVlRW50cnkaLAoKVmFsdWVFbnRyeRILCgNrZXkY",
            "ASABKAkSDQoFdmFsdWUYAiABKBE6AjgBIlYKHkNhbGN1bGF0ZUZlZUNvZWZm",
            "aWNpZW50c09mVHlwZRI0Cgxjb2VmZmljaWVudHMYASADKAsyHi50b2tlbi5D",
            "YWxjdWxhdGVGZWVDb2VmZmljaWVudCKPAgoXQ2FsY3VsYXRlRmVlQ29lZmZp",
            "Y2llbnQSEQoJcGllY2Vfa2V5GAEgASgREiQKCGZlZV90eXBlGAIgASgOMhIu",
            "dG9rZW4uRmVlVHlwZUVudW0SNwoNZnVuY3Rpb25fdHlwZRgDIAEoDjIgLnRv",
            "a2VuLkNhbGN1bGF0ZUZ1bmN0aW9uVHlwZUVudW0SSwoPY29lZmZpY2llbnRf",
            "ZGljGAQgAygLMjIudG9rZW4uQ2FsY3VsYXRlRmVlQ29lZmZpY2llbnQuQ29l",
            "ZmZpY2llbnREaWNFbnRyeRo1ChNDb2VmZmljaWVudERpY0VudHJ5EgsKA2tl",
            "eRgBIAEoCRINCgV2YWx1ZRgCIAEoEToCOAEiYwoUU3ltYm9sVG9QYXlUWFNp",
            "emVGZWUSFAoMdG9rZW5fc3ltYm9sGAEgASgJEhkKEWJhc2VfdG9rZW5fd2Vp",
            "Z2h0GAIgASgREhoKEmFkZGVkX3Rva2VuX3dlaWdodBgDIAEoESJbChhTeW1i",
            "b2xMaXN0VG9QYXlUWFNpemVGZWUSPwoac3ltYm9sc190b19wYXlfdHhfc2l6",
            "ZV9mZWUYASADKAsyGy50b2tlbi5TeW1ib2xUb1BheVRYU2l6ZUZlZSKOAQoL",
            "VHJhbnNmZXJyZWQSIgoEZnJvbRgBIAEoCzINLmFlbGYuQWRkcmVzc0IFiI/1",
            "AQESIAoCdG8YAiABKAsyDS5hZWxmLkFkZHJlc3NCBYiP9QEBEhUKBnN5bWJv",
            "bBgDIAEoCUIFiI/1AQESDgoGYW1vdW50GAQgASgSEgwKBG1lbW8YBSABKAk6",
            "BKC7GAEigwEKCEFwcHJvdmVkEiMKBW93bmVyGAEgASgLMg0uYWVsZi5BZGRy",
            "ZXNzQgWIj/UBARIlCgdzcGVuZGVyGAIgASgLMg0uYWVsZi5BZGRyZXNzQgWI",
            "j/UBARIVCgZzeW1ib2wYAyABKAlCBYiP9QEBEg4KBmFtb3VudBgEIAEoEjoE",
            "oLsYASKFAQoKVW5BcHByb3ZlZBIjCgVvd25lchgBIAEoCzINLmFlbGYuQWRk",
            "cmVzc0IFiI/1AQESJQoHc3BlbmRlchgCIAEoCzINLmFlbGYuQWRkcmVzc0IF",
            "iI/1AQESFQoGc3ltYm9sGAMgASgJQgWIj/UBARIOCgZhbW91bnQYBCABKBI6",
            "BKC7GAEiWwoGQnVybmVkEiQKBmJ1cm5lchgBIAEoCzINLmFlbGYuQWRkcmVz",
            "c0IFiI/1AQESFQoGc3ltYm9sGAIgASgJQgWIj/UBARIOCgZhbW91bnQYAyAB",
            "KBI6BKC7GAEiOAoaQ2hhaW5QcmltYXJ5VG9rZW5TeW1ib2xTZXQSFAoMdG9r",
            "ZW5fc3ltYm9sGAEgASgJOgSguxgBIj4KIlRyYW5zYWN0aW9uU2l6ZUZlZVVu",
            "aXRQcmljZVVwZGF0ZWQSEgoKdW5pdF9wcmljZRgBIAEoEjoEoLsYASJpCiFO",
            "b3RpY2VVcGRhdGVDYWxjdWxhdGVGZWVBbGdvcml0aG0SPgoPYWxsX2NvZWZm",
            "aWNpZW50GAEgASgLMiUudG9rZW4uQ2FsY3VsYXRlRmVlQ29lZmZpY2llbnRz",
            "T2ZUeXBlOgSguxgBIjUKDVJlbnRhbENoYXJnZWQSDgoGc3ltYm9sGAEgASgJ",
            "Eg4KBmFtb3VudBgCIAEoEjoEoLsYASJICiBSZW50YWxBY2NvdW50QmFsYW5j",
            "ZUluc3VmZmljaWVudBIOCgZzeW1ib2wYASABKAkSDgoGYW1vdW50GAIgASgS",
            "OgSguxgBImcKFkV4dHJhVG9rZW5MaXN0TW9kaWZpZWQSRwoec3ltYm9sX2xp",
            "c3RfdG9fcGF5X3R4X3NpemVfZmVlGAEgASgLMh8udG9rZW4uU3ltYm9sTGlz",
            "dFRvUGF5VFhTaXplRmVlOgSguxgBIpoBChRDb250cm9sbGVyRm9yVXNlckZl",
            "ZRImCg9yb290X2NvbnRyb2xsZXIYASABKAsyDS5hZWxmLkFkZHJlc3MSLAoV",
            "cGFybGlhbWVudF9jb250cm9sbGVyGAIgASgLMg0uYWVsZi5BZGRyZXNzEiwK",
            "FXJlZmVyZW5kdW1fY29udHJvbGxlchgDIAEoCzINLmFlbGYuQWRkcmVzcyKe",
            "AQoZQ29udHJvbGxlckZvckRldmVsb3BlckZlZRImCg9yb290X2NvbnRyb2xs",
            "ZXIYASABKAsyDS5hZWxmLkFkZHJlc3MSLAoVcGFybGlhbWVudF9jb250cm9s",
            "bGVyGAIgASgLMg0uYWVsZi5BZGRyZXNzEisKFGRldmVsb3Blcl9jb250cm9s",
            "bGVyGAMgASgLMg0uYWVsZi5BZGRyZXNzInYKJkNvbnRyb2xsZXJJbmZvRm9y",
            "VXBkYXRlU2lkZUNoYWluUmVudGFsEiEKCmNvbnRyb2xsZXIYASABKAsyDS5h",
            "ZWxmLkFkZHJlc3MSKQohb3JnYW5pemF0aW9uX2NyZWF0aW9uX2lucHV0X2J5",
            "dGVzGAIgASgMKkQKC0ZlZVR5cGVFbnVtEggKBFJFQUQQABILCgdTVE9SQUdF",
            "EAESCQoFV1JJVEUQAhILCgdUUkFGRklDEAMSBgoCVFgQBCoxChlDYWxjdWxh",
            "dGVGdW5jdGlvblR5cGVFbnVtEgkKBUxJTkVSEAASCQoFUE9XRVIQATLCJAoN",
            "VG9rZW5Db250cmFjdBI+CgpJbml0aWFsaXplEhYudG9rZW4uSW5pdGlhbGl6",
            "ZUlucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASPgoTU2V0U2lkZUNo",
            "YWluQ3JlYXRvchINLmFlbGYuQWRkcmVzcxoWLmdvb2dsZS5wcm90b2J1Zi5F",
            "bXB0eSIAEjYKBkNyZWF0ZRISLnRva2VuLkNyZWF0ZUlucHV0GhYuZ29vZ2xl",
            "LnByb3RvYnVmLkVtcHR5IgASNAoFSXNzdWUSES50b2tlbi5Jc3N1ZUlucHV0",
            "GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASOgoIVHJhbnNmZXISFC50b2tl",
            "bi5UcmFuc2ZlcklucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASQgoM",
            "VHJhbnNmZXJGcm9tEhgudG9rZW4uVHJhbnNmZXJGcm9tSW5wdXQaFi5nb29n",
            "bGUucHJvdG9idWYuRW1wdHkiABI4CgdBcHByb3ZlEhMudG9rZW4uQXBwcm92",
            "ZUlucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASPAoJVW5BcHByb3Zl",
            "EhUudG9rZW4uVW5BcHByb3ZlSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1w",
            "dHkiABIyCgRMb2NrEhAudG9rZW4uTG9ja0lucHV0GhYuZ29vZ2xlLnByb3Rv",
            "YnVmLkVtcHR5IgASNgoGVW5sb2NrEhIudG9rZW4uVW5sb2NrSW5wdXQaFi5n",
            "b29nbGUucHJvdG9idWYuRW1wdHkiABIyCgRCdXJuEhAudG9rZW4uQnVybklu",
            "cHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASUgoVQ2hhcmdlVHJhbnNh",
            "Y3Rpb25GZWVzEiEudG9rZW4uQ2hhcmdlVHJhbnNhY3Rpb25GZWVzSW5wdXQa",
            "FC5hZWxmLlRyYW5zYWN0aW9uRmVlIgASSAoUQ2xhaW1UcmFuc2FjdGlvbkZl",
            "ZXMSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaFi5nb29nbGUucHJvdG9idWYu",
            "RW1wdHkiABJ2CiZSZWdpc3RlckNyb3NzQ2hhaW5Ub2tlbkNvbnRyYWN0QWRk",
            "cmVzcxIyLnRva2VuLlJlZ2lzdGVyQ3Jvc3NDaGFpblRva2VuQ29udHJhY3RB",
            "ZGRyZXNzSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJuCiJSZWdp",
            "c3Rlck5hdGl2ZUFuZFJlc291cmNlVG9rZW5JbmZvEi4udG9rZW4uUmVnaXN0",
            "ZXJOYXRpdmVBbmRSZXNvdXJjZVRva2VuSW5mb0lucHV0GhYuZ29vZ2xlLnBy",
            "b3RvYnVmLkVtcHR5IgASWAoXUmVnaXN0ZXJOYXRpdmVUb2tlbkluZm8SIy50",
            "b2tlbi5SZWdpc3Rlck5hdGl2ZVRva2VuSW5mb0lucHV0GhYuZ29vZ2xlLnBy",
            "b3RvYnVmLkVtcHR5IgASTgoSQ3Jvc3NDaGFpblRyYW5zZmVyEh4udG9rZW4u",
            "Q3Jvc3NDaGFpblRyYW5zZmVySW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1w",
            "dHkiABJWChZDcm9zc0NoYWluUmVjZWl2ZVRva2VuEiIudG9rZW4uQ3Jvc3ND",
            "aGFpblJlY2VpdmVUb2tlbklucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5",
            "IgASVAoVQ3Jvc3NDaGFpbkNyZWF0ZVRva2VuEiEudG9rZW4uQ3Jvc3NDaGFp",
            "bkNyZWF0ZVRva2VuSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJG",
            "Cg5DaGVja1RocmVzaG9sZBIaLnRva2VuLkNoZWNrVGhyZXNob2xkSW5wdXQa",
            "Fi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJcCh1TZXRQcm9maXRSZWNlaXZp",
            "bmdJbmZvcm1hdGlvbhIhLnRva2VuLlByb2ZpdFJlY2VpdmluZ0luZm9ybWF0",
            "aW9uGhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASRgoOUmVjZWl2ZVByb2Zp",
            "dHMSGi50b2tlbi5SZWNlaXZlUHJvZml0c0lucHV0GhYuZ29vZ2xlLnByb3Rv",
            "YnVmLkVtcHR5IgASRgoSQ2hlY2tSZXNvdXJjZVRva2VuEhYuZ29vZ2xlLnBy",
            "b3RvYnVmLkVtcHR5GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASVgoTQ2hh",
            "cmdlUmVzb3VyY2VUb2tlbhIfLnRva2VuLkNoYXJnZVJlc291cmNlVG9rZW5J",
            "bnB1dBocLmFlbGYuQ29uc3VtZWRSZXNvdXJjZVRva2VucyIAEkcKE0RvbmF0",
            "ZVJlc291cmNlVG9rZW4SFi5nb29nbGUucHJvdG9idWYuRW1wdHkaFi5nb29n",
            "bGUucHJvdG9idWYuRW1wdHkiABJOChJUcmFuc2ZlclRvQ29udHJhY3QSHi50",
            "b2tlbi5UcmFuc2ZlclRvQ29udHJhY3RJbnB1dBoWLmdvb2dsZS5wcm90b2J1",
            "Zi5FbXB0eSIAElIKFEFkdmFuY2VSZXNvdXJjZVRva2VuEiAudG9rZW4uQWR2",
            "YW5jZVJlc291cmNlVG9rZW5JbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0",
            "eSIAElQKFVRha2VSZXNvdXJjZVRva2VuQmFjaxIhLnRva2VuLlRha2VSZXNv",
            "dXJjZVRva2VuQmFja0lucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgAS",
            "OQoOU2V0RmVlUmVjZWl2ZXISDS5hZWxmLkFkZHJlc3MaFi5nb29nbGUucHJv",
            "dG9idWYuRW1wdHkiABJZCh1VcGRhdGVDb2VmZmljaWVudEZyb21Db250cmFj",
            "dBIeLnRva2VuLkNvZWZmaWNpZW50RnJvbUNvbnRyYWN0GhYuZ29vZ2xlLnBy",
            "b3RvYnVmLkVtcHR5IgASWAoXVmFsaWRhdGVUb2tlbkluZm9FeGlzdHMSIy50",
            "b2tlbi5WYWxpZGF0ZVRva2VuSW5mb0V4aXN0c0lucHV0GhYuZ29vZ2xlLnBy",
            "b3RvYnVmLkVtcHR5IgASVQobVXBkYXRlQ29lZmZpY2llbnRGcm9tU2VuZGVy",
            "EhwudG9rZW4uQ29lZmZpY2llbnRGcm9tU2VuZGVyGhYuZ29vZ2xlLnByb3Rv",
            "YnVmLkVtcHR5IgASQgoMVXBkYXRlUmVudGFsEhgudG9rZW4uVXBkYXRlUmVu",
            "dGFsSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJUChVVcGRhdGVS",
            "ZW50ZWRSZXNvdXJjZXMSIS50b2tlbi5VcGRhdGVSZW50ZWRSZXNvdXJjZXNJ",
            "bnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEk4KI1NldENvbnRyb2xs",
            "ZXJGb3JTaWRlQ2hhaW5QYXJsaWFtZW50Eg0uYWVsZi5BZGRyZXNzGhYuZ29v",
            "Z2xlLnByb3RvYnVmLkVtcHR5IgASVQoYU2V0U3ltYm9sc1RvUGF5VFhTaXpl",
            "RmVlEh8udG9rZW4uU3ltYm9sTGlzdFRvUGF5VFhTaXplRmVlGhYuZ29vZ2xl",
            "LnByb3RvYnVmLkVtcHR5IgASUAolU2V0Q29udHJvbGxlckZvclN5bWJvbHNU",
            "b1BheVRYU2l6ZUZlZRINLmFlbGYuQWRkcmVzcxoWLmdvb2dsZS5wcm90b2J1",
            "Zi5FbXB0eSIAElIKHkluaXRpYWxpemVBdXRob3JpemVkQ29udHJvbGxlchIW",
            "Lmdvb2dsZS5wcm90b2J1Zi5FbXB0eRoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0",
            "eSIAEksKEUFkZFRva2VuV2hpdGVMaXN0EhwudG9rZW4uQWRkVG9rZVdoaXRl",
            "TGlzdElucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASQQoMR2V0VG9r",
            "ZW5JbmZvEhgudG9rZW4uR2V0VG9rZW5JbmZvSW5wdXQaEC50b2tlbi5Ub2tl",
            "bkluZm8iBYiJ9wEBEkUKEkdldE5hdGl2ZVRva2VuSW5mbxIWLmdvb2dsZS5w",
            "cm90b2J1Zi5FbXB0eRoQLnRva2VuLlRva2VuSW5mbyIFiIn3AQESSwoUR2V0",
            "UmVzb3VyY2VUb2tlbkluZm8SFi5nb29nbGUucHJvdG9idWYuRW1wdHkaFC50",
            "b2tlbi5Ub2tlbkluZm9MaXN0IgWIifcBARJECgpHZXRCYWxhbmNlEhYudG9r",
            "ZW4uR2V0QmFsYW5jZUlucHV0GhcudG9rZW4uR2V0QmFsYW5jZU91dHB1dCIF",
            "iIn3AQESSgoMR2V0QWxsb3dhbmNlEhgudG9rZW4uR2V0QWxsb3dhbmNlSW5w",
            "dXQaGS50b2tlbi5HZXRBbGxvd2FuY2VPdXRwdXQiBYiJ9wEBEk0KDUlzSW5X",
            "aGl0ZUxpc3QSGS50b2tlbi5Jc0luV2hpdGVMaXN0SW5wdXQaGi5nb29nbGUu",
            "cHJvdG9idWYuQm9vbFZhbHVlIgWIifcBARJYCh1HZXRQcm9maXRSZWNlaXZp",
            "bmdJbmZvcm1hdGlvbhINLmFlbGYuQWRkcmVzcxohLnRva2VuLlByb2ZpdFJl",
            "Y2VpdmluZ0luZm9ybWF0aW9uIgWIifcBARJTCg9HZXRMb2NrZWRBbW91bnQS",
            "Gy50b2tlbi5HZXRMb2NrZWRBbW91bnRJbnB1dBocLnRva2VuLkdldExvY2tl",
            "ZEFtb3VudE91dHB1dCIFiIn3AQESXAobR2V0VmlydHVhbEFkZHJlc3NGb3JM",
            "b2NraW5nEicudG9rZW4uR2V0VmlydHVhbEFkZHJlc3NGb3JMb2NraW5nSW5w",
            "dXQaDS5hZWxmLkFkZHJlc3MiBYiJ9wEBEngKKUdldENyb3NzQ2hhaW5UcmFu",
            "c2ZlclRva2VuQ29udHJhY3RBZGRyZXNzEjUudG9rZW4uR2V0Q3Jvc3NDaGFp",
            "blRyYW5zZmVyVG9rZW5Db250cmFjdEFkZHJlc3NJbnB1dBoNLmFlbGYuQWRk",
            "cmVzcyIFiIn3AQESVAoVR2V0UHJpbWFyeVRva2VuU3ltYm9sEhYuZ29vZ2xl",
            "LnByb3RvYnVmLkVtcHR5GhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVl",
            "IgWIifcBARJnCiRHZXRDYWxjdWxhdGVGZWVDb2VmZmljaWVudE9mQ29udHJh",
            "Y3QSES5hZWxmLlNJbnQzMlZhbHVlGiUudG9rZW4uQ2FsY3VsYXRlRmVlQ29l",
            "ZmZpY2llbnRzT2ZUeXBlIgWIifcBARJqCiJHZXRDYWxjdWxhdGVGZWVDb2Vm",
            "ZmljaWVudE9mU2VuZGVyEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GiUudG9r",
            "ZW4uQ2FsY3VsYXRlRmVlQ29lZmZpY2llbnRzT2ZUeXBlIgWIifcBARJFCg9H",
            "ZXRPd25pbmdSZW50YWwSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaEy50b2tl",
            "bi5Pd25pbmdSZW50YWwiBYiJ9wEBEkcKEEdldFJlc291cmNlVXNhZ2USFi5n",
            "b29nbGUucHJvdG9idWYuRW1wdHkaFC50b2tlbi5SZXNvdXJjZVVzYWdlIgWI",
            "ifcBARJaChhHZXRTeW1ib2xzVG9QYXlUWFNpemVGZWUSFi5nb29nbGUucHJv",
            "dG9idWYuRW1wdHkaHy50b2tlbi5TeW1ib2xMaXN0VG9QYXlUWFNpemVGZWUi",
            "BYiJ9wEBElIKFEdldFVzZXJGZWVDb250cm9sbGVyEhYuZ29vZ2xlLnByb3Rv",
            "YnVmLkVtcHR5GhsudG9rZW4uQ29udHJvbGxlckZvclVzZXJGZWUiBYiJ9wEB",
            "ElwKGUdldERldmVsb3BlckZlZUNvbnRyb2xsZXISFi5nb29nbGUucHJvdG9i",
            "dWYuRW1wdHkaIC50b2tlbi5Db250cm9sbGVyRm9yRGV2ZWxvcGVyRmVlIgWI",
            "ifcBARJ5CilHZXRDb250cm9sbGVySW5mb0ZvclVwZGF0ZVNpZGVDaGFpblJl",
            "bnRhbBIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRotLnRva2VuLkNvbnRyb2xs",
            "ZXJJbmZvRm9yVXBkYXRlU2lkZUNoYWluUmVudGFsIgWIifcBAUIcqgIZQUVs",
            "Zi5Db250cmFjdHMuTXVsdGlUb2tlbmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Types.CoreReflection.Descriptor, global::AElf.OptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::AElf.Contracts.MultiToken.FeeTypeEnum), typeof(global::AElf.Contracts.MultiToken.CalculateFunctionTypeEnum), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TokenInfo), global::AElf.Contracts.MultiToken.TokenInfo.Parser, new[]{ "Symbol", "TokenName", "Supply", "TotalSupply", "Decimals", "Issuer", "IsBurnable", "IsProfitable", "IssueChainId", "Burned" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.CreateInput), global::AElf.Contracts.MultiToken.CreateInput.Parser, new[]{ "Symbol", "TokenName", "TotalSupply", "Decimals", "Issuer", "IsBurnable", "LockWhiteList", "IsProfitable", "IssueChainId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.RegisterNativeTokenInfoInput), global::AElf.Contracts.MultiToken.RegisterNativeTokenInfoInput.Parser, new[]{ "Symbol", "TokenName", "TotalSupply", "Decimals", "Issuer", "IsBurnable", "IsProfitable", "IssueChainId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.RegisterNativeAndResourceTokenInfoInput), global::AElf.Contracts.MultiToken.RegisterNativeAndResourceTokenInfoInput.Parser, new[]{ "NativeTokenInfo", "ResourceTokenList", "ChainPrimaryToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.IssueInput), global::AElf.Contracts.MultiToken.IssueInput.Parser, new[]{ "Symbol", "Amount", "Memo", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TransferInput), global::AElf.Contracts.MultiToken.TransferInput.Parser, new[]{ "To", "Symbol", "Amount", "Memo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.LockInput), global::AElf.Contracts.MultiToken.LockInput.Parser, new[]{ "Address", "LockId", "Symbol", "Usage", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.UnlockInput), global::AElf.Contracts.MultiToken.UnlockInput.Parser, new[]{ "Address", "LockId", "Symbol", "Usage", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TransferFromInput), global::AElf.Contracts.MultiToken.TransferFromInput.Parser, new[]{ "From", "To", "Symbol", "Amount", "Memo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ApproveInput), global::AElf.Contracts.MultiToken.ApproveInput.Parser, new[]{ "Spender", "Symbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.UnApproveInput), global::AElf.Contracts.MultiToken.UnApproveInput.Parser, new[]{ "Spender", "Symbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.BurnInput), global::AElf.Contracts.MultiToken.BurnInput.Parser, new[]{ "Symbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput), global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput.Parser, new[]{ "MethodName", "ContractAddress", "TransactionSizeFee", "PrimaryTokenSymbol", "SymbolsToPayTxSizeFee" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TransactionFeeBill), global::AElf.Contracts.MultiToken.TransactionFeeBill.Parser, new[]{ "TokenToAmount" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ChargeResourceTokenInput), global::AElf.Contracts.MultiToken.ChargeResourceTokenInput.Parser, new[]{ "TrafficCost", "StorageCost", "ReadCost", "WriteCost", "Caller" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.GetTokenInfoInput), global::AElf.Contracts.MultiToken.GetTokenInfoInput.Parser, new[]{ "Symbol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.GetBalanceInput), global::AElf.Contracts.MultiToken.GetBalanceInput.Parser, new[]{ "Symbol", "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.GetBalanceOutput), global::AElf.Contracts.MultiToken.GetBalanceOutput.Parser, new[]{ "Symbol", "Owner", "Balance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.GetAllowanceInput), global::AElf.Contracts.MultiToken.GetAllowanceInput.Parser, new[]{ "Symbol", "Owner", "Spender" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.GetAllowanceOutput), global::AElf.Contracts.MultiToken.GetAllowanceOutput.Parser, new[]{ "Symbol", "Owner", "Spender", "Allowance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.CrossChainTransferInput), global::AElf.Contracts.MultiToken.CrossChainTransferInput.Parser, new[]{ "To", "Symbol", "Amount", "Memo", "ToChainId", "IssueChainId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.CrossChainReceiveTokenInput), global::AElf.Contracts.MultiToken.CrossChainReceiveTokenInput.Parser, new[]{ "FromChainId", "ParentChainHeight", "TransferTransactionBytes", "MerklePath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.IsInWhiteListInput), global::AElf.Contracts.MultiToken.IsInWhiteListInput.Parser, new[]{ "Symbol", "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.CheckThresholdInput), global::AElf.Contracts.MultiToken.CheckThresholdInput.Parser, new[]{ "Sender", "SymbolToThreshold", "IsCheckAllowance" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ProfitReceivingInformation), global::AElf.Contracts.MultiToken.ProfitReceivingInformation.Parser, new[]{ "ContractAddress", "ProfitReceiverAddress", "DonationPartsPerHundred" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ReceiveProfitsInput), global::AElf.Contracts.MultiToken.ReceiveProfitsInput.Parser, new[]{ "ContractAddress", "Symbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TransferToContractInput), global::AElf.Contracts.MultiToken.TransferToContractInput.Parser, new[]{ "Symbol", "Amount", "Memo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ReturnTaxInput), global::AElf.Contracts.MultiToken.ReturnTaxInput.Parser, new[]{ "BalanceBeforeSelling", "ReturnTaxReceiverAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.AdvanceResourceTokenInput), global::AElf.Contracts.MultiToken.AdvanceResourceTokenInput.Parser, new[]{ "ContractAddress", "ResourceTokenSymbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TakeResourceTokenBackInput), global::AElf.Contracts.MultiToken.TakeResourceTokenBackInput.Parser, new[]{ "ContractAddress", "ResourceTokenSymbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.GetLockedAmountInput), global::AElf.Contracts.MultiToken.GetLockedAmountInput.Parser, new[]{ "Address", "Symbol", "LockId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.GetLockedAmountOutput), global::AElf.Contracts.MultiToken.GetLockedAmountOutput.Parser, new[]{ "Address", "Symbol", "LockId", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.GetVirtualAddressForLockingInput), global::AElf.Contracts.MultiToken.GetVirtualAddressForLockingInput.Parser, new[]{ "Address", "LockId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TokenInfoList), global::AElf.Contracts.MultiToken.TokenInfoList.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.GetCrossChainTransferTokenContractAddressInput), global::AElf.Contracts.MultiToken.GetCrossChainTransferTokenContractAddressInput.Parser, new[]{ "ChainId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.CrossChainCreateTokenInput), global::AElf.Contracts.MultiToken.CrossChainCreateTokenInput.Parser, new[]{ "FromChainId", "ParentChainHeight", "TransactionBytes", "MerklePath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.RegisterCrossChainTokenContractAddressInput), global::AElf.Contracts.MultiToken.RegisterCrossChainTokenContractAddressInput.Parser, new[]{ "FromChainId", "ParentChainHeight", "TransactionBytes", "MerklePath", "TokenContractAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ValidateTokenInfoExistsInput), global::AElf.Contracts.MultiToken.ValidateTokenInfoExistsInput.Parser, new[]{ "Symbol", "TokenName", "TotalSupply", "Decimals", "Issuer", "IsBurnable", "IssueChainId", "IsProfitable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.InitializeInput), global::AElf.Contracts.MultiToken.InitializeInput.Parser, new[]{ "ResourceAmount" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.UpdateRentalInput), global::AElf.Contracts.MultiToken.UpdateRentalInput.Parser, new[]{ "Rental" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.UpdateRentedResourcesInput), global::AElf.Contracts.MultiToken.UpdateRentedResourcesInput.Parser, new[]{ "ResourceAmount" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.OwningRental), global::AElf.Contracts.MultiToken.OwningRental.Parser, new[]{ "ResourceAmount" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.CoefficientFromSender), global::AElf.Contracts.MultiToken.CoefficientFromSender.Parser, new[]{ "PieceKey", "IsChangePieceKey", "IsLiner", "LinerCoefficient", "PowerCoefficient", "NewPieceKeyCoefficient" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.LinerCoefficient), global::AElf.Contracts.MultiToken.LinerCoefficient.Parser, new[]{ "Numerator", "Denominator", "ConstantValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.PowerCoefficient), global::AElf.Contracts.MultiToken.PowerCoefficient.Parser, new[]{ "Numerator", "Denominator", "ConstantValue", "ChangeSpanBase", "Weight", "WeightBase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.NewPieceKeyCoefficient), global::AElf.Contracts.MultiToken.NewPieceKeyCoefficient.Parser, new[]{ "NewPieceKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.CoefficientFromContract), global::AElf.Contracts.MultiToken.CoefficientFromContract.Parser, new[]{ "FeeType", "Coefficient" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TokenSymbolWithAddress), global::AElf.Contracts.MultiToken.TokenSymbolWithAddress.Parser, new[]{ "TokenSymbol", "FromAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TokenStateInAddress), global::AElf.Contracts.MultiToken.TokenStateInAddress.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.AddTokeWhiteListInput), global::AElf.Contracts.MultiToken.AddTokeWhiteListInput.Parser, new[]{ "TokenSymbol", "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ResourceUsage), global::AElf.Contracts.MultiToken.ResourceUsage.Parser, new[]{ "Value" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.CalculateFeeCoefficientsOfType), global::AElf.Contracts.MultiToken.CalculateFeeCoefficientsOfType.Parser, new[]{ "Coefficients" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.CalculateFeeCoefficient), global::AElf.Contracts.MultiToken.CalculateFeeCoefficient.Parser, new[]{ "PieceKey", "FeeType", "FunctionType", "CoefficientDic" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.SymbolToPayTXSizeFee), global::AElf.Contracts.MultiToken.SymbolToPayTXSizeFee.Parser, new[]{ "TokenSymbol", "BaseTokenWeight", "AddedTokenWeight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.SymbolListToPayTXSizeFee), global::AElf.Contracts.MultiToken.SymbolListToPayTXSizeFee.Parser, new[]{ "SymbolsToPayTxSizeFee" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Transferred), global::AElf.Contracts.MultiToken.Transferred.Parser, new[]{ "From", "To", "Symbol", "Amount", "Memo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Approved), global::AElf.Contracts.MultiToken.Approved.Parser, new[]{ "Owner", "Spender", "Symbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.UnApproved), global::AElf.Contracts.MultiToken.UnApproved.Parser, new[]{ "Owner", "Spender", "Symbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Burned), global::AElf.Contracts.MultiToken.Burned.Parser, new[]{ "Burner", "Symbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ChainPrimaryTokenSymbolSet), global::AElf.Contracts.MultiToken.ChainPrimaryTokenSymbolSet.Parser, new[]{ "TokenSymbol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TransactionSizeFeeUnitPriceUpdated), global::AElf.Contracts.MultiToken.TransactionSizeFeeUnitPriceUpdated.Parser, new[]{ "UnitPrice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.NoticeUpdateCalculateFeeAlgorithm), global::AElf.Contracts.MultiToken.NoticeUpdateCalculateFeeAlgorithm.Parser, new[]{ "AllCoefficient" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.RentalCharged), global::AElf.Contracts.MultiToken.RentalCharged.Parser, new[]{ "Symbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.RentalAccountBalanceInsufficient), global::AElf.Contracts.MultiToken.RentalAccountBalanceInsufficient.Parser, new[]{ "Symbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ExtraTokenListModified), global::AElf.Contracts.MultiToken.ExtraTokenListModified.Parser, new[]{ "SymbolListToPayTxSizeFee" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ControllerForUserFee), global::AElf.Contracts.MultiToken.ControllerForUserFee.Parser, new[]{ "RootController", "ParliamentController", "ReferendumController" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ControllerForDeveloperFee), global::AElf.Contracts.MultiToken.ControllerForDeveloperFee.Parser, new[]{ "RootController", "ParliamentController", "DeveloperController" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ControllerInfoForUpdateSideChainRental), global::AElf.Contracts.MultiToken.ControllerInfoForUpdateSideChainRental.Parser, new[]{ "Controller", "OrganizationCreationInputBytes" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  internal enum FeeTypeEnum {
    [pbr::OriginalName("READ")] Read = 0,
    [pbr::OriginalName("STORAGE")] Storage = 1,
    [pbr::OriginalName("WRITE")] Write = 2,
    [pbr::OriginalName("TRAFFIC")] Traffic = 3,
    [pbr::OriginalName("TX")] Tx = 4,
  }

  internal enum CalculateFunctionTypeEnum {
    [pbr::OriginalName("LINER")] Liner = 0,
    [pbr::OriginalName("POWER")] Power = 1,
  }

  #endregion

  #region Messages
  internal sealed partial class TokenInfo : pb::IMessage<TokenInfo> {
    private static readonly pb::MessageParser<TokenInfo> _parser = new pb::MessageParser<TokenInfo>(() => new TokenInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfo(TokenInfo other) : this() {
      symbol_ = other.symbol_;
      tokenName_ = other.tokenName_;
      supply_ = other.supply_;
      totalSupply_ = other.totalSupply_;
      decimals_ = other.decimals_;
      issuer_ = other.issuer_ != null ? other.issuer_.Clone() : null;
      isBurnable_ = other.isBurnable_;
      isProfitable_ = other.isProfitable_;
      issueChainId_ = other.issueChainId_;
      burned_ = other.burned_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfo Clone() {
      return new TokenInfo(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token_name" field.</summary>
    public const int TokenNameFieldNumber = 2;
    private string tokenName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenName {
      get { return tokenName_; }
      set {
        tokenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "supply" field.</summary>
    public const int SupplyFieldNumber = 3;
    private long supply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Supply {
      get { return supply_; }
      set {
        supply_ = value;
      }
    }

    /// <summary>Field number for the "total_supply" field.</summary>
    public const int TotalSupplyFieldNumber = 4;
    private long totalSupply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSupply {
      get { return totalSupply_; }
      set {
        totalSupply_ = value;
      }
    }

    /// <summary>Field number for the "decimals" field.</summary>
    public const int DecimalsFieldNumber = 5;
    private int decimals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Decimals {
      get { return decimals_; }
      set {
        decimals_ = value;
      }
    }

    /// <summary>Field number for the "issuer" field.</summary>
    public const int IssuerFieldNumber = 6;
    private global::AElf.Types.Address issuer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Issuer {
      get { return issuer_; }
      set {
        issuer_ = value;
      }
    }

    /// <summary>Field number for the "is_burnable" field.</summary>
    public const int IsBurnableFieldNumber = 7;
    private bool isBurnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBurnable {
      get { return isBurnable_; }
      set {
        isBurnable_ = value;
      }
    }

    /// <summary>Field number for the "is_profitable" field.</summary>
    public const int IsProfitableFieldNumber = 8;
    private bool isProfitable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsProfitable {
      get { return isProfitable_; }
      set {
        isProfitable_ = value;
      }
    }

    /// <summary>Field number for the "issue_chain_id" field.</summary>
    public const int IssueChainIdFieldNumber = 9;
    private int issueChainId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IssueChainId {
      get { return issueChainId_; }
      set {
        issueChainId_ = value;
      }
    }

    /// <summary>Field number for the "burned" field.</summary>
    public const int BurnedFieldNumber = 10;
    private long burned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Burned {
      get { return burned_; }
      set {
        burned_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (TokenName != other.TokenName) return false;
      if (Supply != other.Supply) return false;
      if (TotalSupply != other.TotalSupply) return false;
      if (Decimals != other.Decimals) return false;
      if (!object.Equals(Issuer, other.Issuer)) return false;
      if (IsBurnable != other.IsBurnable) return false;
      if (IsProfitable != other.IsProfitable) return false;
      if (IssueChainId != other.IssueChainId) return false;
      if (Burned != other.Burned) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (TokenName.Length != 0) hash ^= TokenName.GetHashCode();
      if (Supply != 0L) hash ^= Supply.GetHashCode();
      if (TotalSupply != 0L) hash ^= TotalSupply.GetHashCode();
      if (Decimals != 0) hash ^= Decimals.GetHashCode();
      if (issuer_ != null) hash ^= Issuer.GetHashCode();
      if (IsBurnable != false) hash ^= IsBurnable.GetHashCode();
      if (IsProfitable != false) hash ^= IsProfitable.GetHashCode();
      if (IssueChainId != 0) hash ^= IssueChainId.GetHashCode();
      if (Burned != 0L) hash ^= Burned.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (TokenName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenName);
      }
      if (Supply != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Supply);
      }
      if (TotalSupply != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(TotalSupply);
      }
      if (Decimals != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Decimals);
      }
      if (issuer_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Issuer);
      }
      if (IsBurnable != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsBurnable);
      }
      if (IsProfitable != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsProfitable);
      }
      if (IssueChainId != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(IssueChainId);
      }
      if (Burned != 0L) {
        output.WriteRawTag(80);
        output.WriteSInt64(Burned);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (TokenName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenName);
      }
      if (Supply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Supply);
      }
      if (TotalSupply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TotalSupply);
      }
      if (Decimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Decimals);
      }
      if (issuer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Issuer);
      }
      if (IsBurnable != false) {
        size += 1 + 1;
      }
      if (IsProfitable != false) {
        size += 1 + 1;
      }
      if (IssueChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IssueChainId);
      }
      if (Burned != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Burned);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenInfo other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.TokenName.Length != 0) {
        TokenName = other.TokenName;
      }
      if (other.Supply != 0L) {
        Supply = other.Supply;
      }
      if (other.TotalSupply != 0L) {
        TotalSupply = other.TotalSupply;
      }
      if (other.Decimals != 0) {
        Decimals = other.Decimals;
      }
      if (other.issuer_ != null) {
        if (issuer_ == null) {
          Issuer = new global::AElf.Types.Address();
        }
        Issuer.MergeFrom(other.Issuer);
      }
      if (other.IsBurnable != false) {
        IsBurnable = other.IsBurnable;
      }
      if (other.IsProfitable != false) {
        IsProfitable = other.IsProfitable;
      }
      if (other.IssueChainId != 0) {
        IssueChainId = other.IssueChainId;
      }
      if (other.Burned != 0L) {
        Burned = other.Burned;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            TokenName = input.ReadString();
            break;
          }
          case 24: {
            Supply = input.ReadSInt64();
            break;
          }
          case 32: {
            TotalSupply = input.ReadSInt64();
            break;
          }
          case 40: {
            Decimals = input.ReadSInt32();
            break;
          }
          case 50: {
            if (issuer_ == null) {
              Issuer = new global::AElf.Types.Address();
            }
            input.ReadMessage(Issuer);
            break;
          }
          case 56: {
            IsBurnable = input.ReadBool();
            break;
          }
          case 64: {
            IsProfitable = input.ReadBool();
            break;
          }
          case 72: {
            IssueChainId = input.ReadSInt32();
            break;
          }
          case 80: {
            Burned = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateInput : pb::IMessage<CreateInput> {
    private static readonly pb::MessageParser<CreateInput> _parser = new pb::MessageParser<CreateInput>(() => new CreateInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInput(CreateInput other) : this() {
      symbol_ = other.symbol_;
      tokenName_ = other.tokenName_;
      totalSupply_ = other.totalSupply_;
      decimals_ = other.decimals_;
      issuer_ = other.issuer_ != null ? other.issuer_.Clone() : null;
      isBurnable_ = other.isBurnable_;
      lockWhiteList_ = other.lockWhiteList_.Clone();
      isProfitable_ = other.isProfitable_;
      issueChainId_ = other.issueChainId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInput Clone() {
      return new CreateInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token_name" field.</summary>
    public const int TokenNameFieldNumber = 2;
    private string tokenName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenName {
      get { return tokenName_; }
      set {
        tokenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_supply" field.</summary>
    public const int TotalSupplyFieldNumber = 3;
    private long totalSupply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSupply {
      get { return totalSupply_; }
      set {
        totalSupply_ = value;
      }
    }

    /// <summary>Field number for the "decimals" field.</summary>
    public const int DecimalsFieldNumber = 4;
    private int decimals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Decimals {
      get { return decimals_; }
      set {
        decimals_ = value;
      }
    }

    /// <summary>Field number for the "issuer" field.</summary>
    public const int IssuerFieldNumber = 5;
    private global::AElf.Types.Address issuer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Issuer {
      get { return issuer_; }
      set {
        issuer_ = value;
      }
    }

    /// <summary>Field number for the "is_burnable" field.</summary>
    public const int IsBurnableFieldNumber = 6;
    private bool isBurnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBurnable {
      get { return isBurnable_; }
      set {
        isBurnable_ = value;
      }
    }

    /// <summary>Field number for the "lock_white_list" field.</summary>
    public const int LockWhiteListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::AElf.Types.Address> _repeated_lockWhiteList_codec
        = pb::FieldCodec.ForMessage(58, global::AElf.Types.Address.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.Address> lockWhiteList_ = new pbc::RepeatedField<global::AElf.Types.Address>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.Address> LockWhiteList {
      get { return lockWhiteList_; }
    }

    /// <summary>Field number for the "is_profitable" field.</summary>
    public const int IsProfitableFieldNumber = 8;
    private bool isProfitable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsProfitable {
      get { return isProfitable_; }
      set {
        isProfitable_ = value;
      }
    }

    /// <summary>Field number for the "issue_chain_id" field.</summary>
    public const int IssueChainIdFieldNumber = 9;
    private int issueChainId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IssueChainId {
      get { return issueChainId_; }
      set {
        issueChainId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (TokenName != other.TokenName) return false;
      if (TotalSupply != other.TotalSupply) return false;
      if (Decimals != other.Decimals) return false;
      if (!object.Equals(Issuer, other.Issuer)) return false;
      if (IsBurnable != other.IsBurnable) return false;
      if(!lockWhiteList_.Equals(other.lockWhiteList_)) return false;
      if (IsProfitable != other.IsProfitable) return false;
      if (IssueChainId != other.IssueChainId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (TokenName.Length != 0) hash ^= TokenName.GetHashCode();
      if (TotalSupply != 0L) hash ^= TotalSupply.GetHashCode();
      if (Decimals != 0) hash ^= Decimals.GetHashCode();
      if (issuer_ != null) hash ^= Issuer.GetHashCode();
      if (IsBurnable != false) hash ^= IsBurnable.GetHashCode();
      hash ^= lockWhiteList_.GetHashCode();
      if (IsProfitable != false) hash ^= IsProfitable.GetHashCode();
      if (IssueChainId != 0) hash ^= IssueChainId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (TokenName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenName);
      }
      if (TotalSupply != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(TotalSupply);
      }
      if (Decimals != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Decimals);
      }
      if (issuer_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Issuer);
      }
      if (IsBurnable != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsBurnable);
      }
      lockWhiteList_.WriteTo(output, _repeated_lockWhiteList_codec);
      if (IsProfitable != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsProfitable);
      }
      if (IssueChainId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(IssueChainId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (TokenName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenName);
      }
      if (TotalSupply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TotalSupply);
      }
      if (Decimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Decimals);
      }
      if (issuer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Issuer);
      }
      if (IsBurnable != false) {
        size += 1 + 1;
      }
      size += lockWhiteList_.CalculateSize(_repeated_lockWhiteList_codec);
      if (IsProfitable != false) {
        size += 1 + 1;
      }
      if (IssueChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IssueChainId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.TokenName.Length != 0) {
        TokenName = other.TokenName;
      }
      if (other.TotalSupply != 0L) {
        TotalSupply = other.TotalSupply;
      }
      if (other.Decimals != 0) {
        Decimals = other.Decimals;
      }
      if (other.issuer_ != null) {
        if (issuer_ == null) {
          Issuer = new global::AElf.Types.Address();
        }
        Issuer.MergeFrom(other.Issuer);
      }
      if (other.IsBurnable != false) {
        IsBurnable = other.IsBurnable;
      }
      lockWhiteList_.Add(other.lockWhiteList_);
      if (other.IsProfitable != false) {
        IsProfitable = other.IsProfitable;
      }
      if (other.IssueChainId != 0) {
        IssueChainId = other.IssueChainId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            TokenName = input.ReadString();
            break;
          }
          case 24: {
            TotalSupply = input.ReadSInt64();
            break;
          }
          case 32: {
            Decimals = input.ReadSInt32();
            break;
          }
          case 42: {
            if (issuer_ == null) {
              Issuer = new global::AElf.Types.Address();
            }
            input.ReadMessage(Issuer);
            break;
          }
          case 48: {
            IsBurnable = input.ReadBool();
            break;
          }
          case 58: {
            lockWhiteList_.AddEntriesFrom(input, _repeated_lockWhiteList_codec);
            break;
          }
          case 64: {
            IsProfitable = input.ReadBool();
            break;
          }
          case 72: {
            IssueChainId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RegisterNativeTokenInfoInput : pb::IMessage<RegisterNativeTokenInfoInput> {
    private static readonly pb::MessageParser<RegisterNativeTokenInfoInput> _parser = new pb::MessageParser<RegisterNativeTokenInfoInput>(() => new RegisterNativeTokenInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterNativeTokenInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterNativeTokenInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterNativeTokenInfoInput(RegisterNativeTokenInfoInput other) : this() {
      symbol_ = other.symbol_;
      tokenName_ = other.tokenName_;
      totalSupply_ = other.totalSupply_;
      decimals_ = other.decimals_;
      issuer_ = other.issuer_ != null ? other.issuer_.Clone() : null;
      isBurnable_ = other.isBurnable_;
      isProfitable_ = other.isProfitable_;
      issueChainId_ = other.issueChainId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterNativeTokenInfoInput Clone() {
      return new RegisterNativeTokenInfoInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token_name" field.</summary>
    public const int TokenNameFieldNumber = 2;
    private string tokenName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenName {
      get { return tokenName_; }
      set {
        tokenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_supply" field.</summary>
    public const int TotalSupplyFieldNumber = 3;
    private long totalSupply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSupply {
      get { return totalSupply_; }
      set {
        totalSupply_ = value;
      }
    }

    /// <summary>Field number for the "decimals" field.</summary>
    public const int DecimalsFieldNumber = 4;
    private int decimals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Decimals {
      get { return decimals_; }
      set {
        decimals_ = value;
      }
    }

    /// <summary>Field number for the "issuer" field.</summary>
    public const int IssuerFieldNumber = 5;
    private global::AElf.Types.Address issuer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Issuer {
      get { return issuer_; }
      set {
        issuer_ = value;
      }
    }

    /// <summary>Field number for the "is_burnable" field.</summary>
    public const int IsBurnableFieldNumber = 6;
    private bool isBurnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBurnable {
      get { return isBurnable_; }
      set {
        isBurnable_ = value;
      }
    }

    /// <summary>Field number for the "is_profitable" field.</summary>
    public const int IsProfitableFieldNumber = 7;
    private bool isProfitable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsProfitable {
      get { return isProfitable_; }
      set {
        isProfitable_ = value;
      }
    }

    /// <summary>Field number for the "issue_chain_id" field.</summary>
    public const int IssueChainIdFieldNumber = 8;
    private int issueChainId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IssueChainId {
      get { return issueChainId_; }
      set {
        issueChainId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterNativeTokenInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterNativeTokenInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (TokenName != other.TokenName) return false;
      if (TotalSupply != other.TotalSupply) return false;
      if (Decimals != other.Decimals) return false;
      if (!object.Equals(Issuer, other.Issuer)) return false;
      if (IsBurnable != other.IsBurnable) return false;
      if (IsProfitable != other.IsProfitable) return false;
      if (IssueChainId != other.IssueChainId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (TokenName.Length != 0) hash ^= TokenName.GetHashCode();
      if (TotalSupply != 0L) hash ^= TotalSupply.GetHashCode();
      if (Decimals != 0) hash ^= Decimals.GetHashCode();
      if (issuer_ != null) hash ^= Issuer.GetHashCode();
      if (IsBurnable != false) hash ^= IsBurnable.GetHashCode();
      if (IsProfitable != false) hash ^= IsProfitable.GetHashCode();
      if (IssueChainId != 0) hash ^= IssueChainId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (TokenName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenName);
      }
      if (TotalSupply != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(TotalSupply);
      }
      if (Decimals != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Decimals);
      }
      if (issuer_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Issuer);
      }
      if (IsBurnable != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsBurnable);
      }
      if (IsProfitable != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsProfitable);
      }
      if (IssueChainId != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(IssueChainId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (TokenName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenName);
      }
      if (TotalSupply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TotalSupply);
      }
      if (Decimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Decimals);
      }
      if (issuer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Issuer);
      }
      if (IsBurnable != false) {
        size += 1 + 1;
      }
      if (IsProfitable != false) {
        size += 1 + 1;
      }
      if (IssueChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IssueChainId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterNativeTokenInfoInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.TokenName.Length != 0) {
        TokenName = other.TokenName;
      }
      if (other.TotalSupply != 0L) {
        TotalSupply = other.TotalSupply;
      }
      if (other.Decimals != 0) {
        Decimals = other.Decimals;
      }
      if (other.issuer_ != null) {
        if (issuer_ == null) {
          Issuer = new global::AElf.Types.Address();
        }
        Issuer.MergeFrom(other.Issuer);
      }
      if (other.IsBurnable != false) {
        IsBurnable = other.IsBurnable;
      }
      if (other.IsProfitable != false) {
        IsProfitable = other.IsProfitable;
      }
      if (other.IssueChainId != 0) {
        IssueChainId = other.IssueChainId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            TokenName = input.ReadString();
            break;
          }
          case 24: {
            TotalSupply = input.ReadSInt64();
            break;
          }
          case 32: {
            Decimals = input.ReadSInt32();
            break;
          }
          case 42: {
            if (issuer_ == null) {
              Issuer = new global::AElf.Types.Address();
            }
            input.ReadMessage(Issuer);
            break;
          }
          case 48: {
            IsBurnable = input.ReadBool();
            break;
          }
          case 56: {
            IsProfitable = input.ReadBool();
            break;
          }
          case 64: {
            IssueChainId = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RegisterNativeAndResourceTokenInfoInput : pb::IMessage<RegisterNativeAndResourceTokenInfoInput> {
    private static readonly pb::MessageParser<RegisterNativeAndResourceTokenInfoInput> _parser = new pb::MessageParser<RegisterNativeAndResourceTokenInfoInput>(() => new RegisterNativeAndResourceTokenInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterNativeAndResourceTokenInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterNativeAndResourceTokenInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterNativeAndResourceTokenInfoInput(RegisterNativeAndResourceTokenInfoInput other) : this() {
      nativeTokenInfo_ = other.nativeTokenInfo_ != null ? other.nativeTokenInfo_.Clone() : null;
      resourceTokenList_ = other.resourceTokenList_ != null ? other.resourceTokenList_.Clone() : null;
      chainPrimaryToken_ = other.chainPrimaryToken_ != null ? other.chainPrimaryToken_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterNativeAndResourceTokenInfoInput Clone() {
      return new RegisterNativeAndResourceTokenInfoInput(this);
    }

    /// <summary>Field number for the "native_token_info" field.</summary>
    public const int NativeTokenInfoFieldNumber = 1;
    private global::AElf.Contracts.MultiToken.RegisterNativeTokenInfoInput nativeTokenInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.RegisterNativeTokenInfoInput NativeTokenInfo {
      get { return nativeTokenInfo_; }
      set {
        nativeTokenInfo_ = value;
      }
    }

    /// <summary>Field number for the "resource_token_list" field.</summary>
    public const int ResourceTokenListFieldNumber = 2;
    private global::AElf.Contracts.MultiToken.TokenInfoList resourceTokenList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.TokenInfoList ResourceTokenList {
      get { return resourceTokenList_; }
      set {
        resourceTokenList_ = value;
      }
    }

    /// <summary>Field number for the "chain_primary_token" field.</summary>
    public const int ChainPrimaryTokenFieldNumber = 3;
    private global::AElf.Contracts.MultiToken.TokenInfo chainPrimaryToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.TokenInfo ChainPrimaryToken {
      get { return chainPrimaryToken_; }
      set {
        chainPrimaryToken_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterNativeAndResourceTokenInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterNativeAndResourceTokenInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NativeTokenInfo, other.NativeTokenInfo)) return false;
      if (!object.Equals(ResourceTokenList, other.ResourceTokenList)) return false;
      if (!object.Equals(ChainPrimaryToken, other.ChainPrimaryToken)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (nativeTokenInfo_ != null) hash ^= NativeTokenInfo.GetHashCode();
      if (resourceTokenList_ != null) hash ^= ResourceTokenList.GetHashCode();
      if (chainPrimaryToken_ != null) hash ^= ChainPrimaryToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (nativeTokenInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NativeTokenInfo);
      }
      if (resourceTokenList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ResourceTokenList);
      }
      if (chainPrimaryToken_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ChainPrimaryToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (nativeTokenInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NativeTokenInfo);
      }
      if (resourceTokenList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResourceTokenList);
      }
      if (chainPrimaryToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChainPrimaryToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterNativeAndResourceTokenInfoInput other) {
      if (other == null) {
        return;
      }
      if (other.nativeTokenInfo_ != null) {
        if (nativeTokenInfo_ == null) {
          NativeTokenInfo = new global::AElf.Contracts.MultiToken.RegisterNativeTokenInfoInput();
        }
        NativeTokenInfo.MergeFrom(other.NativeTokenInfo);
      }
      if (other.resourceTokenList_ != null) {
        if (resourceTokenList_ == null) {
          ResourceTokenList = new global::AElf.Contracts.MultiToken.TokenInfoList();
        }
        ResourceTokenList.MergeFrom(other.ResourceTokenList);
      }
      if (other.chainPrimaryToken_ != null) {
        if (chainPrimaryToken_ == null) {
          ChainPrimaryToken = new global::AElf.Contracts.MultiToken.TokenInfo();
        }
        ChainPrimaryToken.MergeFrom(other.ChainPrimaryToken);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (nativeTokenInfo_ == null) {
              NativeTokenInfo = new global::AElf.Contracts.MultiToken.RegisterNativeTokenInfoInput();
            }
            input.ReadMessage(NativeTokenInfo);
            break;
          }
          case 18: {
            if (resourceTokenList_ == null) {
              ResourceTokenList = new global::AElf.Contracts.MultiToken.TokenInfoList();
            }
            input.ReadMessage(ResourceTokenList);
            break;
          }
          case 26: {
            if (chainPrimaryToken_ == null) {
              ChainPrimaryToken = new global::AElf.Contracts.MultiToken.TokenInfo();
            }
            input.ReadMessage(ChainPrimaryToken);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class IssueInput : pb::IMessage<IssueInput> {
    private static readonly pb::MessageParser<IssueInput> _parser = new pb::MessageParser<IssueInput>(() => new IssueInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IssueInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueInput(IssueInput other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueInput Clone() {
      return new IssueInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 3;
    private string memo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 4;
    private global::AElf.Types.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IssueInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IssueInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      if (!object.Equals(To, other.To)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Memo);
      }
      if (to_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IssueInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Types.Address();
        }
        To.MergeFrom(other.To);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
          case 26: {
            Memo = input.ReadString();
            break;
          }
          case 34: {
            if (to_ == null) {
              To = new global::AElf.Types.Address();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class TransferInput : pb::IMessage<TransferInput> {
    private static readonly pb::MessageParser<TransferInput> _parser = new pb::MessageParser<TransferInput>(() => new TransferInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferInput(TransferInput other) : this() {
      to_ = other.to_ != null ? other.to_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferInput Clone() {
      return new TransferInput(this);
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 1;
    private global::AElf.Types.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 4;
    private string memo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(To, other.To)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (to_ != null) hash ^= To.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (to_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(To);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Memo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferInput other) {
      if (other == null) {
        return;
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Types.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (to_ == null) {
              To = new global::AElf.Types.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadSInt64();
            break;
          }
          case 34: {
            Memo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class LockInput : pb::IMessage<LockInput> {
    private static readonly pb::MessageParser<LockInput> _parser = new pb::MessageParser<LockInput>(() => new LockInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LockInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockInput(LockInput other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      lockId_ = other.lockId_ != null ? other.lockId_.Clone() : null;
      symbol_ = other.symbol_;
      usage_ = other.usage_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockInput Clone() {
      return new LockInput(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::AElf.Types.Address address_;
    /// <summary>
    /// The one want to lock his token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "lock_id" field.</summary>
    public const int LockIdFieldNumber = 2;
    private global::AElf.Types.Hash lockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash LockId {
      get { return lockId_; }
      set {
        lockId_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "usage" field.</summary>
    public const int UsageFieldNumber = 4;
    private string usage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Usage {
      get { return usage_; }
      set {
        usage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 5;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LockInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LockInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if (!object.Equals(LockId, other.LockId)) return false;
      if (Symbol != other.Symbol) return false;
      if (Usage != other.Usage) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (lockId_ != null) hash ^= LockId.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Usage.Length != 0) hash ^= Usage.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (lockId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LockId);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Usage.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Usage);
      }
      if (Amount != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (lockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LockId);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Usage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Usage);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LockInput other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.lockId_ != null) {
        if (lockId_ == null) {
          LockId = new global::AElf.Types.Hash();
        }
        LockId.MergeFrom(other.LockId);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Usage.Length != 0) {
        Usage = other.Usage;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 18: {
            if (lockId_ == null) {
              LockId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(LockId);
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 34: {
            Usage = input.ReadString();
            break;
          }
          case 40: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UnlockInput : pb::IMessage<UnlockInput> {
    private static readonly pb::MessageParser<UnlockInput> _parser = new pb::MessageParser<UnlockInput>(() => new UnlockInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnlockInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockInput(UnlockInput other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      lockId_ = other.lockId_ != null ? other.lockId_.Clone() : null;
      symbol_ = other.symbol_;
      usage_ = other.usage_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockInput Clone() {
      return new UnlockInput(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::AElf.Types.Address address_;
    /// <summary>
    /// The one want to lock his token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "lock_id" field.</summary>
    public const int LockIdFieldNumber = 2;
    private global::AElf.Types.Hash lockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash LockId {
      get { return lockId_; }
      set {
        lockId_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "usage" field.</summary>
    public const int UsageFieldNumber = 4;
    private string usage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Usage {
      get { return usage_; }
      set {
        usage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 5;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnlockInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnlockInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if (!object.Equals(LockId, other.LockId)) return false;
      if (Symbol != other.Symbol) return false;
      if (Usage != other.Usage) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (lockId_ != null) hash ^= LockId.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Usage.Length != 0) hash ^= Usage.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (lockId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LockId);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Usage.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Usage);
      }
      if (Amount != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (lockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LockId);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Usage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Usage);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnlockInput other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.lockId_ != null) {
        if (lockId_ == null) {
          LockId = new global::AElf.Types.Hash();
        }
        LockId.MergeFrom(other.LockId);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Usage.Length != 0) {
        Usage = other.Usage;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 18: {
            if (lockId_ == null) {
              LockId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(LockId);
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 34: {
            Usage = input.ReadString();
            break;
          }
          case 40: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class TransferFromInput : pb::IMessage<TransferFromInput> {
    private static readonly pb::MessageParser<TransferFromInput> _parser = new pb::MessageParser<TransferFromInput>(() => new TransferFromInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferFromInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferFromInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferFromInput(TransferFromInput other) : this() {
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferFromInput Clone() {
      return new TransferFromInput(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::AElf.Types.Address from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::AElf.Types.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 5;
    private string memo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferFromInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferFromInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Memo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferFromInput other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::AElf.Types.Address();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Types.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (from_ == null) {
              From = new global::AElf.Types.Address();
            }
            input.ReadMessage(From);
            break;
          }
          case 18: {
            if (to_ == null) {
              To = new global::AElf.Types.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 32: {
            Amount = input.ReadSInt64();
            break;
          }
          case 42: {
            Memo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ApproveInput : pb::IMessage<ApproveInput> {
    private static readonly pb::MessageParser<ApproveInput> _parser = new pb::MessageParser<ApproveInput>(() => new ApproveInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApproveInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveInput(ApproveInput other) : this() {
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveInput Clone() {
      return new ApproveInput(this);
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 1;
    private global::AElf.Types.Address spender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApproveInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApproveInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Spender, other.Spender)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (spender_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Spender);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApproveInput other) {
      if (other == null) {
        return;
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Types.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (spender_ == null) {
              Spender = new global::AElf.Types.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UnApproveInput : pb::IMessage<UnApproveInput> {
    private static readonly pb::MessageParser<UnApproveInput> _parser = new pb::MessageParser<UnApproveInput>(() => new UnApproveInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnApproveInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproveInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproveInput(UnApproveInput other) : this() {
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproveInput Clone() {
      return new UnApproveInput(this);
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 1;
    private global::AElf.Types.Address spender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnApproveInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnApproveInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Spender, other.Spender)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (spender_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Spender);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnApproveInput other) {
      if (other == null) {
        return;
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Types.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (spender_ == null) {
              Spender = new global::AElf.Types.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class BurnInput : pb::IMessage<BurnInput> {
    private static readonly pb::MessageParser<BurnInput> _parser = new pb::MessageParser<BurnInput>(() => new BurnInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BurnInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BurnInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BurnInput(BurnInput other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BurnInput Clone() {
      return new BurnInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BurnInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BurnInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BurnInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ChargeTransactionFeesInput : pb::IMessage<ChargeTransactionFeesInput> {
    private static readonly pb::MessageParser<ChargeTransactionFeesInput> _parser = new pb::MessageParser<ChargeTransactionFeesInput>(() => new ChargeTransactionFeesInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChargeTransactionFeesInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeTransactionFeesInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeTransactionFeesInput(ChargeTransactionFeesInput other) : this() {
      methodName_ = other.methodName_;
      contractAddress_ = other.contractAddress_ != null ? other.contractAddress_.Clone() : null;
      transactionSizeFee_ = other.transactionSizeFee_;
      primaryTokenSymbol_ = other.primaryTokenSymbol_;
      symbolsToPayTxSizeFee_ = other.symbolsToPayTxSizeFee_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeTransactionFeesInput Clone() {
      return new ChargeTransactionFeesInput(this);
    }

    /// <summary>Field number for the "method_name" field.</summary>
    public const int MethodNameFieldNumber = 1;
    private string methodName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MethodName {
      get { return methodName_; }
      set {
        methodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contract_address" field.</summary>
    public const int ContractAddressFieldNumber = 2;
    private global::AElf.Types.Address contractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ContractAddress {
      get { return contractAddress_; }
      set {
        contractAddress_ = value;
      }
    }

    /// <summary>Field number for the "transaction_size_fee" field.</summary>
    public const int TransactionSizeFeeFieldNumber = 3;
    private long transactionSizeFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionSizeFee {
      get { return transactionSizeFee_; }
      set {
        transactionSizeFee_ = value;
      }
    }

    /// <summary>Field number for the "primary_token_symbol" field.</summary>
    public const int PrimaryTokenSymbolFieldNumber = 4;
    private string primaryTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrimaryTokenSymbol {
      get { return primaryTokenSymbol_; }
      set {
        primaryTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbols_to_pay_tx_size_fee" field.</summary>
    public const int SymbolsToPayTxSizeFeeFieldNumber = 5;
    private static readonly pb::FieldCodec<global::AElf.Contracts.MultiToken.SymbolToPayTXSizeFee> _repeated_symbolsToPayTxSizeFee_codec
        = pb::FieldCodec.ForMessage(42, global::AElf.Contracts.MultiToken.SymbolToPayTXSizeFee.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.MultiToken.SymbolToPayTXSizeFee> symbolsToPayTxSizeFee_ = new pbc::RepeatedField<global::AElf.Contracts.MultiToken.SymbolToPayTXSizeFee>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.MultiToken.SymbolToPayTXSizeFee> SymbolsToPayTxSizeFee {
      get { return symbolsToPayTxSizeFee_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChargeTransactionFeesInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChargeTransactionFeesInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MethodName != other.MethodName) return false;
      if (!object.Equals(ContractAddress, other.ContractAddress)) return false;
      if (TransactionSizeFee != other.TransactionSizeFee) return false;
      if (PrimaryTokenSymbol != other.PrimaryTokenSymbol) return false;
      if(!symbolsToPayTxSizeFee_.Equals(other.symbolsToPayTxSizeFee_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MethodName.Length != 0) hash ^= MethodName.GetHashCode();
      if (contractAddress_ != null) hash ^= ContractAddress.GetHashCode();
      if (TransactionSizeFee != 0L) hash ^= TransactionSizeFee.GetHashCode();
      if (PrimaryTokenSymbol.Length != 0) hash ^= PrimaryTokenSymbol.GetHashCode();
      hash ^= symbolsToPayTxSizeFee_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MethodName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MethodName);
      }
      if (contractAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ContractAddress);
      }
      if (TransactionSizeFee != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(TransactionSizeFee);
      }
      if (PrimaryTokenSymbol.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PrimaryTokenSymbol);
      }
      symbolsToPayTxSizeFee_.WriteTo(output, _repeated_symbolsToPayTxSizeFee_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MethodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MethodName);
      }
      if (contractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractAddress);
      }
      if (TransactionSizeFee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TransactionSizeFee);
      }
      if (PrimaryTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrimaryTokenSymbol);
      }
      size += symbolsToPayTxSizeFee_.CalculateSize(_repeated_symbolsToPayTxSizeFee_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChargeTransactionFeesInput other) {
      if (other == null) {
        return;
      }
      if (other.MethodName.Length != 0) {
        MethodName = other.MethodName;
      }
      if (other.contractAddress_ != null) {
        if (contractAddress_ == null) {
          ContractAddress = new global::AElf.Types.Address();
        }
        ContractAddress.MergeFrom(other.ContractAddress);
      }
      if (other.TransactionSizeFee != 0L) {
        TransactionSizeFee = other.TransactionSizeFee;
      }
      if (other.PrimaryTokenSymbol.Length != 0) {
        PrimaryTokenSymbol = other.PrimaryTokenSymbol;
      }
      symbolsToPayTxSizeFee_.Add(other.symbolsToPayTxSizeFee_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MethodName = input.ReadString();
            break;
          }
          case 18: {
            if (contractAddress_ == null) {
              ContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ContractAddress);
            break;
          }
          case 24: {
            TransactionSizeFee = input.ReadSInt64();
            break;
          }
          case 34: {
            PrimaryTokenSymbol = input.ReadString();
            break;
          }
          case 42: {
            symbolsToPayTxSizeFee_.AddEntriesFrom(input, _repeated_symbolsToPayTxSizeFee_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class TransactionFeeBill : pb::IMessage<TransactionFeeBill> {
    private static readonly pb::MessageParser<TransactionFeeBill> _parser = new pb::MessageParser<TransactionFeeBill>(() => new TransactionFeeBill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionFeeBill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFeeBill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFeeBill(TransactionFeeBill other) : this() {
      tokenToAmount_ = other.tokenToAmount_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionFeeBill Clone() {
      return new TransactionFeeBill(this);
    }

    /// <summary>Field number for the "token_to_amount" field.</summary>
    public const int TokenToAmountFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_tokenToAmount_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForSInt64(16), 10);
    private readonly pbc::MapField<string, long> tokenToAmount_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> TokenToAmount {
      get { return tokenToAmount_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionFeeBill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionFeeBill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!TokenToAmount.Equals(other.TokenToAmount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= TokenToAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tokenToAmount_.WriteTo(output, _map_tokenToAmount_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tokenToAmount_.CalculateSize(_map_tokenToAmount_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionFeeBill other) {
      if (other == null) {
        return;
      }
      tokenToAmount_.Add(other.tokenToAmount_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            tokenToAmount_.AddEntriesFrom(input, _map_tokenToAmount_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ChargeResourceTokenInput : pb::IMessage<ChargeResourceTokenInput> {
    private static readonly pb::MessageParser<ChargeResourceTokenInput> _parser = new pb::MessageParser<ChargeResourceTokenInput>(() => new ChargeResourceTokenInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChargeResourceTokenInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeResourceTokenInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeResourceTokenInput(ChargeResourceTokenInput other) : this() {
      trafficCost_ = other.trafficCost_;
      storageCost_ = other.storageCost_;
      readCost_ = other.readCost_;
      writeCost_ = other.writeCost_;
      caller_ = other.caller_ != null ? other.caller_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeResourceTokenInput Clone() {
      return new ChargeResourceTokenInput(this);
    }

    /// <summary>Field number for the "traffic_cost" field.</summary>
    public const int TrafficCostFieldNumber = 1;
    private long trafficCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TrafficCost {
      get { return trafficCost_; }
      set {
        trafficCost_ = value;
      }
    }

    /// <summary>Field number for the "storage_cost" field.</summary>
    public const int StorageCostFieldNumber = 2;
    private long storageCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StorageCost {
      get { return storageCost_; }
      set {
        storageCost_ = value;
      }
    }

    /// <summary>Field number for the "read_cost" field.</summary>
    public const int ReadCostFieldNumber = 3;
    private long readCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReadCost {
      get { return readCost_; }
      set {
        readCost_ = value;
      }
    }

    /// <summary>Field number for the "write_cost" field.</summary>
    public const int WriteCostFieldNumber = 4;
    private long writeCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WriteCost {
      get { return writeCost_; }
      set {
        writeCost_ = value;
      }
    }

    /// <summary>Field number for the "caller" field.</summary>
    public const int CallerFieldNumber = 5;
    private global::AElf.Types.Address caller_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Caller {
      get { return caller_; }
      set {
        caller_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChargeResourceTokenInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChargeResourceTokenInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TrafficCost != other.TrafficCost) return false;
      if (StorageCost != other.StorageCost) return false;
      if (ReadCost != other.ReadCost) return false;
      if (WriteCost != other.WriteCost) return false;
      if (!object.Equals(Caller, other.Caller)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TrafficCost != 0L) hash ^= TrafficCost.GetHashCode();
      if (StorageCost != 0L) hash ^= StorageCost.GetHashCode();
      if (ReadCost != 0L) hash ^= ReadCost.GetHashCode();
      if (WriteCost != 0L) hash ^= WriteCost.GetHashCode();
      if (caller_ != null) hash ^= Caller.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TrafficCost != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TrafficCost);
      }
      if (StorageCost != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(StorageCost);
      }
      if (ReadCost != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(ReadCost);
      }
      if (WriteCost != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(WriteCost);
      }
      if (caller_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Caller);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TrafficCost != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TrafficCost);
      }
      if (StorageCost != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(StorageCost);
      }
      if (ReadCost != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ReadCost);
      }
      if (WriteCost != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(WriteCost);
      }
      if (caller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Caller);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChargeResourceTokenInput other) {
      if (other == null) {
        return;
      }
      if (other.TrafficCost != 0L) {
        TrafficCost = other.TrafficCost;
      }
      if (other.StorageCost != 0L) {
        StorageCost = other.StorageCost;
      }
      if (other.ReadCost != 0L) {
        ReadCost = other.ReadCost;
      }
      if (other.WriteCost != 0L) {
        WriteCost = other.WriteCost;
      }
      if (other.caller_ != null) {
        if (caller_ == null) {
          Caller = new global::AElf.Types.Address();
        }
        Caller.MergeFrom(other.Caller);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TrafficCost = input.ReadSInt64();
            break;
          }
          case 16: {
            StorageCost = input.ReadSInt64();
            break;
          }
          case 24: {
            ReadCost = input.ReadSInt64();
            break;
          }
          case 32: {
            WriteCost = input.ReadSInt64();
            break;
          }
          case 42: {
            if (caller_ == null) {
              Caller = new global::AElf.Types.Address();
            }
            input.ReadMessage(Caller);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetTokenInfoInput : pb::IMessage<GetTokenInfoInput> {
    private static readonly pb::MessageParser<GetTokenInfoInput> _parser = new pb::MessageParser<GetTokenInfoInput>(() => new GetTokenInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTokenInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenInfoInput(GetTokenInfoInput other) : this() {
      symbol_ = other.symbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenInfoInput Clone() {
      return new GetTokenInfoInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTokenInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTokenInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTokenInfoInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetBalanceInput : pb::IMessage<GetBalanceInput> {
    private static readonly pb::MessageParser<GetBalanceInput> _parser = new pb::MessageParser<GetBalanceInput>(() => new GetBalanceInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBalanceInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceInput(GetBalanceInput other) : this() {
      symbol_ = other.symbol_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceInput Clone() {
      return new GetBalanceInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::AElf.Types.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBalanceInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBalanceInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBalanceInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Types.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::AElf.Types.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetBalanceOutput : pb::IMessage<GetBalanceOutput> {
    private static readonly pb::MessageParser<GetBalanceOutput> _parser = new pb::MessageParser<GetBalanceOutput>(() => new GetBalanceOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBalanceOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceOutput(GetBalanceOutput other) : this() {
      symbol_ = other.symbol_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      balance_ = other.balance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceOutput Clone() {
      return new GetBalanceOutput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::AElf.Types.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 3;
    private long balance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Balance {
      get { return balance_; }
      set {
        balance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBalanceOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBalanceOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (Balance != other.Balance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (Balance != 0L) hash ^= Balance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (Balance != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Balance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (Balance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Balance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBalanceOutput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Types.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.Balance != 0L) {
        Balance = other.Balance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::AElf.Types.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 24: {
            Balance = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetAllowanceInput : pb::IMessage<GetAllowanceInput> {
    private static readonly pb::MessageParser<GetAllowanceInput> _parser = new pb::MessageParser<GetAllowanceInput>(() => new GetAllowanceInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAllowanceInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceInput(GetAllowanceInput other) : this() {
      symbol_ = other.symbol_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceInput Clone() {
      return new GetAllowanceInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::AElf.Types.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 3;
    private global::AElf.Types.Address spender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAllowanceInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAllowanceInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (!object.Equals(Spender, other.Spender)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (spender_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Spender);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAllowanceInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Types.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Types.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::AElf.Types.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 26: {
            if (spender_ == null) {
              Spender = new global::AElf.Types.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetAllowanceOutput : pb::IMessage<GetAllowanceOutput> {
    private static readonly pb::MessageParser<GetAllowanceOutput> _parser = new pb::MessageParser<GetAllowanceOutput>(() => new GetAllowanceOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAllowanceOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceOutput(GetAllowanceOutput other) : this() {
      symbol_ = other.symbol_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      allowance_ = other.allowance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceOutput Clone() {
      return new GetAllowanceOutput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::AElf.Types.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 3;
    private global::AElf.Types.Address spender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    /// <summary>Field number for the "allowance" field.</summary>
    public const int AllowanceFieldNumber = 4;
    private long allowance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Allowance {
      get { return allowance_; }
      set {
        allowance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAllowanceOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAllowanceOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (!object.Equals(Spender, other.Spender)) return false;
      if (Allowance != other.Allowance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (Allowance != 0L) hash ^= Allowance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (spender_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Spender);
      }
      if (Allowance != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(Allowance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (Allowance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Allowance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAllowanceOutput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Types.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Types.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      if (other.Allowance != 0L) {
        Allowance = other.Allowance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::AElf.Types.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 26: {
            if (spender_ == null) {
              Spender = new global::AElf.Types.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
          case 32: {
            Allowance = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CrossChainTransferInput : pb::IMessage<CrossChainTransferInput> {
    private static readonly pb::MessageParser<CrossChainTransferInput> _parser = new pb::MessageParser<CrossChainTransferInput>(() => new CrossChainTransferInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrossChainTransferInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainTransferInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainTransferInput(CrossChainTransferInput other) : this() {
      to_ = other.to_ != null ? other.to_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      toChainId_ = other.toChainId_;
      issueChainId_ = other.issueChainId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainTransferInput Clone() {
      return new CrossChainTransferInput(this);
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 1;
    private global::AElf.Types.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 4;
    private string memo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to_chain_id" field.</summary>
    public const int ToChainIdFieldNumber = 5;
    private int toChainId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToChainId {
      get { return toChainId_; }
      set {
        toChainId_ = value;
      }
    }

    /// <summary>Field number for the "issue_chain_id" field.</summary>
    public const int IssueChainIdFieldNumber = 6;
    private int issueChainId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IssueChainId {
      get { return issueChainId_; }
      set {
        issueChainId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrossChainTransferInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrossChainTransferInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(To, other.To)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      if (ToChainId != other.ToChainId) return false;
      if (IssueChainId != other.IssueChainId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (to_ != null) hash ^= To.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (ToChainId != 0) hash ^= ToChainId.GetHashCode();
      if (IssueChainId != 0) hash ^= IssueChainId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (to_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(To);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Memo);
      }
      if (ToChainId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ToChainId);
      }
      if (IssueChainId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(IssueChainId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (ToChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToChainId);
      }
      if (IssueChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IssueChainId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrossChainTransferInput other) {
      if (other == null) {
        return;
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Types.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      if (other.ToChainId != 0) {
        ToChainId = other.ToChainId;
      }
      if (other.IssueChainId != 0) {
        IssueChainId = other.IssueChainId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (to_ == null) {
              To = new global::AElf.Types.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadSInt64();
            break;
          }
          case 34: {
            Memo = input.ReadString();
            break;
          }
          case 40: {
            ToChainId = input.ReadInt32();
            break;
          }
          case 48: {
            IssueChainId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CrossChainReceiveTokenInput : pb::IMessage<CrossChainReceiveTokenInput> {
    private static readonly pb::MessageParser<CrossChainReceiveTokenInput> _parser = new pb::MessageParser<CrossChainReceiveTokenInput>(() => new CrossChainReceiveTokenInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrossChainReceiveTokenInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainReceiveTokenInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainReceiveTokenInput(CrossChainReceiveTokenInput other) : this() {
      fromChainId_ = other.fromChainId_;
      parentChainHeight_ = other.parentChainHeight_;
      transferTransactionBytes_ = other.transferTransactionBytes_;
      merklePath_ = other.merklePath_ != null ? other.merklePath_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainReceiveTokenInput Clone() {
      return new CrossChainReceiveTokenInput(this);
    }

    /// <summary>Field number for the "from_chain_id" field.</summary>
    public const int FromChainIdFieldNumber = 1;
    private int fromChainId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromChainId {
      get { return fromChainId_; }
      set {
        fromChainId_ = value;
      }
    }

    /// <summary>Field number for the "parent_chain_height" field.</summary>
    public const int ParentChainHeightFieldNumber = 2;
    private long parentChainHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParentChainHeight {
      get { return parentChainHeight_; }
      set {
        parentChainHeight_ = value;
      }
    }

    /// <summary>Field number for the "transfer_transaction_bytes" field.</summary>
    public const int TransferTransactionBytesFieldNumber = 3;
    private pb::ByteString transferTransactionBytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransferTransactionBytes {
      get { return transferTransactionBytes_; }
      set {
        transferTransactionBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "merkle_path" field.</summary>
    public const int MerklePathFieldNumber = 4;
    private global::AElf.Types.MerklePath merklePath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.MerklePath MerklePath {
      get { return merklePath_; }
      set {
        merklePath_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrossChainReceiveTokenInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrossChainReceiveTokenInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromChainId != other.FromChainId) return false;
      if (ParentChainHeight != other.ParentChainHeight) return false;
      if (TransferTransactionBytes != other.TransferTransactionBytes) return false;
      if (!object.Equals(MerklePath, other.MerklePath)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromChainId != 0) hash ^= FromChainId.GetHashCode();
      if (ParentChainHeight != 0L) hash ^= ParentChainHeight.GetHashCode();
      if (TransferTransactionBytes.Length != 0) hash ^= TransferTransactionBytes.GetHashCode();
      if (merklePath_ != null) hash ^= MerklePath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromChainId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FromChainId);
      }
      if (ParentChainHeight != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ParentChainHeight);
      }
      if (TransferTransactionBytes.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TransferTransactionBytes);
      }
      if (merklePath_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MerklePath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromChainId);
      }
      if (ParentChainHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParentChainHeight);
      }
      if (TransferTransactionBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransferTransactionBytes);
      }
      if (merklePath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MerklePath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrossChainReceiveTokenInput other) {
      if (other == null) {
        return;
      }
      if (other.FromChainId != 0) {
        FromChainId = other.FromChainId;
      }
      if (other.ParentChainHeight != 0L) {
        ParentChainHeight = other.ParentChainHeight;
      }
      if (other.TransferTransactionBytes.Length != 0) {
        TransferTransactionBytes = other.TransferTransactionBytes;
      }
      if (other.merklePath_ != null) {
        if (merklePath_ == null) {
          MerklePath = new global::AElf.Types.MerklePath();
        }
        MerklePath.MergeFrom(other.MerklePath);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FromChainId = input.ReadInt32();
            break;
          }
          case 16: {
            ParentChainHeight = input.ReadInt64();
            break;
          }
          case 26: {
            TransferTransactionBytes = input.ReadBytes();
            break;
          }
          case 34: {
            if (merklePath_ == null) {
              MerklePath = new global::AElf.Types.MerklePath();
            }
            input.ReadMessage(MerklePath);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class IsInWhiteListInput : pb::IMessage<IsInWhiteListInput> {
    private static readonly pb::MessageParser<IsInWhiteListInput> _parser = new pb::MessageParser<IsInWhiteListInput>(() => new IsInWhiteListInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IsInWhiteListInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsInWhiteListInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsInWhiteListInput(IsInWhiteListInput other) : this() {
      symbol_ = other.symbol_;
      address_ = other.address_ != null ? other.address_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsInWhiteListInput Clone() {
      return new IsInWhiteListInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private global::AElf.Types.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IsInWhiteListInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IsInWhiteListInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Address, other.Address)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (address_ != null) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (address_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IsInWhiteListInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CheckThresholdInput : pb::IMessage<CheckThresholdInput> {
    private static readonly pb::MessageParser<CheckThresholdInput> _parser = new pb::MessageParser<CheckThresholdInput>(() => new CheckThresholdInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckThresholdInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckThresholdInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckThresholdInput(CheckThresholdInput other) : this() {
      sender_ = other.sender_ != null ? other.sender_.Clone() : null;
      symbolToThreshold_ = other.symbolToThreshold_.Clone();
      isCheckAllowance_ = other.isCheckAllowance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckThresholdInput Clone() {
      return new CheckThresholdInput(this);
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 1;
    private global::AElf.Types.Address sender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    /// <summary>Field number for the "symbol_to_threshold" field.</summary>
    public const int SymbolToThresholdFieldNumber = 2;
    private static readonly pbc::MapField<string, long>.Codec _map_symbolToThreshold_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForSInt64(16), 18);
    private readonly pbc::MapField<string, long> symbolToThreshold_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> SymbolToThreshold {
      get { return symbolToThreshold_; }
    }

    /// <summary>Field number for the "is_check_allowance" field.</summary>
    public const int IsCheckAllowanceFieldNumber = 3;
    private bool isCheckAllowance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCheckAllowance {
      get { return isCheckAllowance_; }
      set {
        isCheckAllowance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckThresholdInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckThresholdInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Sender, other.Sender)) return false;
      if (!SymbolToThreshold.Equals(other.SymbolToThreshold)) return false;
      if (IsCheckAllowance != other.IsCheckAllowance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sender_ != null) hash ^= Sender.GetHashCode();
      hash ^= SymbolToThreshold.GetHashCode();
      if (IsCheckAllowance != false) hash ^= IsCheckAllowance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sender_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Sender);
      }
      symbolToThreshold_.WriteTo(output, _map_symbolToThreshold_codec);
      if (IsCheckAllowance != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsCheckAllowance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sender);
      }
      size += symbolToThreshold_.CalculateSize(_map_symbolToThreshold_codec);
      if (IsCheckAllowance != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckThresholdInput other) {
      if (other == null) {
        return;
      }
      if (other.sender_ != null) {
        if (sender_ == null) {
          Sender = new global::AElf.Types.Address();
        }
        Sender.MergeFrom(other.Sender);
      }
      symbolToThreshold_.Add(other.symbolToThreshold_);
      if (other.IsCheckAllowance != false) {
        IsCheckAllowance = other.IsCheckAllowance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (sender_ == null) {
              Sender = new global::AElf.Types.Address();
            }
            input.ReadMessage(Sender);
            break;
          }
          case 18: {
            symbolToThreshold_.AddEntriesFrom(input, _map_symbolToThreshold_codec);
            break;
          }
          case 24: {
            IsCheckAllowance = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ProfitReceivingInformation : pb::IMessage<ProfitReceivingInformation> {
    private static readonly pb::MessageParser<ProfitReceivingInformation> _parser = new pb::MessageParser<ProfitReceivingInformation>(() => new ProfitReceivingInformation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfitReceivingInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitReceivingInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitReceivingInformation(ProfitReceivingInformation other) : this() {
      contractAddress_ = other.contractAddress_ != null ? other.contractAddress_.Clone() : null;
      profitReceiverAddress_ = other.profitReceiverAddress_ != null ? other.profitReceiverAddress_.Clone() : null;
      donationPartsPerHundred_ = other.donationPartsPerHundred_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitReceivingInformation Clone() {
      return new ProfitReceivingInformation(this);
    }

    /// <summary>Field number for the "contract_address" field.</summary>
    public const int ContractAddressFieldNumber = 1;
    private global::AElf.Types.Address contractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ContractAddress {
      get { return contractAddress_; }
      set {
        contractAddress_ = value;
      }
    }

    /// <summary>Field number for the "profit_receiver_address" field.</summary>
    public const int ProfitReceiverAddressFieldNumber = 2;
    private global::AElf.Types.Address profitReceiverAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ProfitReceiverAddress {
      get { return profitReceiverAddress_; }
      set {
        profitReceiverAddress_ = value;
      }
    }

    /// <summary>Field number for the "donation_parts_per_hundred" field.</summary>
    public const int DonationPartsPerHundredFieldNumber = 3;
    private int donationPartsPerHundred_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DonationPartsPerHundred {
      get { return donationPartsPerHundred_; }
      set {
        donationPartsPerHundred_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfitReceivingInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfitReceivingInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ContractAddress, other.ContractAddress)) return false;
      if (!object.Equals(ProfitReceiverAddress, other.ProfitReceiverAddress)) return false;
      if (DonationPartsPerHundred != other.DonationPartsPerHundred) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contractAddress_ != null) hash ^= ContractAddress.GetHashCode();
      if (profitReceiverAddress_ != null) hash ^= ProfitReceiverAddress.GetHashCode();
      if (DonationPartsPerHundred != 0) hash ^= DonationPartsPerHundred.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contractAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContractAddress);
      }
      if (profitReceiverAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ProfitReceiverAddress);
      }
      if (DonationPartsPerHundred != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(DonationPartsPerHundred);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractAddress);
      }
      if (profitReceiverAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfitReceiverAddress);
      }
      if (DonationPartsPerHundred != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(DonationPartsPerHundred);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfitReceivingInformation other) {
      if (other == null) {
        return;
      }
      if (other.contractAddress_ != null) {
        if (contractAddress_ == null) {
          ContractAddress = new global::AElf.Types.Address();
        }
        ContractAddress.MergeFrom(other.ContractAddress);
      }
      if (other.profitReceiverAddress_ != null) {
        if (profitReceiverAddress_ == null) {
          ProfitReceiverAddress = new global::AElf.Types.Address();
        }
        ProfitReceiverAddress.MergeFrom(other.ProfitReceiverAddress);
      }
      if (other.DonationPartsPerHundred != 0) {
        DonationPartsPerHundred = other.DonationPartsPerHundred;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (contractAddress_ == null) {
              ContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ContractAddress);
            break;
          }
          case 18: {
            if (profitReceiverAddress_ == null) {
              ProfitReceiverAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ProfitReceiverAddress);
            break;
          }
          case 24: {
            DonationPartsPerHundred = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ReceiveProfitsInput : pb::IMessage<ReceiveProfitsInput> {
    private static readonly pb::MessageParser<ReceiveProfitsInput> _parser = new pb::MessageParser<ReceiveProfitsInput>(() => new ReceiveProfitsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReceiveProfitsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveProfitsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveProfitsInput(ReceiveProfitsInput other) : this() {
      contractAddress_ = other.contractAddress_ != null ? other.contractAddress_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReceiveProfitsInput Clone() {
      return new ReceiveProfitsInput(this);
    }

    /// <summary>Field number for the "contract_address" field.</summary>
    public const int ContractAddressFieldNumber = 1;
    private global::AElf.Types.Address contractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ContractAddress {
      get { return contractAddress_; }
      set {
        contractAddress_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReceiveProfitsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReceiveProfitsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ContractAddress, other.ContractAddress)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contractAddress_ != null) hash ^= ContractAddress.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contractAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContractAddress);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractAddress);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReceiveProfitsInput other) {
      if (other == null) {
        return;
      }
      if (other.contractAddress_ != null) {
        if (contractAddress_ == null) {
          ContractAddress = new global::AElf.Types.Address();
        }
        ContractAddress.MergeFrom(other.ContractAddress);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (contractAddress_ == null) {
              ContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ContractAddress);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class TransferToContractInput : pb::IMessage<TransferToContractInput> {
    private static readonly pb::MessageParser<TransferToContractInput> _parser = new pb::MessageParser<TransferToContractInput>(() => new TransferToContractInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferToContractInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToContractInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToContractInput(TransferToContractInput other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToContractInput Clone() {
      return new TransferToContractInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 3;
    private string memo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferToContractInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferToContractInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Memo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferToContractInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
          case 26: {
            Memo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ReturnTaxInput : pb::IMessage<ReturnTaxInput> {
    private static readonly pb::MessageParser<ReturnTaxInput> _parser = new pb::MessageParser<ReturnTaxInput>(() => new ReturnTaxInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReturnTaxInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnTaxInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnTaxInput(ReturnTaxInput other) : this() {
      balanceBeforeSelling_ = other.balanceBeforeSelling_;
      returnTaxReceiverAddress_ = other.returnTaxReceiverAddress_ != null ? other.returnTaxReceiverAddress_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnTaxInput Clone() {
      return new ReturnTaxInput(this);
    }

    /// <summary>Field number for the "balance_before_selling" field.</summary>
    public const int BalanceBeforeSellingFieldNumber = 1;
    private long balanceBeforeSelling_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BalanceBeforeSelling {
      get { return balanceBeforeSelling_; }
      set {
        balanceBeforeSelling_ = value;
      }
    }

    /// <summary>Field number for the "return_tax_receiver_address" field.</summary>
    public const int ReturnTaxReceiverAddressFieldNumber = 2;
    private global::AElf.Types.Address returnTaxReceiverAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ReturnTaxReceiverAddress {
      get { return returnTaxReceiverAddress_; }
      set {
        returnTaxReceiverAddress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReturnTaxInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReturnTaxInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BalanceBeforeSelling != other.BalanceBeforeSelling) return false;
      if (!object.Equals(ReturnTaxReceiverAddress, other.ReturnTaxReceiverAddress)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BalanceBeforeSelling != 0L) hash ^= BalanceBeforeSelling.GetHashCode();
      if (returnTaxReceiverAddress_ != null) hash ^= ReturnTaxReceiverAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BalanceBeforeSelling != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(BalanceBeforeSelling);
      }
      if (returnTaxReceiverAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ReturnTaxReceiverAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BalanceBeforeSelling != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(BalanceBeforeSelling);
      }
      if (returnTaxReceiverAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReturnTaxReceiverAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReturnTaxInput other) {
      if (other == null) {
        return;
      }
      if (other.BalanceBeforeSelling != 0L) {
        BalanceBeforeSelling = other.BalanceBeforeSelling;
      }
      if (other.returnTaxReceiverAddress_ != null) {
        if (returnTaxReceiverAddress_ == null) {
          ReturnTaxReceiverAddress = new global::AElf.Types.Address();
        }
        ReturnTaxReceiverAddress.MergeFrom(other.ReturnTaxReceiverAddress);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BalanceBeforeSelling = input.ReadSInt64();
            break;
          }
          case 18: {
            if (returnTaxReceiverAddress_ == null) {
              ReturnTaxReceiverAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ReturnTaxReceiverAddress);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AdvanceResourceTokenInput : pb::IMessage<AdvanceResourceTokenInput> {
    private static readonly pb::MessageParser<AdvanceResourceTokenInput> _parser = new pb::MessageParser<AdvanceResourceTokenInput>(() => new AdvanceResourceTokenInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdvanceResourceTokenInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvanceResourceTokenInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvanceResourceTokenInput(AdvanceResourceTokenInput other) : this() {
      contractAddress_ = other.contractAddress_ != null ? other.contractAddress_.Clone() : null;
      resourceTokenSymbol_ = other.resourceTokenSymbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvanceResourceTokenInput Clone() {
      return new AdvanceResourceTokenInput(this);
    }

    /// <summary>Field number for the "contract_address" field.</summary>
    public const int ContractAddressFieldNumber = 1;
    private global::AElf.Types.Address contractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ContractAddress {
      get { return contractAddress_; }
      set {
        contractAddress_ = value;
      }
    }

    /// <summary>Field number for the "resource_token_symbol" field.</summary>
    public const int ResourceTokenSymbolFieldNumber = 2;
    private string resourceTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceTokenSymbol {
      get { return resourceTokenSymbol_; }
      set {
        resourceTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdvanceResourceTokenInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdvanceResourceTokenInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ContractAddress, other.ContractAddress)) return false;
      if (ResourceTokenSymbol != other.ResourceTokenSymbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contractAddress_ != null) hash ^= ContractAddress.GetHashCode();
      if (ResourceTokenSymbol.Length != 0) hash ^= ResourceTokenSymbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contractAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContractAddress);
      }
      if (ResourceTokenSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ResourceTokenSymbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractAddress);
      }
      if (ResourceTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceTokenSymbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdvanceResourceTokenInput other) {
      if (other == null) {
        return;
      }
      if (other.contractAddress_ != null) {
        if (contractAddress_ == null) {
          ContractAddress = new global::AElf.Types.Address();
        }
        ContractAddress.MergeFrom(other.ContractAddress);
      }
      if (other.ResourceTokenSymbol.Length != 0) {
        ResourceTokenSymbol = other.ResourceTokenSymbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (contractAddress_ == null) {
              ContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ContractAddress);
            break;
          }
          case 18: {
            ResourceTokenSymbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class TakeResourceTokenBackInput : pb::IMessage<TakeResourceTokenBackInput> {
    private static readonly pb::MessageParser<TakeResourceTokenBackInput> _parser = new pb::MessageParser<TakeResourceTokenBackInput>(() => new TakeResourceTokenBackInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakeResourceTokenBackInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeResourceTokenBackInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeResourceTokenBackInput(TakeResourceTokenBackInput other) : this() {
      contractAddress_ = other.contractAddress_ != null ? other.contractAddress_.Clone() : null;
      resourceTokenSymbol_ = other.resourceTokenSymbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeResourceTokenBackInput Clone() {
      return new TakeResourceTokenBackInput(this);
    }

    /// <summary>Field number for the "contract_address" field.</summary>
    public const int ContractAddressFieldNumber = 1;
    private global::AElf.Types.Address contractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ContractAddress {
      get { return contractAddress_; }
      set {
        contractAddress_ = value;
      }
    }

    /// <summary>Field number for the "resource_token_symbol" field.</summary>
    public const int ResourceTokenSymbolFieldNumber = 2;
    private string resourceTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceTokenSymbol {
      get { return resourceTokenSymbol_; }
      set {
        resourceTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakeResourceTokenBackInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakeResourceTokenBackInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ContractAddress, other.ContractAddress)) return false;
      if (ResourceTokenSymbol != other.ResourceTokenSymbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contractAddress_ != null) hash ^= ContractAddress.GetHashCode();
      if (ResourceTokenSymbol.Length != 0) hash ^= ResourceTokenSymbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contractAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContractAddress);
      }
      if (ResourceTokenSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ResourceTokenSymbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractAddress);
      }
      if (ResourceTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceTokenSymbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakeResourceTokenBackInput other) {
      if (other == null) {
        return;
      }
      if (other.contractAddress_ != null) {
        if (contractAddress_ == null) {
          ContractAddress = new global::AElf.Types.Address();
        }
        ContractAddress.MergeFrom(other.ContractAddress);
      }
      if (other.ResourceTokenSymbol.Length != 0) {
        ResourceTokenSymbol = other.ResourceTokenSymbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (contractAddress_ == null) {
              ContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ContractAddress);
            break;
          }
          case 18: {
            ResourceTokenSymbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetLockedAmountInput : pb::IMessage<GetLockedAmountInput> {
    private static readonly pb::MessageParser<GetLockedAmountInput> _parser = new pb::MessageParser<GetLockedAmountInput>(() => new GetLockedAmountInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLockedAmountInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLockedAmountInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLockedAmountInput(GetLockedAmountInput other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      symbol_ = other.symbol_;
      lockId_ = other.lockId_ != null ? other.lockId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLockedAmountInput Clone() {
      return new GetLockedAmountInput(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::AElf.Types.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lock_id" field.</summary>
    public const int LockIdFieldNumber = 3;
    private global::AElf.Types.Hash lockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash LockId {
      get { return lockId_; }
      set {
        lockId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLockedAmountInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLockedAmountInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(LockId, other.LockId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (lockId_ != null) hash ^= LockId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (lockId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LockId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (lockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LockId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLockedAmountInput other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.lockId_ != null) {
        if (lockId_ == null) {
          LockId = new global::AElf.Types.Hash();
        }
        LockId.MergeFrom(other.LockId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 26: {
            if (lockId_ == null) {
              LockId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(LockId);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetLockedAmountOutput : pb::IMessage<GetLockedAmountOutput> {
    private static readonly pb::MessageParser<GetLockedAmountOutput> _parser = new pb::MessageParser<GetLockedAmountOutput>(() => new GetLockedAmountOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLockedAmountOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLockedAmountOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLockedAmountOutput(GetLockedAmountOutput other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      symbol_ = other.symbol_;
      lockId_ = other.lockId_ != null ? other.lockId_.Clone() : null;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLockedAmountOutput Clone() {
      return new GetLockedAmountOutput(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::AElf.Types.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lock_id" field.</summary>
    public const int LockIdFieldNumber = 3;
    private global::AElf.Types.Hash lockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash LockId {
      get { return lockId_; }
      set {
        lockId_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLockedAmountOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLockedAmountOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(LockId, other.LockId)) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (lockId_ != null) hash ^= LockId.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (lockId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LockId);
      }
      if (Amount != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (lockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LockId);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLockedAmountOutput other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.lockId_ != null) {
        if (lockId_ == null) {
          LockId = new global::AElf.Types.Hash();
        }
        LockId.MergeFrom(other.LockId);
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 26: {
            if (lockId_ == null) {
              LockId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(LockId);
            break;
          }
          case 32: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetVirtualAddressForLockingInput : pb::IMessage<GetVirtualAddressForLockingInput> {
    private static readonly pb::MessageParser<GetVirtualAddressForLockingInput> _parser = new pb::MessageParser<GetVirtualAddressForLockingInput>(() => new GetVirtualAddressForLockingInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetVirtualAddressForLockingInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVirtualAddressForLockingInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVirtualAddressForLockingInput(GetVirtualAddressForLockingInput other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      lockId_ = other.lockId_ != null ? other.lockId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVirtualAddressForLockingInput Clone() {
      return new GetVirtualAddressForLockingInput(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::AElf.Types.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "lock_id" field.</summary>
    public const int LockIdFieldNumber = 2;
    private global::AElf.Types.Hash lockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash LockId {
      get { return lockId_; }
      set {
        lockId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetVirtualAddressForLockingInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetVirtualAddressForLockingInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if (!object.Equals(LockId, other.LockId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (lockId_ != null) hash ^= LockId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (lockId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LockId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (lockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LockId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetVirtualAddressForLockingInput other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.lockId_ != null) {
        if (lockId_ == null) {
          LockId = new global::AElf.Types.Hash();
        }
        LockId.MergeFrom(other.LockId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 18: {
            if (lockId_ == null) {
              LockId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(LockId);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class TokenInfoList : pb::IMessage<TokenInfoList> {
    private static readonly pb::MessageParser<TokenInfoList> _parser = new pb::MessageParser<TokenInfoList>(() => new TokenInfoList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenInfoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfoList(TokenInfoList other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfoList Clone() {
      return new TokenInfoList(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Contracts.MultiToken.TokenInfo> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Contracts.MultiToken.TokenInfo.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.MultiToken.TokenInfo> value_ = new pbc::RepeatedField<global::AElf.Contracts.MultiToken.TokenInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.MultiToken.TokenInfo> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenInfoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenInfoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenInfoList other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetCrossChainTransferTokenContractAddressInput : pb::IMessage<GetCrossChainTransferTokenContractAddressInput> {
    private static readonly pb::MessageParser<GetCrossChainTransferTokenContractAddressInput> _parser = new pb::MessageParser<GetCrossChainTransferTokenContractAddressInput>(() => new GetCrossChainTransferTokenContractAddressInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetCrossChainTransferTokenContractAddressInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCrossChainTransferTokenContractAddressInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCrossChainTransferTokenContractAddressInput(GetCrossChainTransferTokenContractAddressInput other) : this() {
      chainId_ = other.chainId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCrossChainTransferTokenContractAddressInput Clone() {
      return new GetCrossChainTransferTokenContractAddressInput(this);
    }

    /// <summary>Field number for the "chainId" field.</summary>
    public const int ChainIdFieldNumber = 1;
    private int chainId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChainId {
      get { return chainId_; }
      set {
        chainId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetCrossChainTransferTokenContractAddressInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetCrossChainTransferTokenContractAddressInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChainId != other.ChainId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChainId != 0) hash ^= ChainId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChainId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChainId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChainId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetCrossChainTransferTokenContractAddressInput other) {
      if (other == null) {
        return;
      }
      if (other.ChainId != 0) {
        ChainId = other.ChainId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChainId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CrossChainCreateTokenInput : pb::IMessage<CrossChainCreateTokenInput> {
    private static readonly pb::MessageParser<CrossChainCreateTokenInput> _parser = new pb::MessageParser<CrossChainCreateTokenInput>(() => new CrossChainCreateTokenInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrossChainCreateTokenInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainCreateTokenInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainCreateTokenInput(CrossChainCreateTokenInput other) : this() {
      fromChainId_ = other.fromChainId_;
      parentChainHeight_ = other.parentChainHeight_;
      transactionBytes_ = other.transactionBytes_;
      merklePath_ = other.merklePath_ != null ? other.merklePath_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainCreateTokenInput Clone() {
      return new CrossChainCreateTokenInput(this);
    }

    /// <summary>Field number for the "from_chain_id" field.</summary>
    public const int FromChainIdFieldNumber = 1;
    private int fromChainId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromChainId {
      get { return fromChainId_; }
      set {
        fromChainId_ = value;
      }
    }

    /// <summary>Field number for the "parent_chain_height" field.</summary>
    public const int ParentChainHeightFieldNumber = 2;
    private long parentChainHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParentChainHeight {
      get { return parentChainHeight_; }
      set {
        parentChainHeight_ = value;
      }
    }

    /// <summary>Field number for the "transaction_bytes" field.</summary>
    public const int TransactionBytesFieldNumber = 3;
    private pb::ByteString transactionBytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransactionBytes {
      get { return transactionBytes_; }
      set {
        transactionBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "merkle_path" field.</summary>
    public const int MerklePathFieldNumber = 4;
    private global::AElf.Types.MerklePath merklePath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.MerklePath MerklePath {
      get { return merklePath_; }
      set {
        merklePath_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrossChainCreateTokenInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrossChainCreateTokenInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromChainId != other.FromChainId) return false;
      if (ParentChainHeight != other.ParentChainHeight) return false;
      if (TransactionBytes != other.TransactionBytes) return false;
      if (!object.Equals(MerklePath, other.MerklePath)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromChainId != 0) hash ^= FromChainId.GetHashCode();
      if (ParentChainHeight != 0L) hash ^= ParentChainHeight.GetHashCode();
      if (TransactionBytes.Length != 0) hash ^= TransactionBytes.GetHashCode();
      if (merklePath_ != null) hash ^= MerklePath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromChainId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FromChainId);
      }
      if (ParentChainHeight != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ParentChainHeight);
      }
      if (TransactionBytes.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TransactionBytes);
      }
      if (merklePath_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MerklePath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromChainId);
      }
      if (ParentChainHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParentChainHeight);
      }
      if (TransactionBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransactionBytes);
      }
      if (merklePath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MerklePath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrossChainCreateTokenInput other) {
      if (other == null) {
        return;
      }
      if (other.FromChainId != 0) {
        FromChainId = other.FromChainId;
      }
      if (other.ParentChainHeight != 0L) {
        ParentChainHeight = other.ParentChainHeight;
      }
      if (other.TransactionBytes.Length != 0) {
        TransactionBytes = other.TransactionBytes;
      }
      if (other.merklePath_ != null) {
        if (merklePath_ == null) {
          MerklePath = new global::AElf.Types.MerklePath();
        }
        MerklePath.MergeFrom(other.MerklePath);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FromChainId = input.ReadInt32();
            break;
          }
          case 16: {
            ParentChainHeight = input.ReadInt64();
            break;
          }
          case 26: {
            TransactionBytes = input.ReadBytes();
            break;
          }
          case 34: {
            if (merklePath_ == null) {
              MerklePath = new global::AElf.Types.MerklePath();
            }
            input.ReadMessage(MerklePath);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RegisterCrossChainTokenContractAddressInput : pb::IMessage<RegisterCrossChainTokenContractAddressInput> {
    private static readonly pb::MessageParser<RegisterCrossChainTokenContractAddressInput> _parser = new pb::MessageParser<RegisterCrossChainTokenContractAddressInput>(() => new RegisterCrossChainTokenContractAddressInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterCrossChainTokenContractAddressInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterCrossChainTokenContractAddressInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterCrossChainTokenContractAddressInput(RegisterCrossChainTokenContractAddressInput other) : this() {
      fromChainId_ = other.fromChainId_;
      parentChainHeight_ = other.parentChainHeight_;
      transactionBytes_ = other.transactionBytes_;
      merklePath_ = other.merklePath_ != null ? other.merklePath_.Clone() : null;
      tokenContractAddress_ = other.tokenContractAddress_ != null ? other.tokenContractAddress_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterCrossChainTokenContractAddressInput Clone() {
      return new RegisterCrossChainTokenContractAddressInput(this);
    }

    /// <summary>Field number for the "from_chain_id" field.</summary>
    public const int FromChainIdFieldNumber = 1;
    private int fromChainId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromChainId {
      get { return fromChainId_; }
      set {
        fromChainId_ = value;
      }
    }

    /// <summary>Field number for the "parent_chain_height" field.</summary>
    public const int ParentChainHeightFieldNumber = 2;
    private long parentChainHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParentChainHeight {
      get { return parentChainHeight_; }
      set {
        parentChainHeight_ = value;
      }
    }

    /// <summary>Field number for the "transaction_bytes" field.</summary>
    public const int TransactionBytesFieldNumber = 3;
    private pb::ByteString transactionBytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransactionBytes {
      get { return transactionBytes_; }
      set {
        transactionBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "merkle_path" field.</summary>
    public const int MerklePathFieldNumber = 4;
    private global::AElf.Types.MerklePath merklePath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.MerklePath MerklePath {
      get { return merklePath_; }
      set {
        merklePath_ = value;
      }
    }

    /// <summary>Field number for the "token_contract_address" field.</summary>
    public const int TokenContractAddressFieldNumber = 5;
    private global::AElf.Types.Address tokenContractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address TokenContractAddress {
      get { return tokenContractAddress_; }
      set {
        tokenContractAddress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterCrossChainTokenContractAddressInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterCrossChainTokenContractAddressInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromChainId != other.FromChainId) return false;
      if (ParentChainHeight != other.ParentChainHeight) return false;
      if (TransactionBytes != other.TransactionBytes) return false;
      if (!object.Equals(MerklePath, other.MerklePath)) return false;
      if (!object.Equals(TokenContractAddress, other.TokenContractAddress)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromChainId != 0) hash ^= FromChainId.GetHashCode();
      if (ParentChainHeight != 0L) hash ^= ParentChainHeight.GetHashCode();
      if (TransactionBytes.Length != 0) hash ^= TransactionBytes.GetHashCode();
      if (merklePath_ != null) hash ^= MerklePath.GetHashCode();
      if (tokenContractAddress_ != null) hash ^= TokenContractAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromChainId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FromChainId);
      }
      if (ParentChainHeight != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ParentChainHeight);
      }
      if (TransactionBytes.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TransactionBytes);
      }
      if (merklePath_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MerklePath);
      }
      if (tokenContractAddress_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TokenContractAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromChainId);
      }
      if (ParentChainHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParentChainHeight);
      }
      if (TransactionBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransactionBytes);
      }
      if (merklePath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MerklePath);
      }
      if (tokenContractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenContractAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterCrossChainTokenContractAddressInput other) {
      if (other == null) {
        return;
      }
      if (other.FromChainId != 0) {
        FromChainId = other.FromChainId;
      }
      if (other.ParentChainHeight != 0L) {
        ParentChainHeight = other.ParentChainHeight;
      }
      if (other.TransactionBytes.Length != 0) {
        TransactionBytes = other.TransactionBytes;
      }
      if (other.merklePath_ != null) {
        if (merklePath_ == null) {
          MerklePath = new global::AElf.Types.MerklePath();
        }
        MerklePath.MergeFrom(other.MerklePath);
      }
      if (other.tokenContractAddress_ != null) {
        if (tokenContractAddress_ == null) {
          TokenContractAddress = new global::AElf.Types.Address();
        }
        TokenContractAddress.MergeFrom(other.TokenContractAddress);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FromChainId = input.ReadInt32();
            break;
          }
          case 16: {
            ParentChainHeight = input.ReadInt64();
            break;
          }
          case 26: {
            TransactionBytes = input.ReadBytes();
            break;
          }
          case 34: {
            if (merklePath_ == null) {
              MerklePath = new global::AElf.Types.MerklePath();
            }
            input.ReadMessage(MerklePath);
            break;
          }
          case 42: {
            if (tokenContractAddress_ == null) {
              TokenContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(TokenContractAddress);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ValidateTokenInfoExistsInput : pb::IMessage<ValidateTokenInfoExistsInput> {
    private static readonly pb::MessageParser<ValidateTokenInfoExistsInput> _parser = new pb::MessageParser<ValidateTokenInfoExistsInput>(() => new ValidateTokenInfoExistsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValidateTokenInfoExistsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateTokenInfoExistsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateTokenInfoExistsInput(ValidateTokenInfoExistsInput other) : this() {
      symbol_ = other.symbol_;
      tokenName_ = other.tokenName_;
      totalSupply_ = other.totalSupply_;
      decimals_ = other.decimals_;
      issuer_ = other.issuer_ != null ? other.issuer_.Clone() : null;
      isBurnable_ = other.isBurnable_;
      issueChainId_ = other.issueChainId_;
      isProfitable_ = other.isProfitable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateTokenInfoExistsInput Clone() {
      return new ValidateTokenInfoExistsInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token_name" field.</summary>
    public const int TokenNameFieldNumber = 2;
    private string tokenName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenName {
      get { return tokenName_; }
      set {
        tokenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_supply" field.</summary>
    public const int TotalSupplyFieldNumber = 3;
    private long totalSupply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSupply {
      get { return totalSupply_; }
      set {
        totalSupply_ = value;
      }
    }

    /// <summary>Field number for the "decimals" field.</summary>
    public const int DecimalsFieldNumber = 4;
    private int decimals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Decimals {
      get { return decimals_; }
      set {
        decimals_ = value;
      }
    }

    /// <summary>Field number for the "issuer" field.</summary>
    public const int IssuerFieldNumber = 5;
    private global::AElf.Types.Address issuer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Issuer {
      get { return issuer_; }
      set {
        issuer_ = value;
      }
    }

    /// <summary>Field number for the "is_burnable" field.</summary>
    public const int IsBurnableFieldNumber = 6;
    private bool isBurnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBurnable {
      get { return isBurnable_; }
      set {
        isBurnable_ = value;
      }
    }

    /// <summary>Field number for the "issue_chain_id" field.</summary>
    public const int IssueChainIdFieldNumber = 7;
    private int issueChainId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IssueChainId {
      get { return issueChainId_; }
      set {
        issueChainId_ = value;
      }
    }

    /// <summary>Field number for the "is_profitable" field.</summary>
    public const int IsProfitableFieldNumber = 8;
    private bool isProfitable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsProfitable {
      get { return isProfitable_; }
      set {
        isProfitable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValidateTokenInfoExistsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValidateTokenInfoExistsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (TokenName != other.TokenName) return false;
      if (TotalSupply != other.TotalSupply) return false;
      if (Decimals != other.Decimals) return false;
      if (!object.Equals(Issuer, other.Issuer)) return false;
      if (IsBurnable != other.IsBurnable) return false;
      if (IssueChainId != other.IssueChainId) return false;
      if (IsProfitable != other.IsProfitable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (TokenName.Length != 0) hash ^= TokenName.GetHashCode();
      if (TotalSupply != 0L) hash ^= TotalSupply.GetHashCode();
      if (Decimals != 0) hash ^= Decimals.GetHashCode();
      if (issuer_ != null) hash ^= Issuer.GetHashCode();
      if (IsBurnable != false) hash ^= IsBurnable.GetHashCode();
      if (IssueChainId != 0) hash ^= IssueChainId.GetHashCode();
      if (IsProfitable != false) hash ^= IsProfitable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (TokenName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenName);
      }
      if (TotalSupply != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(TotalSupply);
      }
      if (Decimals != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Decimals);
      }
      if (issuer_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Issuer);
      }
      if (IsBurnable != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsBurnable);
      }
      if (IssueChainId != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(IssueChainId);
      }
      if (IsProfitable != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsProfitable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (TokenName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenName);
      }
      if (TotalSupply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TotalSupply);
      }
      if (Decimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Decimals);
      }
      if (issuer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Issuer);
      }
      if (IsBurnable != false) {
        size += 1 + 1;
      }
      if (IssueChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(IssueChainId);
      }
      if (IsProfitable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValidateTokenInfoExistsInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.TokenName.Length != 0) {
        TokenName = other.TokenName;
      }
      if (other.TotalSupply != 0L) {
        TotalSupply = other.TotalSupply;
      }
      if (other.Decimals != 0) {
        Decimals = other.Decimals;
      }
      if (other.issuer_ != null) {
        if (issuer_ == null) {
          Issuer = new global::AElf.Types.Address();
        }
        Issuer.MergeFrom(other.Issuer);
      }
      if (other.IsBurnable != false) {
        IsBurnable = other.IsBurnable;
      }
      if (other.IssueChainId != 0) {
        IssueChainId = other.IssueChainId;
      }
      if (other.IsProfitable != false) {
        IsProfitable = other.IsProfitable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            TokenName = input.ReadString();
            break;
          }
          case 24: {
            TotalSupply = input.ReadSInt64();
            break;
          }
          case 32: {
            Decimals = input.ReadSInt32();
            break;
          }
          case 42: {
            if (issuer_ == null) {
              Issuer = new global::AElf.Types.Address();
            }
            input.ReadMessage(Issuer);
            break;
          }
          case 48: {
            IsBurnable = input.ReadBool();
            break;
          }
          case 56: {
            IssueChainId = input.ReadSInt32();
            break;
          }
          case 64: {
            IsProfitable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class InitializeInput : pb::IMessage<InitializeInput> {
    private static readonly pb::MessageParser<InitializeInput> _parser = new pb::MessageParser<InitializeInput>(() => new InitializeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput(InitializeInput other) : this() {
      resourceAmount_ = other.resourceAmount_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput Clone() {
      return new InitializeInput(this);
    }

    /// <summary>Field number for the "resource_amount" field.</summary>
    public const int ResourceAmountFieldNumber = 1;
    private static readonly pbc::MapField<string, int>.Codec _map_resourceAmount_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForSInt32(16), 10);
    private readonly pbc::MapField<string, int> resourceAmount_ = new pbc::MapField<string, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> ResourceAmount {
      get { return resourceAmount_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ResourceAmount.Equals(other.ResourceAmount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ResourceAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      resourceAmount_.WriteTo(output, _map_resourceAmount_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += resourceAmount_.CalculateSize(_map_resourceAmount_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeInput other) {
      if (other == null) {
        return;
      }
      resourceAmount_.Add(other.resourceAmount_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            resourceAmount_.AddEntriesFrom(input, _map_resourceAmount_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateRentalInput : pb::IMessage<UpdateRentalInput> {
    private static readonly pb::MessageParser<UpdateRentalInput> _parser = new pb::MessageParser<UpdateRentalInput>(() => new UpdateRentalInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateRentalInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRentalInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRentalInput(UpdateRentalInput other) : this() {
      rental_ = other.rental_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRentalInput Clone() {
      return new UpdateRentalInput(this);
    }

    /// <summary>Field number for the "rental" field.</summary>
    public const int RentalFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_rental_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForSInt64(16), 10);
    private readonly pbc::MapField<string, long> rental_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> Rental {
      get { return rental_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateRentalInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateRentalInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Rental.Equals(other.Rental)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Rental.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rental_.WriteTo(output, _map_rental_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rental_.CalculateSize(_map_rental_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateRentalInput other) {
      if (other == null) {
        return;
      }
      rental_.Add(other.rental_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rental_.AddEntriesFrom(input, _map_rental_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateRentedResourcesInput : pb::IMessage<UpdateRentedResourcesInput> {
    private static readonly pb::MessageParser<UpdateRentedResourcesInput> _parser = new pb::MessageParser<UpdateRentedResourcesInput>(() => new UpdateRentedResourcesInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateRentedResourcesInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRentedResourcesInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRentedResourcesInput(UpdateRentedResourcesInput other) : this() {
      resourceAmount_ = other.resourceAmount_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRentedResourcesInput Clone() {
      return new UpdateRentedResourcesInput(this);
    }

    /// <summary>Field number for the "resource_amount" field.</summary>
    public const int ResourceAmountFieldNumber = 1;
    private static readonly pbc::MapField<string, int>.Codec _map_resourceAmount_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForSInt32(16), 10);
    private readonly pbc::MapField<string, int> resourceAmount_ = new pbc::MapField<string, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> ResourceAmount {
      get { return resourceAmount_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateRentedResourcesInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateRentedResourcesInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ResourceAmount.Equals(other.ResourceAmount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ResourceAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      resourceAmount_.WriteTo(output, _map_resourceAmount_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += resourceAmount_.CalculateSize(_map_resourceAmount_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateRentedResourcesInput other) {
      if (other == null) {
        return;
      }
      resourceAmount_.Add(other.resourceAmount_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            resourceAmount_.AddEntriesFrom(input, _map_resourceAmount_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class OwningRental : pb::IMessage<OwningRental> {
    private static readonly pb::MessageParser<OwningRental> _parser = new pb::MessageParser<OwningRental>(() => new OwningRental());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OwningRental> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwningRental() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwningRental(OwningRental other) : this() {
      resourceAmount_ = other.resourceAmount_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwningRental Clone() {
      return new OwningRental(this);
    }

    /// <summary>Field number for the "resource_amount" field.</summary>
    public const int ResourceAmountFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_resourceAmount_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForSInt64(16), 10);
    private readonly pbc::MapField<string, long> resourceAmount_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> ResourceAmount {
      get { return resourceAmount_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OwningRental);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OwningRental other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ResourceAmount.Equals(other.ResourceAmount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ResourceAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      resourceAmount_.WriteTo(output, _map_resourceAmount_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += resourceAmount_.CalculateSize(_map_resourceAmount_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OwningRental other) {
      if (other == null) {
        return;
      }
      resourceAmount_.Add(other.resourceAmount_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            resourceAmount_.AddEntriesFrom(input, _map_resourceAmount_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CoefficientFromSender : pb::IMessage<CoefficientFromSender> {
    private static readonly pb::MessageParser<CoefficientFromSender> _parser = new pb::MessageParser<CoefficientFromSender>(() => new CoefficientFromSender());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoefficientFromSender> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoefficientFromSender() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoefficientFromSender(CoefficientFromSender other) : this() {
      pieceKey_ = other.pieceKey_;
      isChangePieceKey_ = other.isChangePieceKey_;
      isLiner_ = other.isLiner_;
      linerCoefficient_ = other.linerCoefficient_ != null ? other.linerCoefficient_.Clone() : null;
      powerCoefficient_ = other.powerCoefficient_ != null ? other.powerCoefficient_.Clone() : null;
      newPieceKeyCoefficient_ = other.newPieceKeyCoefficient_ != null ? other.newPieceKeyCoefficient_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoefficientFromSender Clone() {
      return new CoefficientFromSender(this);
    }

    /// <summary>Field number for the "piece_key" field.</summary>
    public const int PieceKeyFieldNumber = 1;
    private int pieceKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PieceKey {
      get { return pieceKey_; }
      set {
        pieceKey_ = value;
      }
    }

    /// <summary>Field number for the "is_change_piece_key" field.</summary>
    public const int IsChangePieceKeyFieldNumber = 2;
    private bool isChangePieceKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsChangePieceKey {
      get { return isChangePieceKey_; }
      set {
        isChangePieceKey_ = value;
      }
    }

    /// <summary>Field number for the "is_liner" field.</summary>
    public const int IsLinerFieldNumber = 3;
    private bool isLiner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLiner {
      get { return isLiner_; }
      set {
        isLiner_ = value;
      }
    }

    /// <summary>Field number for the "liner_coefficient" field.</summary>
    public const int LinerCoefficientFieldNumber = 4;
    private global::AElf.Contracts.MultiToken.LinerCoefficient linerCoefficient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.LinerCoefficient LinerCoefficient {
      get { return linerCoefficient_; }
      set {
        linerCoefficient_ = value;
      }
    }

    /// <summary>Field number for the "power_coefficient" field.</summary>
    public const int PowerCoefficientFieldNumber = 5;
    private global::AElf.Contracts.MultiToken.PowerCoefficient powerCoefficient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.PowerCoefficient PowerCoefficient {
      get { return powerCoefficient_; }
      set {
        powerCoefficient_ = value;
      }
    }

    /// <summary>Field number for the "new_piece_key_coefficient" field.</summary>
    public const int NewPieceKeyCoefficientFieldNumber = 6;
    private global::AElf.Contracts.MultiToken.NewPieceKeyCoefficient newPieceKeyCoefficient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.NewPieceKeyCoefficient NewPieceKeyCoefficient {
      get { return newPieceKeyCoefficient_; }
      set {
        newPieceKeyCoefficient_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoefficientFromSender);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoefficientFromSender other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PieceKey != other.PieceKey) return false;
      if (IsChangePieceKey != other.IsChangePieceKey) return false;
      if (IsLiner != other.IsLiner) return false;
      if (!object.Equals(LinerCoefficient, other.LinerCoefficient)) return false;
      if (!object.Equals(PowerCoefficient, other.PowerCoefficient)) return false;
      if (!object.Equals(NewPieceKeyCoefficient, other.NewPieceKeyCoefficient)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PieceKey != 0) hash ^= PieceKey.GetHashCode();
      if (IsChangePieceKey != false) hash ^= IsChangePieceKey.GetHashCode();
      if (IsLiner != false) hash ^= IsLiner.GetHashCode();
      if (linerCoefficient_ != null) hash ^= LinerCoefficient.GetHashCode();
      if (powerCoefficient_ != null) hash ^= PowerCoefficient.GetHashCode();
      if (newPieceKeyCoefficient_ != null) hash ^= NewPieceKeyCoefficient.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PieceKey != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(PieceKey);
      }
      if (IsChangePieceKey != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsChangePieceKey);
      }
      if (IsLiner != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsLiner);
      }
      if (linerCoefficient_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LinerCoefficient);
      }
      if (powerCoefficient_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PowerCoefficient);
      }
      if (newPieceKeyCoefficient_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(NewPieceKeyCoefficient);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PieceKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(PieceKey);
      }
      if (IsChangePieceKey != false) {
        size += 1 + 1;
      }
      if (IsLiner != false) {
        size += 1 + 1;
      }
      if (linerCoefficient_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinerCoefficient);
      }
      if (powerCoefficient_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PowerCoefficient);
      }
      if (newPieceKeyCoefficient_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewPieceKeyCoefficient);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoefficientFromSender other) {
      if (other == null) {
        return;
      }
      if (other.PieceKey != 0) {
        PieceKey = other.PieceKey;
      }
      if (other.IsChangePieceKey != false) {
        IsChangePieceKey = other.IsChangePieceKey;
      }
      if (other.IsLiner != false) {
        IsLiner = other.IsLiner;
      }
      if (other.linerCoefficient_ != null) {
        if (linerCoefficient_ == null) {
          LinerCoefficient = new global::AElf.Contracts.MultiToken.LinerCoefficient();
        }
        LinerCoefficient.MergeFrom(other.LinerCoefficient);
      }
      if (other.powerCoefficient_ != null) {
        if (powerCoefficient_ == null) {
          PowerCoefficient = new global::AElf.Contracts.MultiToken.PowerCoefficient();
        }
        PowerCoefficient.MergeFrom(other.PowerCoefficient);
      }
      if (other.newPieceKeyCoefficient_ != null) {
        if (newPieceKeyCoefficient_ == null) {
          NewPieceKeyCoefficient = new global::AElf.Contracts.MultiToken.NewPieceKeyCoefficient();
        }
        NewPieceKeyCoefficient.MergeFrom(other.NewPieceKeyCoefficient);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PieceKey = input.ReadSInt32();
            break;
          }
          case 16: {
            IsChangePieceKey = input.ReadBool();
            break;
          }
          case 24: {
            IsLiner = input.ReadBool();
            break;
          }
          case 34: {
            if (linerCoefficient_ == null) {
              LinerCoefficient = new global::AElf.Contracts.MultiToken.LinerCoefficient();
            }
            input.ReadMessage(LinerCoefficient);
            break;
          }
          case 42: {
            if (powerCoefficient_ == null) {
              PowerCoefficient = new global::AElf.Contracts.MultiToken.PowerCoefficient();
            }
            input.ReadMessage(PowerCoefficient);
            break;
          }
          case 50: {
            if (newPieceKeyCoefficient_ == null) {
              NewPieceKeyCoefficient = new global::AElf.Contracts.MultiToken.NewPieceKeyCoefficient();
            }
            input.ReadMessage(NewPieceKeyCoefficient);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class LinerCoefficient : pb::IMessage<LinerCoefficient> {
    private static readonly pb::MessageParser<LinerCoefficient> _parser = new pb::MessageParser<LinerCoefficient>(() => new LinerCoefficient());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LinerCoefficient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinerCoefficient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinerCoefficient(LinerCoefficient other) : this() {
      numerator_ = other.numerator_;
      denominator_ = other.denominator_;
      constantValue_ = other.constantValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinerCoefficient Clone() {
      return new LinerCoefficient(this);
    }

    /// <summary>Field number for the "numerator" field.</summary>
    public const int NumeratorFieldNumber = 1;
    private int numerator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Numerator {
      get { return numerator_; }
      set {
        numerator_ = value;
      }
    }

    /// <summary>Field number for the "denominator" field.</summary>
    public const int DenominatorFieldNumber = 2;
    private int denominator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Denominator {
      get { return denominator_; }
      set {
        denominator_ = value;
      }
    }

    /// <summary>Field number for the "constant_value" field.</summary>
    public const int ConstantValueFieldNumber = 3;
    private int constantValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConstantValue {
      get { return constantValue_; }
      set {
        constantValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LinerCoefficient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LinerCoefficient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Numerator != other.Numerator) return false;
      if (Denominator != other.Denominator) return false;
      if (ConstantValue != other.ConstantValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Numerator != 0) hash ^= Numerator.GetHashCode();
      if (Denominator != 0) hash ^= Denominator.GetHashCode();
      if (ConstantValue != 0) hash ^= ConstantValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Numerator != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Numerator);
      }
      if (Denominator != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Denominator);
      }
      if (ConstantValue != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(ConstantValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Numerator != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Numerator);
      }
      if (Denominator != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Denominator);
      }
      if (ConstantValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ConstantValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LinerCoefficient other) {
      if (other == null) {
        return;
      }
      if (other.Numerator != 0) {
        Numerator = other.Numerator;
      }
      if (other.Denominator != 0) {
        Denominator = other.Denominator;
      }
      if (other.ConstantValue != 0) {
        ConstantValue = other.ConstantValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Numerator = input.ReadSInt32();
            break;
          }
          case 16: {
            Denominator = input.ReadSInt32();
            break;
          }
          case 24: {
            ConstantValue = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class PowerCoefficient : pb::IMessage<PowerCoefficient> {
    private static readonly pb::MessageParser<PowerCoefficient> _parser = new pb::MessageParser<PowerCoefficient>(() => new PowerCoefficient());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PowerCoefficient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerCoefficient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerCoefficient(PowerCoefficient other) : this() {
      numerator_ = other.numerator_;
      denominator_ = other.denominator_;
      constantValue_ = other.constantValue_;
      changeSpanBase_ = other.changeSpanBase_;
      weight_ = other.weight_;
      weightBase_ = other.weightBase_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerCoefficient Clone() {
      return new PowerCoefficient(this);
    }

    /// <summary>Field number for the "numerator" field.</summary>
    public const int NumeratorFieldNumber = 1;
    private int numerator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Numerator {
      get { return numerator_; }
      set {
        numerator_ = value;
      }
    }

    /// <summary>Field number for the "denominator" field.</summary>
    public const int DenominatorFieldNumber = 2;
    private int denominator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Denominator {
      get { return denominator_; }
      set {
        denominator_ = value;
      }
    }

    /// <summary>Field number for the "constant_value" field.</summary>
    public const int ConstantValueFieldNumber = 3;
    private int constantValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConstantValue {
      get { return constantValue_; }
      set {
        constantValue_ = value;
      }
    }

    /// <summary>Field number for the "change_span_base" field.</summary>
    public const int ChangeSpanBaseFieldNumber = 4;
    private int changeSpanBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeSpanBase {
      get { return changeSpanBase_; }
      set {
        changeSpanBase_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 5;
    private int weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "weight_base" field.</summary>
    public const int WeightBaseFieldNumber = 6;
    private int weightBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeightBase {
      get { return weightBase_; }
      set {
        weightBase_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PowerCoefficient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PowerCoefficient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Numerator != other.Numerator) return false;
      if (Denominator != other.Denominator) return false;
      if (ConstantValue != other.ConstantValue) return false;
      if (ChangeSpanBase != other.ChangeSpanBase) return false;
      if (Weight != other.Weight) return false;
      if (WeightBase != other.WeightBase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Numerator != 0) hash ^= Numerator.GetHashCode();
      if (Denominator != 0) hash ^= Denominator.GetHashCode();
      if (ConstantValue != 0) hash ^= ConstantValue.GetHashCode();
      if (ChangeSpanBase != 0) hash ^= ChangeSpanBase.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (WeightBase != 0) hash ^= WeightBase.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Numerator != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Numerator);
      }
      if (Denominator != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Denominator);
      }
      if (ConstantValue != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(ConstantValue);
      }
      if (ChangeSpanBase != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(ChangeSpanBase);
      }
      if (Weight != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Weight);
      }
      if (WeightBase != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(WeightBase);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Numerator != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Numerator);
      }
      if (Denominator != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Denominator);
      }
      if (ConstantValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ConstantValue);
      }
      if (ChangeSpanBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ChangeSpanBase);
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Weight);
      }
      if (WeightBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(WeightBase);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PowerCoefficient other) {
      if (other == null) {
        return;
      }
      if (other.Numerator != 0) {
        Numerator = other.Numerator;
      }
      if (other.Denominator != 0) {
        Denominator = other.Denominator;
      }
      if (other.ConstantValue != 0) {
        ConstantValue = other.ConstantValue;
      }
      if (other.ChangeSpanBase != 0) {
        ChangeSpanBase = other.ChangeSpanBase;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      if (other.WeightBase != 0) {
        WeightBase = other.WeightBase;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Numerator = input.ReadSInt32();
            break;
          }
          case 16: {
            Denominator = input.ReadSInt32();
            break;
          }
          case 24: {
            ConstantValue = input.ReadSInt32();
            break;
          }
          case 32: {
            ChangeSpanBase = input.ReadSInt32();
            break;
          }
          case 40: {
            Weight = input.ReadSInt32();
            break;
          }
          case 48: {
            WeightBase = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class NewPieceKeyCoefficient : pb::IMessage<NewPieceKeyCoefficient> {
    private static readonly pb::MessageParser<NewPieceKeyCoefficient> _parser = new pb::MessageParser<NewPieceKeyCoefficient>(() => new NewPieceKeyCoefficient());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewPieceKeyCoefficient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewPieceKeyCoefficient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewPieceKeyCoefficient(NewPieceKeyCoefficient other) : this() {
      newPieceKey_ = other.newPieceKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewPieceKeyCoefficient Clone() {
      return new NewPieceKeyCoefficient(this);
    }

    /// <summary>Field number for the "new_piece_key" field.</summary>
    public const int NewPieceKeyFieldNumber = 1;
    private int newPieceKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewPieceKey {
      get { return newPieceKey_; }
      set {
        newPieceKey_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewPieceKeyCoefficient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewPieceKeyCoefficient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NewPieceKey != other.NewPieceKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NewPieceKey != 0) hash ^= NewPieceKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewPieceKey != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(NewPieceKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewPieceKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(NewPieceKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewPieceKeyCoefficient other) {
      if (other == null) {
        return;
      }
      if (other.NewPieceKey != 0) {
        NewPieceKey = other.NewPieceKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NewPieceKey = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CoefficientFromContract : pb::IMessage<CoefficientFromContract> {
    private static readonly pb::MessageParser<CoefficientFromContract> _parser = new pb::MessageParser<CoefficientFromContract>(() => new CoefficientFromContract());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoefficientFromContract> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoefficientFromContract() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoefficientFromContract(CoefficientFromContract other) : this() {
      feeType_ = other.feeType_;
      coefficient_ = other.coefficient_ != null ? other.coefficient_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoefficientFromContract Clone() {
      return new CoefficientFromContract(this);
    }

    /// <summary>Field number for the "fee_type" field.</summary>
    public const int FeeTypeFieldNumber = 1;
    private global::AElf.Contracts.MultiToken.FeeTypeEnum feeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.FeeTypeEnum FeeType {
      get { return feeType_; }
      set {
        feeType_ = value;
      }
    }

    /// <summary>Field number for the "coefficient" field.</summary>
    public const int CoefficientFieldNumber = 2;
    private global::AElf.Contracts.MultiToken.CoefficientFromSender coefficient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.CoefficientFromSender Coefficient {
      get { return coefficient_; }
      set {
        coefficient_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoefficientFromContract);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoefficientFromContract other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FeeType != other.FeeType) return false;
      if (!object.Equals(Coefficient, other.Coefficient)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FeeType != 0) hash ^= FeeType.GetHashCode();
      if (coefficient_ != null) hash ^= Coefficient.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FeeType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) FeeType);
      }
      if (coefficient_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Coefficient);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FeeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FeeType);
      }
      if (coefficient_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Coefficient);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoefficientFromContract other) {
      if (other == null) {
        return;
      }
      if (other.FeeType != 0) {
        FeeType = other.FeeType;
      }
      if (other.coefficient_ != null) {
        if (coefficient_ == null) {
          Coefficient = new global::AElf.Contracts.MultiToken.CoefficientFromSender();
        }
        Coefficient.MergeFrom(other.Coefficient);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FeeType = (global::AElf.Contracts.MultiToken.FeeTypeEnum) input.ReadEnum();
            break;
          }
          case 18: {
            if (coefficient_ == null) {
              Coefficient = new global::AElf.Contracts.MultiToken.CoefficientFromSender();
            }
            input.ReadMessage(Coefficient);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class TokenSymbolWithAddress : pb::IMessage<TokenSymbolWithAddress> {
    private static readonly pb::MessageParser<TokenSymbolWithAddress> _parser = new pb::MessageParser<TokenSymbolWithAddress>(() => new TokenSymbolWithAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenSymbolWithAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenSymbolWithAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenSymbolWithAddress(TokenSymbolWithAddress other) : this() {
      tokenSymbol_ = other.tokenSymbol_;
      fromAddress_ = other.fromAddress_ != null ? other.fromAddress_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenSymbolWithAddress Clone() {
      return new TokenSymbolWithAddress(this);
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 1;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from_address" field.</summary>
    public const int FromAddressFieldNumber = 2;
    private global::AElf.Types.Address fromAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address FromAddress {
      get { return fromAddress_; }
      set {
        fromAddress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenSymbolWithAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenSymbolWithAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenSymbol != other.TokenSymbol) return false;
      if (!object.Equals(FromAddress, other.FromAddress)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (fromAddress_ != null) hash ^= FromAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TokenSymbol);
      }
      if (fromAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FromAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (fromAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenSymbolWithAddress other) {
      if (other == null) {
        return;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.fromAddress_ != null) {
        if (fromAddress_ == null) {
          FromAddress = new global::AElf.Types.Address();
        }
        FromAddress.MergeFrom(other.FromAddress);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 18: {
            if (fromAddress_ == null) {
              FromAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(FromAddress);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class TokenStateInAddress : pb::IMessage<TokenStateInAddress> {
    private static readonly pb::MessageParser<TokenStateInAddress> _parser = new pb::MessageParser<TokenStateInAddress>(() => new TokenStateInAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenStateInAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenStateInAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenStateInAddress(TokenStateInAddress other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenStateInAddress Clone() {
      return new TokenStateInAddress(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private bool value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenStateInAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenStateInAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != false) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != false) {
        output.WriteRawTag(8);
        output.WriteBool(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenStateInAddress other) {
      if (other == null) {
        return;
      }
      if (other.Value != false) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AddTokeWhiteListInput : pb::IMessage<AddTokeWhiteListInput> {
    private static readonly pb::MessageParser<AddTokeWhiteListInput> _parser = new pb::MessageParser<AddTokeWhiteListInput>(() => new AddTokeWhiteListInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddTokeWhiteListInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTokeWhiteListInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTokeWhiteListInput(AddTokeWhiteListInput other) : this() {
      tokenSymbol_ = other.tokenSymbol_;
      address_ = other.address_ != null ? other.address_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTokeWhiteListInput Clone() {
      return new AddTokeWhiteListInput(this);
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 1;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private global::AElf.Types.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddTokeWhiteListInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddTokeWhiteListInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenSymbol != other.TokenSymbol) return false;
      if (!object.Equals(Address, other.Address)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (address_ != null) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TokenSymbol);
      }
      if (address_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddTokeWhiteListInput other) {
      if (other == null) {
        return;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 18: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ResourceUsage : pb::IMessage<ResourceUsage> {
    private static readonly pb::MessageParser<ResourceUsage> _parser = new pb::MessageParser<ResourceUsage>(() => new ResourceUsage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourceUsage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceUsage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceUsage(ResourceUsage other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceUsage Clone() {
      return new ResourceUsage(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pbc::MapField<string, int>.Codec _map_value_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForSInt32(16), 10);
    private readonly pbc::MapField<string, int> value_ = new pbc::MapField<string, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourceUsage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourceUsage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Value.Equals(other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _map_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_map_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourceUsage other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _map_value_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CalculateFeeCoefficientsOfType : pb::IMessage<CalculateFeeCoefficientsOfType> {
    private static readonly pb::MessageParser<CalculateFeeCoefficientsOfType> _parser = new pb::MessageParser<CalculateFeeCoefficientsOfType>(() => new CalculateFeeCoefficientsOfType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CalculateFeeCoefficientsOfType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateFeeCoefficientsOfType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateFeeCoefficientsOfType(CalculateFeeCoefficientsOfType other) : this() {
      coefficients_ = other.coefficients_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateFeeCoefficientsOfType Clone() {
      return new CalculateFeeCoefficientsOfType(this);
    }

    /// <summary>Field number for the "coefficients" field.</summary>
    public const int CoefficientsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Contracts.MultiToken.CalculateFeeCoefficient> _repeated_coefficients_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Contracts.MultiToken.CalculateFeeCoefficient.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.MultiToken.CalculateFeeCoefficient> coefficients_ = new pbc::RepeatedField<global::AElf.Contracts.MultiToken.CalculateFeeCoefficient>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.MultiToken.CalculateFeeCoefficient> Coefficients {
      get { return coefficients_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CalculateFeeCoefficientsOfType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CalculateFeeCoefficientsOfType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!coefficients_.Equals(other.coefficients_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= coefficients_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      coefficients_.WriteTo(output, _repeated_coefficients_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += coefficients_.CalculateSize(_repeated_coefficients_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CalculateFeeCoefficientsOfType other) {
      if (other == null) {
        return;
      }
      coefficients_.Add(other.coefficients_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            coefficients_.AddEntriesFrom(input, _repeated_coefficients_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CalculateFeeCoefficient : pb::IMessage<CalculateFeeCoefficient> {
    private static readonly pb::MessageParser<CalculateFeeCoefficient> _parser = new pb::MessageParser<CalculateFeeCoefficient>(() => new CalculateFeeCoefficient());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CalculateFeeCoefficient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateFeeCoefficient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateFeeCoefficient(CalculateFeeCoefficient other) : this() {
      pieceKey_ = other.pieceKey_;
      feeType_ = other.feeType_;
      functionType_ = other.functionType_;
      coefficientDic_ = other.coefficientDic_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateFeeCoefficient Clone() {
      return new CalculateFeeCoefficient(this);
    }

    /// <summary>Field number for the "piece_key" field.</summary>
    public const int PieceKeyFieldNumber = 1;
    private int pieceKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PieceKey {
      get { return pieceKey_; }
      set {
        pieceKey_ = value;
      }
    }

    /// <summary>Field number for the "fee_type" field.</summary>
    public const int FeeTypeFieldNumber = 2;
    private global::AElf.Contracts.MultiToken.FeeTypeEnum feeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.FeeTypeEnum FeeType {
      get { return feeType_; }
      set {
        feeType_ = value;
      }
    }

    /// <summary>Field number for the "function_type" field.</summary>
    public const int FunctionTypeFieldNumber = 3;
    private global::AElf.Contracts.MultiToken.CalculateFunctionTypeEnum functionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.CalculateFunctionTypeEnum FunctionType {
      get { return functionType_; }
      set {
        functionType_ = value;
      }
    }

    /// <summary>Field number for the "coefficient_dic" field.</summary>
    public const int CoefficientDicFieldNumber = 4;
    private static readonly pbc::MapField<string, int>.Codec _map_coefficientDic_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForSInt32(16), 34);
    private readonly pbc::MapField<string, int> coefficientDic_ = new pbc::MapField<string, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> CoefficientDic {
      get { return coefficientDic_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CalculateFeeCoefficient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CalculateFeeCoefficient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PieceKey != other.PieceKey) return false;
      if (FeeType != other.FeeType) return false;
      if (FunctionType != other.FunctionType) return false;
      if (!CoefficientDic.Equals(other.CoefficientDic)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PieceKey != 0) hash ^= PieceKey.GetHashCode();
      if (FeeType != 0) hash ^= FeeType.GetHashCode();
      if (FunctionType != 0) hash ^= FunctionType.GetHashCode();
      hash ^= CoefficientDic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PieceKey != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(PieceKey);
      }
      if (FeeType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) FeeType);
      }
      if (FunctionType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) FunctionType);
      }
      coefficientDic_.WriteTo(output, _map_coefficientDic_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PieceKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(PieceKey);
      }
      if (FeeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FeeType);
      }
      if (FunctionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FunctionType);
      }
      size += coefficientDic_.CalculateSize(_map_coefficientDic_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CalculateFeeCoefficient other) {
      if (other == null) {
        return;
      }
      if (other.PieceKey != 0) {
        PieceKey = other.PieceKey;
      }
      if (other.FeeType != 0) {
        FeeType = other.FeeType;
      }
      if (other.FunctionType != 0) {
        FunctionType = other.FunctionType;
      }
      coefficientDic_.Add(other.coefficientDic_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PieceKey = input.ReadSInt32();
            break;
          }
          case 16: {
            FeeType = (global::AElf.Contracts.MultiToken.FeeTypeEnum) input.ReadEnum();
            break;
          }
          case 24: {
            FunctionType = (global::AElf.Contracts.MultiToken.CalculateFunctionTypeEnum) input.ReadEnum();
            break;
          }
          case 34: {
            coefficientDic_.AddEntriesFrom(input, _map_coefficientDic_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SymbolToPayTXSizeFee : pb::IMessage<SymbolToPayTXSizeFee> {
    private static readonly pb::MessageParser<SymbolToPayTXSizeFee> _parser = new pb::MessageParser<SymbolToPayTXSizeFee>(() => new SymbolToPayTXSizeFee());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolToPayTXSizeFee> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolToPayTXSizeFee() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolToPayTXSizeFee(SymbolToPayTXSizeFee other) : this() {
      tokenSymbol_ = other.tokenSymbol_;
      baseTokenWeight_ = other.baseTokenWeight_;
      addedTokenWeight_ = other.addedTokenWeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolToPayTXSizeFee Clone() {
      return new SymbolToPayTXSizeFee(this);
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 1;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "base_token_weight" field.</summary>
    public const int BaseTokenWeightFieldNumber = 2;
    private int baseTokenWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseTokenWeight {
      get { return baseTokenWeight_; }
      set {
        baseTokenWeight_ = value;
      }
    }

    /// <summary>Field number for the "added_token_weight" field.</summary>
    public const int AddedTokenWeightFieldNumber = 3;
    private int addedTokenWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddedTokenWeight {
      get { return addedTokenWeight_; }
      set {
        addedTokenWeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolToPayTXSizeFee);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolToPayTXSizeFee other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenSymbol != other.TokenSymbol) return false;
      if (BaseTokenWeight != other.BaseTokenWeight) return false;
      if (AddedTokenWeight != other.AddedTokenWeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (BaseTokenWeight != 0) hash ^= BaseTokenWeight.GetHashCode();
      if (AddedTokenWeight != 0) hash ^= AddedTokenWeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TokenSymbol);
      }
      if (BaseTokenWeight != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(BaseTokenWeight);
      }
      if (AddedTokenWeight != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(AddedTokenWeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (BaseTokenWeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(BaseTokenWeight);
      }
      if (AddedTokenWeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(AddedTokenWeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolToPayTXSizeFee other) {
      if (other == null) {
        return;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.BaseTokenWeight != 0) {
        BaseTokenWeight = other.BaseTokenWeight;
      }
      if (other.AddedTokenWeight != 0) {
        AddedTokenWeight = other.AddedTokenWeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 16: {
            BaseTokenWeight = input.ReadSInt32();
            break;
          }
          case 24: {
            AddedTokenWeight = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SymbolListToPayTXSizeFee : pb::IMessage<SymbolListToPayTXSizeFee> {
    private static readonly pb::MessageParser<SymbolListToPayTXSizeFee> _parser = new pb::MessageParser<SymbolListToPayTXSizeFee>(() => new SymbolListToPayTXSizeFee());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymbolListToPayTXSizeFee> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolListToPayTXSizeFee() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolListToPayTXSizeFee(SymbolListToPayTXSizeFee other) : this() {
      symbolsToPayTxSizeFee_ = other.symbolsToPayTxSizeFee_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymbolListToPayTXSizeFee Clone() {
      return new SymbolListToPayTXSizeFee(this);
    }

    /// <summary>Field number for the "symbols_to_pay_tx_size_fee" field.</summary>
    public const int SymbolsToPayTxSizeFeeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Contracts.MultiToken.SymbolToPayTXSizeFee> _repeated_symbolsToPayTxSizeFee_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Contracts.MultiToken.SymbolToPayTXSizeFee.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.MultiToken.SymbolToPayTXSizeFee> symbolsToPayTxSizeFee_ = new pbc::RepeatedField<global::AElf.Contracts.MultiToken.SymbolToPayTXSizeFee>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.MultiToken.SymbolToPayTXSizeFee> SymbolsToPayTxSizeFee {
      get { return symbolsToPayTxSizeFee_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymbolListToPayTXSizeFee);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymbolListToPayTXSizeFee other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!symbolsToPayTxSizeFee_.Equals(other.symbolsToPayTxSizeFee_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= symbolsToPayTxSizeFee_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      symbolsToPayTxSizeFee_.WriteTo(output, _repeated_symbolsToPayTxSizeFee_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += symbolsToPayTxSizeFee_.CalculateSize(_repeated_symbolsToPayTxSizeFee_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymbolListToPayTXSizeFee other) {
      if (other == null) {
        return;
      }
      symbolsToPayTxSizeFee_.Add(other.symbolsToPayTxSizeFee_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            symbolsToPayTxSizeFee_.AddEntriesFrom(input, _repeated_symbolsToPayTxSizeFee_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Transferred : pb::IMessage<Transferred> {
    private static readonly pb::MessageParser<Transferred> _parser = new pb::MessageParser<Transferred>(() => new Transferred());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transferred> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transferred() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transferred(Transferred other) : this() {
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transferred Clone() {
      return new Transferred(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::AElf.Types.Address from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::AElf.Types.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 5;
    private string memo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transferred);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transferred other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Memo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transferred other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::AElf.Types.Address();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Types.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (from_ == null) {
              From = new global::AElf.Types.Address();
            }
            input.ReadMessage(From);
            break;
          }
          case 18: {
            if (to_ == null) {
              To = new global::AElf.Types.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 32: {
            Amount = input.ReadSInt64();
            break;
          }
          case 42: {
            Memo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Approved : pb::IMessage<Approved> {
    private static readonly pb::MessageParser<Approved> _parser = new pb::MessageParser<Approved>(() => new Approved());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Approved> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Approved() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Approved(Approved other) : this() {
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Approved Clone() {
      return new Approved(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::AElf.Types.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 2;
    private global::AElf.Types.Address spender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Approved);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Approved other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Owner, other.Owner)) return false;
      if (!object.Equals(Spender, other.Spender)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (owner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Owner);
      }
      if (spender_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spender);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Approved other) {
      if (other == null) {
        return;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Types.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Types.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (owner_ == null) {
              Owner = new global::AElf.Types.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 18: {
            if (spender_ == null) {
              Spender = new global::AElf.Types.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 32: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UnApproved : pb::IMessage<UnApproved> {
    private static readonly pb::MessageParser<UnApproved> _parser = new pb::MessageParser<UnApproved>(() => new UnApproved());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnApproved> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproved() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproved(UnApproved other) : this() {
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproved Clone() {
      return new UnApproved(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::AElf.Types.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 2;
    private global::AElf.Types.Address spender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnApproved);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnApproved other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Owner, other.Owner)) return false;
      if (!object.Equals(Spender, other.Spender)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (owner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Owner);
      }
      if (spender_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spender);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnApproved other) {
      if (other == null) {
        return;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Types.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Types.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (owner_ == null) {
              Owner = new global::AElf.Types.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 18: {
            if (spender_ == null) {
              Spender = new global::AElf.Types.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 32: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Burned : pb::IMessage<Burned> {
    private static readonly pb::MessageParser<Burned> _parser = new pb::MessageParser<Burned>(() => new Burned());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Burned> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Burned() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Burned(Burned other) : this() {
      burner_ = other.burner_ != null ? other.burner_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Burned Clone() {
      return new Burned(this);
    }

    /// <summary>Field number for the "burner" field.</summary>
    public const int BurnerFieldNumber = 1;
    private global::AElf.Types.Address burner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Burner {
      get { return burner_; }
      set {
        burner_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Burned);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Burned other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Burner, other.Burner)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (burner_ != null) hash ^= Burner.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (burner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Burner);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (burner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Burner);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Burned other) {
      if (other == null) {
        return;
      }
      if (other.burner_ != null) {
        if (burner_ == null) {
          Burner = new global::AElf.Types.Address();
        }
        Burner.MergeFrom(other.Burner);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (burner_ == null) {
              Burner = new global::AElf.Types.Address();
            }
            input.ReadMessage(Burner);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ChainPrimaryTokenSymbolSet : pb::IMessage<ChainPrimaryTokenSymbolSet> {
    private static readonly pb::MessageParser<ChainPrimaryTokenSymbolSet> _parser = new pb::MessageParser<ChainPrimaryTokenSymbolSet>(() => new ChainPrimaryTokenSymbolSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChainPrimaryTokenSymbolSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainPrimaryTokenSymbolSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainPrimaryTokenSymbolSet(ChainPrimaryTokenSymbolSet other) : this() {
      tokenSymbol_ = other.tokenSymbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChainPrimaryTokenSymbolSet Clone() {
      return new ChainPrimaryTokenSymbolSet(this);
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 1;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChainPrimaryTokenSymbolSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChainPrimaryTokenSymbolSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenSymbol != other.TokenSymbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TokenSymbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChainPrimaryTokenSymbolSet other) {
      if (other == null) {
        return;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TokenSymbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class TransactionSizeFeeUnitPriceUpdated : pb::IMessage<TransactionSizeFeeUnitPriceUpdated> {
    private static readonly pb::MessageParser<TransactionSizeFeeUnitPriceUpdated> _parser = new pb::MessageParser<TransactionSizeFeeUnitPriceUpdated>(() => new TransactionSizeFeeUnitPriceUpdated());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionSizeFeeUnitPriceUpdated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionSizeFeeUnitPriceUpdated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionSizeFeeUnitPriceUpdated(TransactionSizeFeeUnitPriceUpdated other) : this() {
      unitPrice_ = other.unitPrice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionSizeFeeUnitPriceUpdated Clone() {
      return new TransactionSizeFeeUnitPriceUpdated(this);
    }

    /// <summary>Field number for the "unit_price" field.</summary>
    public const int UnitPriceFieldNumber = 1;
    private long unitPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnitPrice {
      get { return unitPrice_; }
      set {
        unitPrice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionSizeFeeUnitPriceUpdated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionSizeFeeUnitPriceUpdated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitPrice != other.UnitPrice) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnitPrice != 0L) hash ^= UnitPrice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitPrice != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(UnitPrice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitPrice != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(UnitPrice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionSizeFeeUnitPriceUpdated other) {
      if (other == null) {
        return;
      }
      if (other.UnitPrice != 0L) {
        UnitPrice = other.UnitPrice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnitPrice = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class NoticeUpdateCalculateFeeAlgorithm : pb::IMessage<NoticeUpdateCalculateFeeAlgorithm> {
    private static readonly pb::MessageParser<NoticeUpdateCalculateFeeAlgorithm> _parser = new pb::MessageParser<NoticeUpdateCalculateFeeAlgorithm>(() => new NoticeUpdateCalculateFeeAlgorithm());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoticeUpdateCalculateFeeAlgorithm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeUpdateCalculateFeeAlgorithm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeUpdateCalculateFeeAlgorithm(NoticeUpdateCalculateFeeAlgorithm other) : this() {
      allCoefficient_ = other.allCoefficient_ != null ? other.allCoefficient_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoticeUpdateCalculateFeeAlgorithm Clone() {
      return new NoticeUpdateCalculateFeeAlgorithm(this);
    }

    /// <summary>Field number for the "all_coefficient" field.</summary>
    public const int AllCoefficientFieldNumber = 1;
    private global::AElf.Contracts.MultiToken.CalculateFeeCoefficientsOfType allCoefficient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.CalculateFeeCoefficientsOfType AllCoefficient {
      get { return allCoefficient_; }
      set {
        allCoefficient_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoticeUpdateCalculateFeeAlgorithm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoticeUpdateCalculateFeeAlgorithm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AllCoefficient, other.AllCoefficient)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (allCoefficient_ != null) hash ^= AllCoefficient.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (allCoefficient_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AllCoefficient);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (allCoefficient_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AllCoefficient);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoticeUpdateCalculateFeeAlgorithm other) {
      if (other == null) {
        return;
      }
      if (other.allCoefficient_ != null) {
        if (allCoefficient_ == null) {
          AllCoefficient = new global::AElf.Contracts.MultiToken.CalculateFeeCoefficientsOfType();
        }
        AllCoefficient.MergeFrom(other.AllCoefficient);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (allCoefficient_ == null) {
              AllCoefficient = new global::AElf.Contracts.MultiToken.CalculateFeeCoefficientsOfType();
            }
            input.ReadMessage(AllCoefficient);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RentalCharged : pb::IMessage<RentalCharged> {
    private static readonly pb::MessageParser<RentalCharged> _parser = new pb::MessageParser<RentalCharged>(() => new RentalCharged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RentalCharged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RentalCharged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RentalCharged(RentalCharged other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RentalCharged Clone() {
      return new RentalCharged(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RentalCharged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RentalCharged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RentalCharged other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RentalAccountBalanceInsufficient : pb::IMessage<RentalAccountBalanceInsufficient> {
    private static readonly pb::MessageParser<RentalAccountBalanceInsufficient> _parser = new pb::MessageParser<RentalAccountBalanceInsufficient>(() => new RentalAccountBalanceInsufficient());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RentalAccountBalanceInsufficient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RentalAccountBalanceInsufficient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RentalAccountBalanceInsufficient(RentalAccountBalanceInsufficient other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RentalAccountBalanceInsufficient Clone() {
      return new RentalAccountBalanceInsufficient(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RentalAccountBalanceInsufficient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RentalAccountBalanceInsufficient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RentalAccountBalanceInsufficient other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ExtraTokenListModified : pb::IMessage<ExtraTokenListModified> {
    private static readonly pb::MessageParser<ExtraTokenListModified> _parser = new pb::MessageParser<ExtraTokenListModified>(() => new ExtraTokenListModified());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExtraTokenListModified> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtraTokenListModified() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtraTokenListModified(ExtraTokenListModified other) : this() {
      symbolListToPayTxSizeFee_ = other.symbolListToPayTxSizeFee_ != null ? other.symbolListToPayTxSizeFee_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtraTokenListModified Clone() {
      return new ExtraTokenListModified(this);
    }

    /// <summary>Field number for the "symbol_list_to_pay_tx_size_fee" field.</summary>
    public const int SymbolListToPayTxSizeFeeFieldNumber = 1;
    private global::AElf.Contracts.MultiToken.SymbolListToPayTXSizeFee symbolListToPayTxSizeFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.SymbolListToPayTXSizeFee SymbolListToPayTxSizeFee {
      get { return symbolListToPayTxSizeFee_; }
      set {
        symbolListToPayTxSizeFee_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExtraTokenListModified);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExtraTokenListModified other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SymbolListToPayTxSizeFee, other.SymbolListToPayTxSizeFee)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (symbolListToPayTxSizeFee_ != null) hash ^= SymbolListToPayTxSizeFee.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (symbolListToPayTxSizeFee_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SymbolListToPayTxSizeFee);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (symbolListToPayTxSizeFee_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SymbolListToPayTxSizeFee);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExtraTokenListModified other) {
      if (other == null) {
        return;
      }
      if (other.symbolListToPayTxSizeFee_ != null) {
        if (symbolListToPayTxSizeFee_ == null) {
          SymbolListToPayTxSizeFee = new global::AElf.Contracts.MultiToken.SymbolListToPayTXSizeFee();
        }
        SymbolListToPayTxSizeFee.MergeFrom(other.SymbolListToPayTxSizeFee);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (symbolListToPayTxSizeFee_ == null) {
              SymbolListToPayTxSizeFee = new global::AElf.Contracts.MultiToken.SymbolListToPayTXSizeFee();
            }
            input.ReadMessage(SymbolListToPayTxSizeFee);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ControllerForUserFee : pb::IMessage<ControllerForUserFee> {
    private static readonly pb::MessageParser<ControllerForUserFee> _parser = new pb::MessageParser<ControllerForUserFee>(() => new ControllerForUserFee());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ControllerForUserFee> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControllerForUserFee() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControllerForUserFee(ControllerForUserFee other) : this() {
      rootController_ = other.rootController_ != null ? other.rootController_.Clone() : null;
      parliamentController_ = other.parliamentController_ != null ? other.parliamentController_.Clone() : null;
      referendumController_ = other.referendumController_ != null ? other.referendumController_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControllerForUserFee Clone() {
      return new ControllerForUserFee(this);
    }

    /// <summary>Field number for the "root_controller" field.</summary>
    public const int RootControllerFieldNumber = 1;
    private global::AElf.Types.Address rootController_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address RootController {
      get { return rootController_; }
      set {
        rootController_ = value;
      }
    }

    /// <summary>Field number for the "parliament_controller" field.</summary>
    public const int ParliamentControllerFieldNumber = 2;
    private global::AElf.Types.Address parliamentController_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ParliamentController {
      get { return parliamentController_; }
      set {
        parliamentController_ = value;
      }
    }

    /// <summary>Field number for the "referendum_controller" field.</summary>
    public const int ReferendumControllerFieldNumber = 3;
    private global::AElf.Types.Address referendumController_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ReferendumController {
      get { return referendumController_; }
      set {
        referendumController_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ControllerForUserFee);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ControllerForUserFee other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RootController, other.RootController)) return false;
      if (!object.Equals(ParliamentController, other.ParliamentController)) return false;
      if (!object.Equals(ReferendumController, other.ReferendumController)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rootController_ != null) hash ^= RootController.GetHashCode();
      if (parliamentController_ != null) hash ^= ParliamentController.GetHashCode();
      if (referendumController_ != null) hash ^= ReferendumController.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rootController_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RootController);
      }
      if (parliamentController_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ParliamentController);
      }
      if (referendumController_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ReferendumController);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rootController_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RootController);
      }
      if (parliamentController_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParliamentController);
      }
      if (referendumController_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReferendumController);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ControllerForUserFee other) {
      if (other == null) {
        return;
      }
      if (other.rootController_ != null) {
        if (rootController_ == null) {
          RootController = new global::AElf.Types.Address();
        }
        RootController.MergeFrom(other.RootController);
      }
      if (other.parliamentController_ != null) {
        if (parliamentController_ == null) {
          ParliamentController = new global::AElf.Types.Address();
        }
        ParliamentController.MergeFrom(other.ParliamentController);
      }
      if (other.referendumController_ != null) {
        if (referendumController_ == null) {
          ReferendumController = new global::AElf.Types.Address();
        }
        ReferendumController.MergeFrom(other.ReferendumController);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rootController_ == null) {
              RootController = new global::AElf.Types.Address();
            }
            input.ReadMessage(RootController);
            break;
          }
          case 18: {
            if (parliamentController_ == null) {
              ParliamentController = new global::AElf.Types.Address();
            }
            input.ReadMessage(ParliamentController);
            break;
          }
          case 26: {
            if (referendumController_ == null) {
              ReferendumController = new global::AElf.Types.Address();
            }
            input.ReadMessage(ReferendumController);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ControllerForDeveloperFee : pb::IMessage<ControllerForDeveloperFee> {
    private static readonly pb::MessageParser<ControllerForDeveloperFee> _parser = new pb::MessageParser<ControllerForDeveloperFee>(() => new ControllerForDeveloperFee());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ControllerForDeveloperFee> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControllerForDeveloperFee() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControllerForDeveloperFee(ControllerForDeveloperFee other) : this() {
      rootController_ = other.rootController_ != null ? other.rootController_.Clone() : null;
      parliamentController_ = other.parliamentController_ != null ? other.parliamentController_.Clone() : null;
      developerController_ = other.developerController_ != null ? other.developerController_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControllerForDeveloperFee Clone() {
      return new ControllerForDeveloperFee(this);
    }

    /// <summary>Field number for the "root_controller" field.</summary>
    public const int RootControllerFieldNumber = 1;
    private global::AElf.Types.Address rootController_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address RootController {
      get { return rootController_; }
      set {
        rootController_ = value;
      }
    }

    /// <summary>Field number for the "parliament_controller" field.</summary>
    public const int ParliamentControllerFieldNumber = 2;
    private global::AElf.Types.Address parliamentController_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ParliamentController {
      get { return parliamentController_; }
      set {
        parliamentController_ = value;
      }
    }

    /// <summary>Field number for the "developer_controller" field.</summary>
    public const int DeveloperControllerFieldNumber = 3;
    private global::AElf.Types.Address developerController_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address DeveloperController {
      get { return developerController_; }
      set {
        developerController_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ControllerForDeveloperFee);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ControllerForDeveloperFee other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RootController, other.RootController)) return false;
      if (!object.Equals(ParliamentController, other.ParliamentController)) return false;
      if (!object.Equals(DeveloperController, other.DeveloperController)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rootController_ != null) hash ^= RootController.GetHashCode();
      if (parliamentController_ != null) hash ^= ParliamentController.GetHashCode();
      if (developerController_ != null) hash ^= DeveloperController.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rootController_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RootController);
      }
      if (parliamentController_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ParliamentController);
      }
      if (developerController_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DeveloperController);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rootController_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RootController);
      }
      if (parliamentController_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParliamentController);
      }
      if (developerController_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeveloperController);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ControllerForDeveloperFee other) {
      if (other == null) {
        return;
      }
      if (other.rootController_ != null) {
        if (rootController_ == null) {
          RootController = new global::AElf.Types.Address();
        }
        RootController.MergeFrom(other.RootController);
      }
      if (other.parliamentController_ != null) {
        if (parliamentController_ == null) {
          ParliamentController = new global::AElf.Types.Address();
        }
        ParliamentController.MergeFrom(other.ParliamentController);
      }
      if (other.developerController_ != null) {
        if (developerController_ == null) {
          DeveloperController = new global::AElf.Types.Address();
        }
        DeveloperController.MergeFrom(other.DeveloperController);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rootController_ == null) {
              RootController = new global::AElf.Types.Address();
            }
            input.ReadMessage(RootController);
            break;
          }
          case 18: {
            if (parliamentController_ == null) {
              ParliamentController = new global::AElf.Types.Address();
            }
            input.ReadMessage(ParliamentController);
            break;
          }
          case 26: {
            if (developerController_ == null) {
              DeveloperController = new global::AElf.Types.Address();
            }
            input.ReadMessage(DeveloperController);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ControllerInfoForUpdateSideChainRental : pb::IMessage<ControllerInfoForUpdateSideChainRental> {
    private static readonly pb::MessageParser<ControllerInfoForUpdateSideChainRental> _parser = new pb::MessageParser<ControllerInfoForUpdateSideChainRental>(() => new ControllerInfoForUpdateSideChainRental());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ControllerInfoForUpdateSideChainRental> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControllerInfoForUpdateSideChainRental() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControllerInfoForUpdateSideChainRental(ControllerInfoForUpdateSideChainRental other) : this() {
      controller_ = other.controller_ != null ? other.controller_.Clone() : null;
      organizationCreationInputBytes_ = other.organizationCreationInputBytes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControllerInfoForUpdateSideChainRental Clone() {
      return new ControllerInfoForUpdateSideChainRental(this);
    }

    /// <summary>Field number for the "controller" field.</summary>
    public const int ControllerFieldNumber = 1;
    private global::AElf.Types.Address controller_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Controller {
      get { return controller_; }
      set {
        controller_ = value;
      }
    }

    /// <summary>Field number for the "organization_creation_input_bytes" field.</summary>
    public const int OrganizationCreationInputBytesFieldNumber = 2;
    private pb::ByteString organizationCreationInputBytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OrganizationCreationInputBytes {
      get { return organizationCreationInputBytes_; }
      set {
        organizationCreationInputBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ControllerInfoForUpdateSideChainRental);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ControllerInfoForUpdateSideChainRental other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Controller, other.Controller)) return false;
      if (OrganizationCreationInputBytes != other.OrganizationCreationInputBytes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (controller_ != null) hash ^= Controller.GetHashCode();
      if (OrganizationCreationInputBytes.Length != 0) hash ^= OrganizationCreationInputBytes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (controller_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Controller);
      }
      if (OrganizationCreationInputBytes.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(OrganizationCreationInputBytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (controller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Controller);
      }
      if (OrganizationCreationInputBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OrganizationCreationInputBytes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ControllerInfoForUpdateSideChainRental other) {
      if (other == null) {
        return;
      }
      if (other.controller_ != null) {
        if (controller_ == null) {
          Controller = new global::AElf.Types.Address();
        }
        Controller.MergeFrom(other.Controller);
      }
      if (other.OrganizationCreationInputBytes.Length != 0) {
        OrganizationCreationInputBytes = other.OrganizationCreationInputBytes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (controller_ == null) {
              Controller = new global::AElf.Types.Address();
            }
            input.ReadMessage(Controller);
            break;
          }
          case 18: {
            OrganizationCreationInputBytes = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
