// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: profit_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Contracts.Profit {

  /// <summary>Holder for reflection information generated from profit_contract.proto</summary>
  internal static partial class ProfitContractReflection {

    #region Descriptor
    /// <summary>File descriptor for profit_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProfitContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVwcm9maXRfY29udHJhY3QucHJvdG8SBnByb2ZpdBoKYWNzMS5wcm90bxoP",
            "YWVsZi9jb3JlLnByb3RvIuQBChFDcmVhdGVTY2hlbWVJbnB1dBIpCiFwcm9m",
            "aXRfcmVjZWl2aW5nX2R1ZV9wZXJpb2RfY291bnQYASABKBISNAosaXNfcmVs",
            "ZWFzZV9hbGxfYmFsYW5jZV9ldmVyeV90aW1lX2J5X2RlZmF1bHQYAiABKAgS",
            "JQodZGVsYXlfZGlzdHJpYnV0ZV9wZXJpb2RfY291bnQYAyABKBESHgoHbWFu",
            "YWdlchgEIAEoCzINLmFlbGYuQWRkcmVzcxInCh9jYW5fcmVtb3ZlX2JlbmVm",
            "aWNpYXJ5X2RpcmVjdGx5GAUgASgIIpcFCgZTY2hlbWUSJgoPdmlydHVhbF9h",
            "ZGRyZXNzGAEgASgLMg0uYWVsZi5BZGRyZXNzEhQKDHRvdGFsX3NoYXJlcxgC",
            "IAEoEhJHChV1bmRpc3RyaWJ1dGVkX3Byb2ZpdHMYAyADKAsyKC5wcm9maXQu",
            "U2NoZW1lLlVuZGlzdHJpYnV0ZWRQcm9maXRzRW50cnkSFgoOY3VycmVudF9w",
            "ZXJpb2QYBCABKBISMwoLc3ViX3NjaGVtZXMYBSADKAsyHi5wcm9maXQuU2No",
            "ZW1lQmVuZWZpY2lhcnlTaGFyZRInCh9jYW5fcmVtb3ZlX2JlbmVmaWNpYXJ5",
            "X2RpcmVjdGx5GAYgASgIEikKIXByb2ZpdF9yZWNlaXZpbmdfZHVlX3Blcmlv",
            "ZF9jb3VudBgHIAEoEhI0Cixpc19yZWxlYXNlX2FsbF9iYWxhbmNlX2V2ZXJ5",
            "X3RpbWVfYnlfZGVmYXVsdBgIIAEoCBIdCglzY2hlbWVfaWQYCSABKAsyCi5h",
            "ZWxmLkhhc2gSJQodZGVsYXlfZGlzdHJpYnV0ZV9wZXJpb2RfY291bnQYCiAB",
            "KBESTQoZY2FjaGVkX2RlbGF5X3RvdGFsX3NoYXJlcxgLIAMoCzIqLnByb2Zp",
            "dC5TY2hlbWUuQ2FjaGVkRGVsYXlUb3RhbFNoYXJlc0VudHJ5Eh4KB21hbmFn",
            "ZXIYDCABKAsyDS5hZWxmLkFkZHJlc3MaOwoZVW5kaXN0cmlidXRlZFByb2Zp",
            "dHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKBI6AjgBGj0KG0Nh",
            "Y2hlZERlbGF5VG90YWxTaGFyZXNFbnRyeRILCgNrZXkYASABKBISDQoFdmFs",
            "dWUYAiABKBI6AjgBIkcKFlNjaGVtZUJlbmVmaWNpYXJ5U2hhcmUSHQoJc2No",
            "ZW1lX2lkGAEgASgLMgouYWVsZi5IYXNoEg4KBnNoYXJlcxgCIAEoEiJ9ChNB",
            "ZGRCZW5lZmljaWFyeUlucHV0Eh0KCXNjaGVtZV9pZBgBIAEoCzIKLmFlbGYu",
            "SGFzaBIzChFiZW5lZmljaWFyeV9zaGFyZRgCIAEoCzIYLnByb2ZpdC5CZW5l",
            "ZmljaWFyeVNoYXJlEhIKCmVuZF9wZXJpb2QYAyABKBIiWwoWUmVtb3ZlQmVu",
            "ZWZpY2lhcnlJbnB1dBIiCgtiZW5lZmljaWFyeRgBIAEoCzINLmFlbGYuQWRk",
            "cmVzcxIdCglzY2hlbWVfaWQYAiABKAsyCi5hZWxmLkhhc2gigAEKFUFkZEJl",
            "bmVmaWNpYXJpZXNJbnB1dBIdCglzY2hlbWVfaWQYASABKAsyCi5hZWxmLkhh",
            "c2gSNAoSYmVuZWZpY2lhcnlfc2hhcmVzGAIgAygLMhgucHJvZml0LkJlbmVm",
            "aWNpYXJ5U2hhcmUSEgoKZW5kX3BlcmlvZBgDIAEoEiJfChhSZW1vdmVCZW5l",
            "ZmljaWFyaWVzSW5wdXQSJAoNYmVuZWZpY2lhcmllcxgBIAMoCzINLmFlbGYu",
            "QWRkcmVzcxIdCglzY2hlbWVfaWQYAiABKAsyCi5hZWxmLkhhc2giRgoQQmVu",
            "ZWZpY2lhcnlTaGFyZRIiCgtiZW5lZmljaWFyeRgBIAEoCzINLmFlbGYuQWRk",
            "cmVzcxIOCgZzaGFyZXMYAiABKBIiZgoRQ2xhaW1Qcm9maXRzSW5wdXQSHQoJ",
            "c2NoZW1lX2lkGAEgASgLMgouYWVsZi5IYXNoEg4KBnN5bWJvbBgCIAEoCRIi",
            "CgtiZW5lZmljaWFyeRgDIAEoCzINLmFlbGYuQWRkcmVzcyJnChZEaXN0cmli",
            "dXRlUHJvZml0c0lucHV0Eh0KCXNjaGVtZV9pZBgBIAEoCzIKLmFlbGYuSGFz",
            "aBIOCgZwZXJpb2QYAiABKBISDgoGYW1vdW50GAMgASgSEg4KBnN5bWJvbBgE",
            "IAEoCSI2Cg1Qcm9maXREZXRhaWxzEiUKB2RldGFpbHMYASADKAsyFC5wcm9m",
            "aXQuUHJvZml0RGV0YWlsIn8KDFByb2ZpdERldGFpbBIUCgxzdGFydF9wZXJp",
            "b2QYASABKBISEgoKZW5kX3BlcmlvZBgCIAEoEhIOCgZzaGFyZXMYAyABKBIS",
            "GgoSbGFzdF9wcm9maXRfcGVyaW9kGAQgASgSEhkKEWlzX3dlaWdodF9yZW1v",
            "dmVkGAUgASgIImcKFkNvbnRyaWJ1dGVQcm9maXRzSW5wdXQSHQoJc2NoZW1l",
            "X2lkGAEgASgLMgouYWVsZi5IYXNoEg4KBmFtb3VudBgCIAEoEhIOCgZwZXJp",
            "b2QYAyABKBISDgoGc3ltYm9sGAQgASgJInAKEUFkZFN1YlNjaGVtZUlucHV0",
            "Eh0KCXNjaGVtZV9pZBgBIAEoCzIKLmFlbGYuSGFzaBIhCg1zdWJfc2NoZW1l",
            "X2lkGAIgASgLMgouYWVsZi5IYXNoEhkKEXN1Yl9zY2hlbWVfc2hhcmVzGAMg",
            "ASgSIoEBChRSZW1vdmVTdWJTY2hlbWVJbnB1dBIdCglzY2hlbWVfaWQYASAB",
            "KAsyCi5hZWxmLkhhc2gSIQoNc3ViX3NjaGVtZV9pZBgCIAEoCzIKLmFlbGYu",
            "SGFzaBInChBzdWJfaXRlbV9jcmVhdG9yGAMgASgLMg0uYWVsZi5BZGRyZXNz",
            "IsQBChZEaXN0cmlidXRlZFByb2ZpdHNJbmZvEhQKDHRvdGFsX3NoYXJlcxgB",
            "IAEoEhJJCg5wcm9maXRzX2Ftb3VudBgCIAMoCzIxLnByb2ZpdC5EaXN0cmli",
            "dXRlZFByb2ZpdHNJbmZvLlByb2ZpdHNBbW91bnRFbnRyeRITCgtpc19yZWxl",
            "YXNlZBgDIAEoCBo0ChJQcm9maXRzQW1vdW50RW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgSOgI4ASIyChBDcmVhdGVkU2NoZW1lSWRzEh4KCnNj",
            "aGVtZV9pZHMYASADKAsyCi5hZWxmLkhhc2giOwoZR2V0TWFuYWdpbmdTY2hl",
            "bWVJZHNJbnB1dBIeCgdtYW5hZ2VyGAEgASgLMg0uYWVsZi5BZGRyZXNzIj0K",
            "DFNjaGVtZVBlcmlvZBIdCglzY2hlbWVfaWQYASABKAsyCi5hZWxmLkhhc2gS",
            "DgoGcGVyaW9kGAIgASgSIloKFUdldFByb2ZpdERldGFpbHNJbnB1dBIdCglz",
            "Y2hlbWVfaWQYASABKAsyCi5hZWxmLkhhc2gSIgoLYmVuZWZpY2lhcnkYAiAB",
            "KAsyDS5hZWxmLkFkZHJlc3MiVgoRUmVzZXRNYW5hZ2VySW5wdXQSHQoJc2No",
            "ZW1lX2lkGAEgASgLMgouYWVsZi5IYXNoEiIKC25ld19tYW5hZ2VyGAIgASgL",
            "Mg0uYWVsZi5BZGRyZXNzIt0BCg1TY2hlbWVDcmVhdGVkEiYKD3ZpcnR1YWxf",
            "YWRkcmVzcxgBIAEoCzINLmFlbGYuQWRkcmVzcxIeCgdtYW5hZ2VyGAIgASgL",
            "Mg0uYWVsZi5BZGRyZXNzEikKIXByb2ZpdF9yZWNlaXZpbmdfZHVlX3Blcmlv",
            "ZF9jb3VudBgDIAEoEhI0Cixpc19yZWxlYXNlX2FsbF9iYWxhbmNlX2V2ZXJ5",
            "X3RpbWVfYnlfZGVmYXVsdBgEIAEoCBIdCglzY2hlbWVfaWQYBSABKAsyCi5h",
            "ZWxmLkhhc2g6BKC7GAEytwoKDlByb2ZpdENvbnRyYWN0EjcKDENyZWF0ZVNj",
            "aGVtZRIZLnByb2ZpdC5DcmVhdGVTY2hlbWVJbnB1dBoKLmFlbGYuSGFzaCIA",
            "EkcKDkFkZEJlbmVmaWNpYXJ5EhsucHJvZml0LkFkZEJlbmVmaWNpYXJ5SW5w",
            "dXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJNChFSZW1vdmVCZW5lZmlj",
            "aWFyeRIeLnByb2ZpdC5SZW1vdmVCZW5lZmljaWFyeUlucHV0GhYuZ29vZ2xl",
            "LnByb3RvYnVmLkVtcHR5IgASSwoQQWRkQmVuZWZpY2lhcmllcxIdLnByb2Zp",
            "dC5BZGRCZW5lZmljaWFyaWVzSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1w",
            "dHkiABJRChNSZW1vdmVCZW5lZmljaWFyaWVzEiAucHJvZml0LlJlbW92ZUJl",
            "bmVmaWNpYXJpZXNJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEk0K",
            "EUNvbnRyaWJ1dGVQcm9maXRzEh4ucHJvZml0LkNvbnRyaWJ1dGVQcm9maXRz",
            "SW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJDCgxDbGFpbVByb2Zp",
            "dHMSGS5wcm9maXQuQ2xhaW1Qcm9maXRzSW5wdXQaFi5nb29nbGUucHJvdG9i",
            "dWYuRW1wdHkiABJNChFEaXN0cmlidXRlUHJvZml0cxIeLnByb2ZpdC5EaXN0",
            "cmlidXRlUHJvZml0c0lucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgAS",
            "QwoMQWRkU3ViU2NoZW1lEhkucHJvZml0LkFkZFN1YlNjaGVtZUlucHV0GhYu",
            "Z29vZ2xlLnByb3RvYnVmLkVtcHR5IgASSQoPUmVtb3ZlU3ViU2NoZW1lEhwu",
            "cHJvZml0LlJlbW92ZVN1YlNjaGVtZUlucHV0GhYuZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5IgASQwoMUmVzZXRNYW5hZ2VyEhkucHJvZml0LlJlc2V0TWFuYWdl",
            "cklucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASWgoUR2V0TWFuYWdp",
            "bmdTY2hlbWVJZHMSIS5wcm9maXQuR2V0TWFuYWdpbmdTY2hlbWVJZHNJbnB1",
            "dBoYLnByb2ZpdC5DcmVhdGVkU2NoZW1lSWRzIgWIifcBARIuCglHZXRTY2hl",
            "bWUSCi5hZWxmLkhhc2gaDi5wcm9maXQuU2NoZW1lIgWIifcBARI+ChBHZXRT",
            "Y2hlbWVBZGRyZXNzEhQucHJvZml0LlNjaGVtZVBlcmlvZBoNLmFlbGYuQWRk",
            "cmVzcyIFiIn3AQESWAoZR2V0RGlzdHJpYnV0ZWRQcm9maXRzSW5mbxIULnBy",
            "b2ZpdC5TY2hlbWVQZXJpb2QaHi5wcm9maXQuRGlzdHJpYnV0ZWRQcm9maXRz",
            "SW5mbyIFiIn3AQESTwoQR2V0UHJvZml0RGV0YWlscxIdLnByb2ZpdC5HZXRQ",
            "cm9maXREZXRhaWxzSW5wdXQaFS5wcm9maXQuUHJvZml0RGV0YWlscyIFiIn3",
            "AQESRgoPR2V0UHJvZml0QW1vdW50EhkucHJvZml0LkNsYWltUHJvZml0c0lu",
            "cHV0GhEuYWVsZi5TSW50NjRWYWx1ZSIFiIn3AQEaPbLM9gEpQUVsZi5Db250",
            "cmFjdHMuUHJvZml0LlByb2ZpdENvbnRyYWN0U3RhdGXKyvYBCmFjczEucHJv",
            "dG9CGKoCFUFFbGYuQ29udHJhY3RzLlByb2ZpdGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Acs1.Acs1Reflection.Descriptor, global::AElf.Types.CoreReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.CreateSchemeInput), global::AElf.Contracts.Profit.CreateSchemeInput.Parser, new[]{ "ProfitReceivingDuePeriodCount", "IsReleaseAllBalanceEveryTimeByDefault", "DelayDistributePeriodCount", "Manager", "CanRemoveBeneficiaryDirectly" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.Scheme), global::AElf.Contracts.Profit.Scheme.Parser, new[]{ "VirtualAddress", "TotalShares", "UndistributedProfits", "CurrentPeriod", "SubSchemes", "CanRemoveBeneficiaryDirectly", "ProfitReceivingDuePeriodCount", "IsReleaseAllBalanceEveryTimeByDefault", "SchemeId", "DelayDistributePeriodCount", "CachedDelayTotalShares", "Manager" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.SchemeBeneficiaryShare), global::AElf.Contracts.Profit.SchemeBeneficiaryShare.Parser, new[]{ "SchemeId", "Shares" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.AddBeneficiaryInput), global::AElf.Contracts.Profit.AddBeneficiaryInput.Parser, new[]{ "SchemeId", "BeneficiaryShare", "EndPeriod" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.RemoveBeneficiaryInput), global::AElf.Contracts.Profit.RemoveBeneficiaryInput.Parser, new[]{ "Beneficiary", "SchemeId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.AddBeneficiariesInput), global::AElf.Contracts.Profit.AddBeneficiariesInput.Parser, new[]{ "SchemeId", "BeneficiaryShares", "EndPeriod" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.RemoveBeneficiariesInput), global::AElf.Contracts.Profit.RemoveBeneficiariesInput.Parser, new[]{ "Beneficiaries", "SchemeId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.BeneficiaryShare), global::AElf.Contracts.Profit.BeneficiaryShare.Parser, new[]{ "Beneficiary", "Shares" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.ClaimProfitsInput), global::AElf.Contracts.Profit.ClaimProfitsInput.Parser, new[]{ "SchemeId", "Symbol", "Beneficiary" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.DistributeProfitsInput), global::AElf.Contracts.Profit.DistributeProfitsInput.Parser, new[]{ "SchemeId", "Period", "Amount", "Symbol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.ProfitDetails), global::AElf.Contracts.Profit.ProfitDetails.Parser, new[]{ "Details" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.ProfitDetail), global::AElf.Contracts.Profit.ProfitDetail.Parser, new[]{ "StartPeriod", "EndPeriod", "Shares", "LastProfitPeriod", "IsWeightRemoved" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.ContributeProfitsInput), global::AElf.Contracts.Profit.ContributeProfitsInput.Parser, new[]{ "SchemeId", "Amount", "Period", "Symbol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.AddSubSchemeInput), global::AElf.Contracts.Profit.AddSubSchemeInput.Parser, new[]{ "SchemeId", "SubSchemeId", "SubSchemeShares" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.RemoveSubSchemeInput), global::AElf.Contracts.Profit.RemoveSubSchemeInput.Parser, new[]{ "SchemeId", "SubSchemeId", "SubItemCreator" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.DistributedProfitsInfo), global::AElf.Contracts.Profit.DistributedProfitsInfo.Parser, new[]{ "TotalShares", "ProfitsAmount", "IsReleased" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.CreatedSchemeIds), global::AElf.Contracts.Profit.CreatedSchemeIds.Parser, new[]{ "SchemeIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.GetManagingSchemeIdsInput), global::AElf.Contracts.Profit.GetManagingSchemeIdsInput.Parser, new[]{ "Manager" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.SchemePeriod), global::AElf.Contracts.Profit.SchemePeriod.Parser, new[]{ "SchemeId", "Period" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.GetProfitDetailsInput), global::AElf.Contracts.Profit.GetProfitDetailsInput.Parser, new[]{ "SchemeId", "Beneficiary" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.ResetManagerInput), global::AElf.Contracts.Profit.ResetManagerInput.Parser, new[]{ "SchemeId", "NewManager" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Profit.SchemeCreated), global::AElf.Contracts.Profit.SchemeCreated.Parser, new[]{ "VirtualAddress", "Manager", "ProfitReceivingDuePeriodCount", "IsReleaseAllBalanceEveryTimeByDefault", "SchemeId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class CreateSchemeInput : pb::IMessage<CreateSchemeInput> {
    private static readonly pb::MessageParser<CreateSchemeInput> _parser = new pb::MessageParser<CreateSchemeInput>(() => new CreateSchemeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateSchemeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSchemeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSchemeInput(CreateSchemeInput other) : this() {
      profitReceivingDuePeriodCount_ = other.profitReceivingDuePeriodCount_;
      isReleaseAllBalanceEveryTimeByDefault_ = other.isReleaseAllBalanceEveryTimeByDefault_;
      delayDistributePeriodCount_ = other.delayDistributePeriodCount_;
      manager_ = other.manager_ != null ? other.manager_.Clone() : null;
      canRemoveBeneficiaryDirectly_ = other.canRemoveBeneficiaryDirectly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSchemeInput Clone() {
      return new CreateSchemeInput(this);
    }

    /// <summary>Field number for the "profit_receiving_due_period_count" field.</summary>
    public const int ProfitReceivingDuePeriodCountFieldNumber = 1;
    private long profitReceivingDuePeriodCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProfitReceivingDuePeriodCount {
      get { return profitReceivingDuePeriodCount_; }
      set {
        profitReceivingDuePeriodCount_ = value;
      }
    }

    /// <summary>Field number for the "is_release_all_balance_every_time_by_default" field.</summary>
    public const int IsReleaseAllBalanceEveryTimeByDefaultFieldNumber = 2;
    private bool isReleaseAllBalanceEveryTimeByDefault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReleaseAllBalanceEveryTimeByDefault {
      get { return isReleaseAllBalanceEveryTimeByDefault_; }
      set {
        isReleaseAllBalanceEveryTimeByDefault_ = value;
      }
    }

    /// <summary>Field number for the "delay_distribute_period_count" field.</summary>
    public const int DelayDistributePeriodCountFieldNumber = 3;
    private int delayDistributePeriodCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DelayDistributePeriodCount {
      get { return delayDistributePeriodCount_; }
      set {
        delayDistributePeriodCount_ = value;
      }
    }

    /// <summary>Field number for the "manager" field.</summary>
    public const int ManagerFieldNumber = 4;
    private global::AElf.Types.Address manager_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Manager {
      get { return manager_; }
      set {
        manager_ = value;
      }
    }

    /// <summary>Field number for the "can_remove_beneficiary_directly" field.</summary>
    public const int CanRemoveBeneficiaryDirectlyFieldNumber = 5;
    private bool canRemoveBeneficiaryDirectly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanRemoveBeneficiaryDirectly {
      get { return canRemoveBeneficiaryDirectly_; }
      set {
        canRemoveBeneficiaryDirectly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateSchemeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateSchemeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProfitReceivingDuePeriodCount != other.ProfitReceivingDuePeriodCount) return false;
      if (IsReleaseAllBalanceEveryTimeByDefault != other.IsReleaseAllBalanceEveryTimeByDefault) return false;
      if (DelayDistributePeriodCount != other.DelayDistributePeriodCount) return false;
      if (!object.Equals(Manager, other.Manager)) return false;
      if (CanRemoveBeneficiaryDirectly != other.CanRemoveBeneficiaryDirectly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProfitReceivingDuePeriodCount != 0L) hash ^= ProfitReceivingDuePeriodCount.GetHashCode();
      if (IsReleaseAllBalanceEveryTimeByDefault != false) hash ^= IsReleaseAllBalanceEveryTimeByDefault.GetHashCode();
      if (DelayDistributePeriodCount != 0) hash ^= DelayDistributePeriodCount.GetHashCode();
      if (manager_ != null) hash ^= Manager.GetHashCode();
      if (CanRemoveBeneficiaryDirectly != false) hash ^= CanRemoveBeneficiaryDirectly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProfitReceivingDuePeriodCount != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(ProfitReceivingDuePeriodCount);
      }
      if (IsReleaseAllBalanceEveryTimeByDefault != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsReleaseAllBalanceEveryTimeByDefault);
      }
      if (DelayDistributePeriodCount != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(DelayDistributePeriodCount);
      }
      if (manager_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Manager);
      }
      if (CanRemoveBeneficiaryDirectly != false) {
        output.WriteRawTag(40);
        output.WriteBool(CanRemoveBeneficiaryDirectly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProfitReceivingDuePeriodCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ProfitReceivingDuePeriodCount);
      }
      if (IsReleaseAllBalanceEveryTimeByDefault != false) {
        size += 1 + 1;
      }
      if (DelayDistributePeriodCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(DelayDistributePeriodCount);
      }
      if (manager_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Manager);
      }
      if (CanRemoveBeneficiaryDirectly != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateSchemeInput other) {
      if (other == null) {
        return;
      }
      if (other.ProfitReceivingDuePeriodCount != 0L) {
        ProfitReceivingDuePeriodCount = other.ProfitReceivingDuePeriodCount;
      }
      if (other.IsReleaseAllBalanceEveryTimeByDefault != false) {
        IsReleaseAllBalanceEveryTimeByDefault = other.IsReleaseAllBalanceEveryTimeByDefault;
      }
      if (other.DelayDistributePeriodCount != 0) {
        DelayDistributePeriodCount = other.DelayDistributePeriodCount;
      }
      if (other.manager_ != null) {
        if (manager_ == null) {
          Manager = new global::AElf.Types.Address();
        }
        Manager.MergeFrom(other.Manager);
      }
      if (other.CanRemoveBeneficiaryDirectly != false) {
        CanRemoveBeneficiaryDirectly = other.CanRemoveBeneficiaryDirectly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProfitReceivingDuePeriodCount = input.ReadSInt64();
            break;
          }
          case 16: {
            IsReleaseAllBalanceEveryTimeByDefault = input.ReadBool();
            break;
          }
          case 24: {
            DelayDistributePeriodCount = input.ReadSInt32();
            break;
          }
          case 34: {
            if (manager_ == null) {
              Manager = new global::AElf.Types.Address();
            }
            input.ReadMessage(Manager);
            break;
          }
          case 40: {
            CanRemoveBeneficiaryDirectly = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Scheme : pb::IMessage<Scheme> {
    private static readonly pb::MessageParser<Scheme> _parser = new pb::MessageParser<Scheme>(() => new Scheme());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scheme> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scheme() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scheme(Scheme other) : this() {
      virtualAddress_ = other.virtualAddress_ != null ? other.virtualAddress_.Clone() : null;
      totalShares_ = other.totalShares_;
      undistributedProfits_ = other.undistributedProfits_.Clone();
      currentPeriod_ = other.currentPeriod_;
      subSchemes_ = other.subSchemes_.Clone();
      canRemoveBeneficiaryDirectly_ = other.canRemoveBeneficiaryDirectly_;
      profitReceivingDuePeriodCount_ = other.profitReceivingDuePeriodCount_;
      isReleaseAllBalanceEveryTimeByDefault_ = other.isReleaseAllBalanceEveryTimeByDefault_;
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      delayDistributePeriodCount_ = other.delayDistributePeriodCount_;
      cachedDelayTotalShares_ = other.cachedDelayTotalShares_.Clone();
      manager_ = other.manager_ != null ? other.manager_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scheme Clone() {
      return new Scheme(this);
    }

    /// <summary>Field number for the "virtual_address" field.</summary>
    public const int VirtualAddressFieldNumber = 1;
    private global::AElf.Types.Address virtualAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address VirtualAddress {
      get { return virtualAddress_; }
      set {
        virtualAddress_ = value;
      }
    }

    /// <summary>Field number for the "total_shares" field.</summary>
    public const int TotalSharesFieldNumber = 2;
    private long totalShares_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalShares {
      get { return totalShares_; }
      set {
        totalShares_ = value;
      }
    }

    /// <summary>Field number for the "undistributed_profits" field.</summary>
    public const int UndistributedProfitsFieldNumber = 3;
    private static readonly pbc::MapField<string, long>.Codec _map_undistributedProfits_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForSInt64(16), 26);
    private readonly pbc::MapField<string, long> undistributedProfits_ = new pbc::MapField<string, long>();
    /// <summary>
    /// token symbol -> amount
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> UndistributedProfits {
      get { return undistributedProfits_; }
    }

    /// <summary>Field number for the "current_period" field.</summary>
    public const int CurrentPeriodFieldNumber = 4;
    private long currentPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentPeriod {
      get { return currentPeriod_; }
      set {
        currentPeriod_ = value;
      }
    }

    /// <summary>Field number for the "sub_schemes" field.</summary>
    public const int SubSchemesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::AElf.Contracts.Profit.SchemeBeneficiaryShare> _repeated_subSchemes_codec
        = pb::FieldCodec.ForMessage(42, global::AElf.Contracts.Profit.SchemeBeneficiaryShare.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.Profit.SchemeBeneficiaryShare> subSchemes_ = new pbc::RepeatedField<global::AElf.Contracts.Profit.SchemeBeneficiaryShare>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.Profit.SchemeBeneficiaryShare> SubSchemes {
      get { return subSchemes_; }
    }

    /// <summary>Field number for the "can_remove_beneficiary_directly" field.</summary>
    public const int CanRemoveBeneficiaryDirectlyFieldNumber = 6;
    private bool canRemoveBeneficiaryDirectly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanRemoveBeneficiaryDirectly {
      get { return canRemoveBeneficiaryDirectly_; }
      set {
        canRemoveBeneficiaryDirectly_ = value;
      }
    }

    /// <summary>Field number for the "profit_receiving_due_period_count" field.</summary>
    public const int ProfitReceivingDuePeriodCountFieldNumber = 7;
    private long profitReceivingDuePeriodCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProfitReceivingDuePeriodCount {
      get { return profitReceivingDuePeriodCount_; }
      set {
        profitReceivingDuePeriodCount_ = value;
      }
    }

    /// <summary>Field number for the "is_release_all_balance_every_time_by_default" field.</summary>
    public const int IsReleaseAllBalanceEveryTimeByDefaultFieldNumber = 8;
    private bool isReleaseAllBalanceEveryTimeByDefault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReleaseAllBalanceEveryTimeByDefault {
      get { return isReleaseAllBalanceEveryTimeByDefault_; }
      set {
        isReleaseAllBalanceEveryTimeByDefault_ = value;
      }
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 9;
    private global::AElf.Types.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    /// <summary>Field number for the "delay_distribute_period_count" field.</summary>
    public const int DelayDistributePeriodCountFieldNumber = 10;
    private int delayDistributePeriodCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DelayDistributePeriodCount {
      get { return delayDistributePeriodCount_; }
      set {
        delayDistributePeriodCount_ = value;
      }
    }

    /// <summary>Field number for the "cached_delay_total_shares" field.</summary>
    public const int CachedDelayTotalSharesFieldNumber = 11;
    private static readonly pbc::MapField<long, long>.Codec _map_cachedDelayTotalShares_codec
        = new pbc::MapField<long, long>.Codec(pb::FieldCodec.ForSInt64(8), pb::FieldCodec.ForSInt64(16), 90);
    private readonly pbc::MapField<long, long> cachedDelayTotalShares_ = new pbc::MapField<long, long>();
    /// <summary>
    /// period -> total shares, max elements count should be delay_distribute_period_count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, long> CachedDelayTotalShares {
      get { return cachedDelayTotalShares_; }
    }

    /// <summary>Field number for the "manager" field.</summary>
    public const int ManagerFieldNumber = 12;
    private global::AElf.Types.Address manager_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Manager {
      get { return manager_; }
      set {
        manager_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scheme);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scheme other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VirtualAddress, other.VirtualAddress)) return false;
      if (TotalShares != other.TotalShares) return false;
      if (!UndistributedProfits.Equals(other.UndistributedProfits)) return false;
      if (CurrentPeriod != other.CurrentPeriod) return false;
      if(!subSchemes_.Equals(other.subSchemes_)) return false;
      if (CanRemoveBeneficiaryDirectly != other.CanRemoveBeneficiaryDirectly) return false;
      if (ProfitReceivingDuePeriodCount != other.ProfitReceivingDuePeriodCount) return false;
      if (IsReleaseAllBalanceEveryTimeByDefault != other.IsReleaseAllBalanceEveryTimeByDefault) return false;
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      if (DelayDistributePeriodCount != other.DelayDistributePeriodCount) return false;
      if (!CachedDelayTotalShares.Equals(other.CachedDelayTotalShares)) return false;
      if (!object.Equals(Manager, other.Manager)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (virtualAddress_ != null) hash ^= VirtualAddress.GetHashCode();
      if (TotalShares != 0L) hash ^= TotalShares.GetHashCode();
      hash ^= UndistributedProfits.GetHashCode();
      if (CurrentPeriod != 0L) hash ^= CurrentPeriod.GetHashCode();
      hash ^= subSchemes_.GetHashCode();
      if (CanRemoveBeneficiaryDirectly != false) hash ^= CanRemoveBeneficiaryDirectly.GetHashCode();
      if (ProfitReceivingDuePeriodCount != 0L) hash ^= ProfitReceivingDuePeriodCount.GetHashCode();
      if (IsReleaseAllBalanceEveryTimeByDefault != false) hash ^= IsReleaseAllBalanceEveryTimeByDefault.GetHashCode();
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      if (DelayDistributePeriodCount != 0) hash ^= DelayDistributePeriodCount.GetHashCode();
      hash ^= CachedDelayTotalShares.GetHashCode();
      if (manager_ != null) hash ^= Manager.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (virtualAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(VirtualAddress);
      }
      if (TotalShares != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(TotalShares);
      }
      undistributedProfits_.WriteTo(output, _map_undistributedProfits_codec);
      if (CurrentPeriod != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(CurrentPeriod);
      }
      subSchemes_.WriteTo(output, _repeated_subSchemes_codec);
      if (CanRemoveBeneficiaryDirectly != false) {
        output.WriteRawTag(48);
        output.WriteBool(CanRemoveBeneficiaryDirectly);
      }
      if (ProfitReceivingDuePeriodCount != 0L) {
        output.WriteRawTag(56);
        output.WriteSInt64(ProfitReceivingDuePeriodCount);
      }
      if (IsReleaseAllBalanceEveryTimeByDefault != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsReleaseAllBalanceEveryTimeByDefault);
      }
      if (schemeId_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(SchemeId);
      }
      if (DelayDistributePeriodCount != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(DelayDistributePeriodCount);
      }
      cachedDelayTotalShares_.WriteTo(output, _map_cachedDelayTotalShares_codec);
      if (manager_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Manager);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (virtualAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VirtualAddress);
      }
      if (TotalShares != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TotalShares);
      }
      size += undistributedProfits_.CalculateSize(_map_undistributedProfits_codec);
      if (CurrentPeriod != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(CurrentPeriod);
      }
      size += subSchemes_.CalculateSize(_repeated_subSchemes_codec);
      if (CanRemoveBeneficiaryDirectly != false) {
        size += 1 + 1;
      }
      if (ProfitReceivingDuePeriodCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ProfitReceivingDuePeriodCount);
      }
      if (IsReleaseAllBalanceEveryTimeByDefault != false) {
        size += 1 + 1;
      }
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      if (DelayDistributePeriodCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(DelayDistributePeriodCount);
      }
      size += cachedDelayTotalShares_.CalculateSize(_map_cachedDelayTotalShares_codec);
      if (manager_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Manager);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scheme other) {
      if (other == null) {
        return;
      }
      if (other.virtualAddress_ != null) {
        if (virtualAddress_ == null) {
          VirtualAddress = new global::AElf.Types.Address();
        }
        VirtualAddress.MergeFrom(other.VirtualAddress);
      }
      if (other.TotalShares != 0L) {
        TotalShares = other.TotalShares;
      }
      undistributedProfits_.Add(other.undistributedProfits_);
      if (other.CurrentPeriod != 0L) {
        CurrentPeriod = other.CurrentPeriod;
      }
      subSchemes_.Add(other.subSchemes_);
      if (other.CanRemoveBeneficiaryDirectly != false) {
        CanRemoveBeneficiaryDirectly = other.CanRemoveBeneficiaryDirectly;
      }
      if (other.ProfitReceivingDuePeriodCount != 0L) {
        ProfitReceivingDuePeriodCount = other.ProfitReceivingDuePeriodCount;
      }
      if (other.IsReleaseAllBalanceEveryTimeByDefault != false) {
        IsReleaseAllBalanceEveryTimeByDefault = other.IsReleaseAllBalanceEveryTimeByDefault;
      }
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Types.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      if (other.DelayDistributePeriodCount != 0) {
        DelayDistributePeriodCount = other.DelayDistributePeriodCount;
      }
      cachedDelayTotalShares_.Add(other.cachedDelayTotalShares_);
      if (other.manager_ != null) {
        if (manager_ == null) {
          Manager = new global::AElf.Types.Address();
        }
        Manager.MergeFrom(other.Manager);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (virtualAddress_ == null) {
              VirtualAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(VirtualAddress);
            break;
          }
          case 16: {
            TotalShares = input.ReadSInt64();
            break;
          }
          case 26: {
            undistributedProfits_.AddEntriesFrom(input, _map_undistributedProfits_codec);
            break;
          }
          case 32: {
            CurrentPeriod = input.ReadSInt64();
            break;
          }
          case 42: {
            subSchemes_.AddEntriesFrom(input, _repeated_subSchemes_codec);
            break;
          }
          case 48: {
            CanRemoveBeneficiaryDirectly = input.ReadBool();
            break;
          }
          case 56: {
            ProfitReceivingDuePeriodCount = input.ReadSInt64();
            break;
          }
          case 64: {
            IsReleaseAllBalanceEveryTimeByDefault = input.ReadBool();
            break;
          }
          case 74: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
          case 80: {
            DelayDistributePeriodCount = input.ReadSInt32();
            break;
          }
          case 90: {
            cachedDelayTotalShares_.AddEntriesFrom(input, _map_cachedDelayTotalShares_codec);
            break;
          }
          case 98: {
            if (manager_ == null) {
              Manager = new global::AElf.Types.Address();
            }
            input.ReadMessage(Manager);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SchemeBeneficiaryShare : pb::IMessage<SchemeBeneficiaryShare> {
    private static readonly pb::MessageParser<SchemeBeneficiaryShare> _parser = new pb::MessageParser<SchemeBeneficiaryShare>(() => new SchemeBeneficiaryShare());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SchemeBeneficiaryShare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemeBeneficiaryShare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemeBeneficiaryShare(SchemeBeneficiaryShare other) : this() {
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      shares_ = other.shares_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemeBeneficiaryShare Clone() {
      return new SchemeBeneficiaryShare(this);
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 1;
    private global::AElf.Types.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    /// <summary>Field number for the "shares" field.</summary>
    public const int SharesFieldNumber = 2;
    private long shares_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Shares {
      get { return shares_; }
      set {
        shares_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SchemeBeneficiaryShare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SchemeBeneficiaryShare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      if (Shares != other.Shares) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      if (Shares != 0L) hash ^= Shares.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (schemeId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SchemeId);
      }
      if (Shares != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Shares);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      if (Shares != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Shares);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SchemeBeneficiaryShare other) {
      if (other == null) {
        return;
      }
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Types.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      if (other.Shares != 0L) {
        Shares = other.Shares;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
          case 16: {
            Shares = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AddBeneficiaryInput : pb::IMessage<AddBeneficiaryInput> {
    private static readonly pb::MessageParser<AddBeneficiaryInput> _parser = new pb::MessageParser<AddBeneficiaryInput>(() => new AddBeneficiaryInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddBeneficiaryInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddBeneficiaryInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddBeneficiaryInput(AddBeneficiaryInput other) : this() {
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      beneficiaryShare_ = other.beneficiaryShare_ != null ? other.beneficiaryShare_.Clone() : null;
      endPeriod_ = other.endPeriod_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddBeneficiaryInput Clone() {
      return new AddBeneficiaryInput(this);
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 1;
    private global::AElf.Types.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    /// <summary>Field number for the "beneficiary_share" field.</summary>
    public const int BeneficiaryShareFieldNumber = 2;
    private global::AElf.Contracts.Profit.BeneficiaryShare beneficiaryShare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Profit.BeneficiaryShare BeneficiaryShare {
      get { return beneficiaryShare_; }
      set {
        beneficiaryShare_ = value;
      }
    }

    /// <summary>Field number for the "end_period" field.</summary>
    public const int EndPeriodFieldNumber = 3;
    private long endPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndPeriod {
      get { return endPeriod_; }
      set {
        endPeriod_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddBeneficiaryInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddBeneficiaryInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      if (!object.Equals(BeneficiaryShare, other.BeneficiaryShare)) return false;
      if (EndPeriod != other.EndPeriod) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      if (beneficiaryShare_ != null) hash ^= BeneficiaryShare.GetHashCode();
      if (EndPeriod != 0L) hash ^= EndPeriod.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (schemeId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SchemeId);
      }
      if (beneficiaryShare_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BeneficiaryShare);
      }
      if (EndPeriod != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(EndPeriod);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      if (beneficiaryShare_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BeneficiaryShare);
      }
      if (EndPeriod != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(EndPeriod);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddBeneficiaryInput other) {
      if (other == null) {
        return;
      }
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Types.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      if (other.beneficiaryShare_ != null) {
        if (beneficiaryShare_ == null) {
          BeneficiaryShare = new global::AElf.Contracts.Profit.BeneficiaryShare();
        }
        BeneficiaryShare.MergeFrom(other.BeneficiaryShare);
      }
      if (other.EndPeriod != 0L) {
        EndPeriod = other.EndPeriod;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
          case 18: {
            if (beneficiaryShare_ == null) {
              BeneficiaryShare = new global::AElf.Contracts.Profit.BeneficiaryShare();
            }
            input.ReadMessage(BeneficiaryShare);
            break;
          }
          case 24: {
            EndPeriod = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RemoveBeneficiaryInput : pb::IMessage<RemoveBeneficiaryInput> {
    private static readonly pb::MessageParser<RemoveBeneficiaryInput> _parser = new pb::MessageParser<RemoveBeneficiaryInput>(() => new RemoveBeneficiaryInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveBeneficiaryInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveBeneficiaryInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveBeneficiaryInput(RemoveBeneficiaryInput other) : this() {
      beneficiary_ = other.beneficiary_ != null ? other.beneficiary_.Clone() : null;
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveBeneficiaryInput Clone() {
      return new RemoveBeneficiaryInput(this);
    }

    /// <summary>Field number for the "beneficiary" field.</summary>
    public const int BeneficiaryFieldNumber = 1;
    private global::AElf.Types.Address beneficiary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Beneficiary {
      get { return beneficiary_; }
      set {
        beneficiary_ = value;
      }
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 2;
    private global::AElf.Types.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveBeneficiaryInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveBeneficiaryInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Beneficiary, other.Beneficiary)) return false;
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (beneficiary_ != null) hash ^= Beneficiary.GetHashCode();
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (beneficiary_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Beneficiary);
      }
      if (schemeId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SchemeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (beneficiary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Beneficiary);
      }
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveBeneficiaryInput other) {
      if (other == null) {
        return;
      }
      if (other.beneficiary_ != null) {
        if (beneficiary_ == null) {
          Beneficiary = new global::AElf.Types.Address();
        }
        Beneficiary.MergeFrom(other.Beneficiary);
      }
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Types.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (beneficiary_ == null) {
              Beneficiary = new global::AElf.Types.Address();
            }
            input.ReadMessage(Beneficiary);
            break;
          }
          case 18: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AddBeneficiariesInput : pb::IMessage<AddBeneficiariesInput> {
    private static readonly pb::MessageParser<AddBeneficiariesInput> _parser = new pb::MessageParser<AddBeneficiariesInput>(() => new AddBeneficiariesInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddBeneficiariesInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddBeneficiariesInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddBeneficiariesInput(AddBeneficiariesInput other) : this() {
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      beneficiaryShares_ = other.beneficiaryShares_.Clone();
      endPeriod_ = other.endPeriod_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddBeneficiariesInput Clone() {
      return new AddBeneficiariesInput(this);
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 1;
    private global::AElf.Types.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    /// <summary>Field number for the "beneficiary_shares" field.</summary>
    public const int BeneficiarySharesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AElf.Contracts.Profit.BeneficiaryShare> _repeated_beneficiaryShares_codec
        = pb::FieldCodec.ForMessage(18, global::AElf.Contracts.Profit.BeneficiaryShare.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.Profit.BeneficiaryShare> beneficiaryShares_ = new pbc::RepeatedField<global::AElf.Contracts.Profit.BeneficiaryShare>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.Profit.BeneficiaryShare> BeneficiaryShares {
      get { return beneficiaryShares_; }
    }

    /// <summary>Field number for the "end_period" field.</summary>
    public const int EndPeriodFieldNumber = 3;
    private long endPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndPeriod {
      get { return endPeriod_; }
      set {
        endPeriod_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddBeneficiariesInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddBeneficiariesInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      if(!beneficiaryShares_.Equals(other.beneficiaryShares_)) return false;
      if (EndPeriod != other.EndPeriod) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      hash ^= beneficiaryShares_.GetHashCode();
      if (EndPeriod != 0L) hash ^= EndPeriod.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (schemeId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SchemeId);
      }
      beneficiaryShares_.WriteTo(output, _repeated_beneficiaryShares_codec);
      if (EndPeriod != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(EndPeriod);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      size += beneficiaryShares_.CalculateSize(_repeated_beneficiaryShares_codec);
      if (EndPeriod != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(EndPeriod);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddBeneficiariesInput other) {
      if (other == null) {
        return;
      }
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Types.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      beneficiaryShares_.Add(other.beneficiaryShares_);
      if (other.EndPeriod != 0L) {
        EndPeriod = other.EndPeriod;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
          case 18: {
            beneficiaryShares_.AddEntriesFrom(input, _repeated_beneficiaryShares_codec);
            break;
          }
          case 24: {
            EndPeriod = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RemoveBeneficiariesInput : pb::IMessage<RemoveBeneficiariesInput> {
    private static readonly pb::MessageParser<RemoveBeneficiariesInput> _parser = new pb::MessageParser<RemoveBeneficiariesInput>(() => new RemoveBeneficiariesInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveBeneficiariesInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveBeneficiariesInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveBeneficiariesInput(RemoveBeneficiariesInput other) : this() {
      beneficiaries_ = other.beneficiaries_.Clone();
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveBeneficiariesInput Clone() {
      return new RemoveBeneficiariesInput(this);
    }

    /// <summary>Field number for the "beneficiaries" field.</summary>
    public const int BeneficiariesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Types.Address> _repeated_beneficiaries_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Types.Address.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.Address> beneficiaries_ = new pbc::RepeatedField<global::AElf.Types.Address>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.Address> Beneficiaries {
      get { return beneficiaries_; }
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 2;
    private global::AElf.Types.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveBeneficiariesInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveBeneficiariesInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!beneficiaries_.Equals(other.beneficiaries_)) return false;
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= beneficiaries_.GetHashCode();
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      beneficiaries_.WriteTo(output, _repeated_beneficiaries_codec);
      if (schemeId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SchemeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += beneficiaries_.CalculateSize(_repeated_beneficiaries_codec);
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveBeneficiariesInput other) {
      if (other == null) {
        return;
      }
      beneficiaries_.Add(other.beneficiaries_);
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Types.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            beneficiaries_.AddEntriesFrom(input, _repeated_beneficiaries_codec);
            break;
          }
          case 18: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class BeneficiaryShare : pb::IMessage<BeneficiaryShare> {
    private static readonly pb::MessageParser<BeneficiaryShare> _parser = new pb::MessageParser<BeneficiaryShare>(() => new BeneficiaryShare());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BeneficiaryShare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeneficiaryShare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeneficiaryShare(BeneficiaryShare other) : this() {
      beneficiary_ = other.beneficiary_ != null ? other.beneficiary_.Clone() : null;
      shares_ = other.shares_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeneficiaryShare Clone() {
      return new BeneficiaryShare(this);
    }

    /// <summary>Field number for the "beneficiary" field.</summary>
    public const int BeneficiaryFieldNumber = 1;
    private global::AElf.Types.Address beneficiary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Beneficiary {
      get { return beneficiary_; }
      set {
        beneficiary_ = value;
      }
    }

    /// <summary>Field number for the "shares" field.</summary>
    public const int SharesFieldNumber = 2;
    private long shares_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Shares {
      get { return shares_; }
      set {
        shares_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BeneficiaryShare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BeneficiaryShare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Beneficiary, other.Beneficiary)) return false;
      if (Shares != other.Shares) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (beneficiary_ != null) hash ^= Beneficiary.GetHashCode();
      if (Shares != 0L) hash ^= Shares.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (beneficiary_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Beneficiary);
      }
      if (Shares != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Shares);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (beneficiary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Beneficiary);
      }
      if (Shares != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Shares);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BeneficiaryShare other) {
      if (other == null) {
        return;
      }
      if (other.beneficiary_ != null) {
        if (beneficiary_ == null) {
          Beneficiary = new global::AElf.Types.Address();
        }
        Beneficiary.MergeFrom(other.Beneficiary);
      }
      if (other.Shares != 0L) {
        Shares = other.Shares;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (beneficiary_ == null) {
              Beneficiary = new global::AElf.Types.Address();
            }
            input.ReadMessage(Beneficiary);
            break;
          }
          case 16: {
            Shares = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ClaimProfitsInput : pb::IMessage<ClaimProfitsInput> {
    private static readonly pb::MessageParser<ClaimProfitsInput> _parser = new pb::MessageParser<ClaimProfitsInput>(() => new ClaimProfitsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClaimProfitsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimProfitsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimProfitsInput(ClaimProfitsInput other) : this() {
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      symbol_ = other.symbol_;
      beneficiary_ = other.beneficiary_ != null ? other.beneficiary_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimProfitsInput Clone() {
      return new ClaimProfitsInput(this);
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 1;
    private global::AElf.Types.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "beneficiary" field.</summary>
    public const int BeneficiaryFieldNumber = 3;
    private global::AElf.Types.Address beneficiary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Beneficiary {
      get { return beneficiary_; }
      set {
        beneficiary_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClaimProfitsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClaimProfitsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Beneficiary, other.Beneficiary)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (beneficiary_ != null) hash ^= Beneficiary.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (schemeId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SchemeId);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (beneficiary_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Beneficiary);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (beneficiary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Beneficiary);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClaimProfitsInput other) {
      if (other == null) {
        return;
      }
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Types.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.beneficiary_ != null) {
        if (beneficiary_ == null) {
          Beneficiary = new global::AElf.Types.Address();
        }
        Beneficiary.MergeFrom(other.Beneficiary);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 26: {
            if (beneficiary_ == null) {
              Beneficiary = new global::AElf.Types.Address();
            }
            input.ReadMessage(Beneficiary);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DistributeProfitsInput : pb::IMessage<DistributeProfitsInput> {
    private static readonly pb::MessageParser<DistributeProfitsInput> _parser = new pb::MessageParser<DistributeProfitsInput>(() => new DistributeProfitsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DistributeProfitsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributeProfitsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributeProfitsInput(DistributeProfitsInput other) : this() {
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      period_ = other.period_;
      amount_ = other.amount_;
      symbol_ = other.symbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributeProfitsInput Clone() {
      return new DistributeProfitsInput(this);
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 1;
    private global::AElf.Types.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 2;
    private long period_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 4;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DistributeProfitsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DistributeProfitsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      if (Period != other.Period) return false;
      if (Amount != other.Amount) return false;
      if (Symbol != other.Symbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      if (Period != 0L) hash ^= Period.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (schemeId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SchemeId);
      }
      if (Period != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Period);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Amount);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      if (Period != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Period);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DistributeProfitsInput other) {
      if (other == null) {
        return;
      }
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Types.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      if (other.Period != 0L) {
        Period = other.Period;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
          case 16: {
            Period = input.ReadSInt64();
            break;
          }
          case 24: {
            Amount = input.ReadSInt64();
            break;
          }
          case 34: {
            Symbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ProfitDetails : pb::IMessage<ProfitDetails> {
    private static readonly pb::MessageParser<ProfitDetails> _parser = new pb::MessageParser<ProfitDetails>(() => new ProfitDetails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfitDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitDetails(ProfitDetails other) : this() {
      details_ = other.details_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitDetails Clone() {
      return new ProfitDetails(this);
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Contracts.Profit.ProfitDetail> _repeated_details_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Contracts.Profit.ProfitDetail.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.Profit.ProfitDetail> details_ = new pbc::RepeatedField<global::AElf.Contracts.Profit.ProfitDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.Profit.ProfitDetail> Details {
      get { return details_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfitDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfitDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!details_.Equals(other.details_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= details_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      details_.WriteTo(output, _repeated_details_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += details_.CalculateSize(_repeated_details_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfitDetails other) {
      if (other == null) {
        return;
      }
      details_.Add(other.details_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            details_.AddEntriesFrom(input, _repeated_details_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ProfitDetail : pb::IMessage<ProfitDetail> {
    private static readonly pb::MessageParser<ProfitDetail> _parser = new pb::MessageParser<ProfitDetail>(() => new ProfitDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfitDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitDetail(ProfitDetail other) : this() {
      startPeriod_ = other.startPeriod_;
      endPeriod_ = other.endPeriod_;
      shares_ = other.shares_;
      lastProfitPeriod_ = other.lastProfitPeriod_;
      isWeightRemoved_ = other.isWeightRemoved_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitDetail Clone() {
      return new ProfitDetail(this);
    }

    /// <summary>Field number for the "start_period" field.</summary>
    public const int StartPeriodFieldNumber = 1;
    private long startPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartPeriod {
      get { return startPeriod_; }
      set {
        startPeriod_ = value;
      }
    }

    /// <summary>Field number for the "end_period" field.</summary>
    public const int EndPeriodFieldNumber = 2;
    private long endPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndPeriod {
      get { return endPeriod_; }
      set {
        endPeriod_ = value;
      }
    }

    /// <summary>Field number for the "shares" field.</summary>
    public const int SharesFieldNumber = 3;
    private long shares_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Shares {
      get { return shares_; }
      set {
        shares_ = value;
      }
    }

    /// <summary>Field number for the "last_profit_period" field.</summary>
    public const int LastProfitPeriodFieldNumber = 4;
    private long lastProfitPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastProfitPeriod {
      get { return lastProfitPeriod_; }
      set {
        lastProfitPeriod_ = value;
      }
    }

    /// <summary>Field number for the "is_weight_removed" field.</summary>
    public const int IsWeightRemovedFieldNumber = 5;
    private bool isWeightRemoved_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWeightRemoved {
      get { return isWeightRemoved_; }
      set {
        isWeightRemoved_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfitDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfitDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartPeriod != other.StartPeriod) return false;
      if (EndPeriod != other.EndPeriod) return false;
      if (Shares != other.Shares) return false;
      if (LastProfitPeriod != other.LastProfitPeriod) return false;
      if (IsWeightRemoved != other.IsWeightRemoved) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartPeriod != 0L) hash ^= StartPeriod.GetHashCode();
      if (EndPeriod != 0L) hash ^= EndPeriod.GetHashCode();
      if (Shares != 0L) hash ^= Shares.GetHashCode();
      if (LastProfitPeriod != 0L) hash ^= LastProfitPeriod.GetHashCode();
      if (IsWeightRemoved != false) hash ^= IsWeightRemoved.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartPeriod != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(StartPeriod);
      }
      if (EndPeriod != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(EndPeriod);
      }
      if (Shares != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Shares);
      }
      if (LastProfitPeriod != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(LastProfitPeriod);
      }
      if (IsWeightRemoved != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsWeightRemoved);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartPeriod != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(StartPeriod);
      }
      if (EndPeriod != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(EndPeriod);
      }
      if (Shares != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Shares);
      }
      if (LastProfitPeriod != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(LastProfitPeriod);
      }
      if (IsWeightRemoved != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfitDetail other) {
      if (other == null) {
        return;
      }
      if (other.StartPeriod != 0L) {
        StartPeriod = other.StartPeriod;
      }
      if (other.EndPeriod != 0L) {
        EndPeriod = other.EndPeriod;
      }
      if (other.Shares != 0L) {
        Shares = other.Shares;
      }
      if (other.LastProfitPeriod != 0L) {
        LastProfitPeriod = other.LastProfitPeriod;
      }
      if (other.IsWeightRemoved != false) {
        IsWeightRemoved = other.IsWeightRemoved;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartPeriod = input.ReadSInt64();
            break;
          }
          case 16: {
            EndPeriod = input.ReadSInt64();
            break;
          }
          case 24: {
            Shares = input.ReadSInt64();
            break;
          }
          case 32: {
            LastProfitPeriod = input.ReadSInt64();
            break;
          }
          case 40: {
            IsWeightRemoved = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ContributeProfitsInput : pb::IMessage<ContributeProfitsInput> {
    private static readonly pb::MessageParser<ContributeProfitsInput> _parser = new pb::MessageParser<ContributeProfitsInput>(() => new ContributeProfitsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContributeProfitsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContributeProfitsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContributeProfitsInput(ContributeProfitsInput other) : this() {
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      amount_ = other.amount_;
      period_ = other.period_;
      symbol_ = other.symbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContributeProfitsInput Clone() {
      return new ContributeProfitsInput(this);
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 1;
    private global::AElf.Types.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 3;
    private long period_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 4;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContributeProfitsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContributeProfitsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      if (Amount != other.Amount) return false;
      if (Period != other.Period) return false;
      if (Symbol != other.Symbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Period != 0L) hash ^= Period.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (schemeId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SchemeId);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (Period != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Period);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (Period != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Period);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContributeProfitsInput other) {
      if (other == null) {
        return;
      }
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Types.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Period != 0L) {
        Period = other.Period;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
          case 24: {
            Period = input.ReadSInt64();
            break;
          }
          case 34: {
            Symbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AddSubSchemeInput : pb::IMessage<AddSubSchemeInput> {
    private static readonly pb::MessageParser<AddSubSchemeInput> _parser = new pb::MessageParser<AddSubSchemeInput>(() => new AddSubSchemeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddSubSchemeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSubSchemeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSubSchemeInput(AddSubSchemeInput other) : this() {
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      subSchemeId_ = other.subSchemeId_ != null ? other.subSchemeId_.Clone() : null;
      subSchemeShares_ = other.subSchemeShares_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSubSchemeInput Clone() {
      return new AddSubSchemeInput(this);
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 1;
    private global::AElf.Types.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    /// <summary>Field number for the "sub_scheme_id" field.</summary>
    public const int SubSchemeIdFieldNumber = 2;
    private global::AElf.Types.Hash subSchemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SubSchemeId {
      get { return subSchemeId_; }
      set {
        subSchemeId_ = value;
      }
    }

    /// <summary>Field number for the "sub_scheme_shares" field.</summary>
    public const int SubSchemeSharesFieldNumber = 3;
    private long subSchemeShares_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SubSchemeShares {
      get { return subSchemeShares_; }
      set {
        subSchemeShares_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddSubSchemeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddSubSchemeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      if (!object.Equals(SubSchemeId, other.SubSchemeId)) return false;
      if (SubSchemeShares != other.SubSchemeShares) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      if (subSchemeId_ != null) hash ^= SubSchemeId.GetHashCode();
      if (SubSchemeShares != 0L) hash ^= SubSchemeShares.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (schemeId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SchemeId);
      }
      if (subSchemeId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SubSchemeId);
      }
      if (SubSchemeShares != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(SubSchemeShares);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      if (subSchemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubSchemeId);
      }
      if (SubSchemeShares != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SubSchemeShares);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddSubSchemeInput other) {
      if (other == null) {
        return;
      }
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Types.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      if (other.subSchemeId_ != null) {
        if (subSchemeId_ == null) {
          SubSchemeId = new global::AElf.Types.Hash();
        }
        SubSchemeId.MergeFrom(other.SubSchemeId);
      }
      if (other.SubSchemeShares != 0L) {
        SubSchemeShares = other.SubSchemeShares;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
          case 18: {
            if (subSchemeId_ == null) {
              SubSchemeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SubSchemeId);
            break;
          }
          case 24: {
            SubSchemeShares = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RemoveSubSchemeInput : pb::IMessage<RemoveSubSchemeInput> {
    private static readonly pb::MessageParser<RemoveSubSchemeInput> _parser = new pb::MessageParser<RemoveSubSchemeInput>(() => new RemoveSubSchemeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveSubSchemeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSubSchemeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSubSchemeInput(RemoveSubSchemeInput other) : this() {
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      subSchemeId_ = other.subSchemeId_ != null ? other.subSchemeId_.Clone() : null;
      subItemCreator_ = other.subItemCreator_ != null ? other.subItemCreator_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSubSchemeInput Clone() {
      return new RemoveSubSchemeInput(this);
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 1;
    private global::AElf.Types.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    /// <summary>Field number for the "sub_scheme_id" field.</summary>
    public const int SubSchemeIdFieldNumber = 2;
    private global::AElf.Types.Hash subSchemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SubSchemeId {
      get { return subSchemeId_; }
      set {
        subSchemeId_ = value;
      }
    }

    /// <summary>Field number for the "sub_item_creator" field.</summary>
    public const int SubItemCreatorFieldNumber = 3;
    private global::AElf.Types.Address subItemCreator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address SubItemCreator {
      get { return subItemCreator_; }
      set {
        subItemCreator_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveSubSchemeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveSubSchemeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      if (!object.Equals(SubSchemeId, other.SubSchemeId)) return false;
      if (!object.Equals(SubItemCreator, other.SubItemCreator)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      if (subSchemeId_ != null) hash ^= SubSchemeId.GetHashCode();
      if (subItemCreator_ != null) hash ^= SubItemCreator.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (schemeId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SchemeId);
      }
      if (subSchemeId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SubSchemeId);
      }
      if (subItemCreator_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SubItemCreator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      if (subSchemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubSchemeId);
      }
      if (subItemCreator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubItemCreator);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveSubSchemeInput other) {
      if (other == null) {
        return;
      }
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Types.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      if (other.subSchemeId_ != null) {
        if (subSchemeId_ == null) {
          SubSchemeId = new global::AElf.Types.Hash();
        }
        SubSchemeId.MergeFrom(other.SubSchemeId);
      }
      if (other.subItemCreator_ != null) {
        if (subItemCreator_ == null) {
          SubItemCreator = new global::AElf.Types.Address();
        }
        SubItemCreator.MergeFrom(other.SubItemCreator);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
          case 18: {
            if (subSchemeId_ == null) {
              SubSchemeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SubSchemeId);
            break;
          }
          case 26: {
            if (subItemCreator_ == null) {
              SubItemCreator = new global::AElf.Types.Address();
            }
            input.ReadMessage(SubItemCreator);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DistributedProfitsInfo : pb::IMessage<DistributedProfitsInfo> {
    private static readonly pb::MessageParser<DistributedProfitsInfo> _parser = new pb::MessageParser<DistributedProfitsInfo>(() => new DistributedProfitsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DistributedProfitsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributedProfitsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributedProfitsInfo(DistributedProfitsInfo other) : this() {
      totalShares_ = other.totalShares_;
      profitsAmount_ = other.profitsAmount_.Clone();
      isReleased_ = other.isReleased_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributedProfitsInfo Clone() {
      return new DistributedProfitsInfo(this);
    }

    /// <summary>Field number for the "total_shares" field.</summary>
    public const int TotalSharesFieldNumber = 1;
    private long totalShares_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalShares {
      get { return totalShares_; }
      set {
        totalShares_ = value;
      }
    }

    /// <summary>Field number for the "profits_amount" field.</summary>
    public const int ProfitsAmountFieldNumber = 2;
    private static readonly pbc::MapField<string, long>.Codec _map_profitsAmount_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForSInt64(16), 18);
    private readonly pbc::MapField<string, long> profitsAmount_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> ProfitsAmount {
      get { return profitsAmount_; }
    }

    /// <summary>Field number for the "is_released" field.</summary>
    public const int IsReleasedFieldNumber = 3;
    private bool isReleased_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReleased {
      get { return isReleased_; }
      set {
        isReleased_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DistributedProfitsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DistributedProfitsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalShares != other.TotalShares) return false;
      if (!ProfitsAmount.Equals(other.ProfitsAmount)) return false;
      if (IsReleased != other.IsReleased) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalShares != 0L) hash ^= TotalShares.GetHashCode();
      hash ^= ProfitsAmount.GetHashCode();
      if (IsReleased != false) hash ^= IsReleased.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalShares != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TotalShares);
      }
      profitsAmount_.WriteTo(output, _map_profitsAmount_codec);
      if (IsReleased != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsReleased);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalShares != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TotalShares);
      }
      size += profitsAmount_.CalculateSize(_map_profitsAmount_codec);
      if (IsReleased != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DistributedProfitsInfo other) {
      if (other == null) {
        return;
      }
      if (other.TotalShares != 0L) {
        TotalShares = other.TotalShares;
      }
      profitsAmount_.Add(other.profitsAmount_);
      if (other.IsReleased != false) {
        IsReleased = other.IsReleased;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalShares = input.ReadSInt64();
            break;
          }
          case 18: {
            profitsAmount_.AddEntriesFrom(input, _map_profitsAmount_codec);
            break;
          }
          case 24: {
            IsReleased = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreatedSchemeIds : pb::IMessage<CreatedSchemeIds> {
    private static readonly pb::MessageParser<CreatedSchemeIds> _parser = new pb::MessageParser<CreatedSchemeIds>(() => new CreatedSchemeIds());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatedSchemeIds> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatedSchemeIds() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatedSchemeIds(CreatedSchemeIds other) : this() {
      schemeIds_ = other.schemeIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatedSchemeIds Clone() {
      return new CreatedSchemeIds(this);
    }

    /// <summary>Field number for the "scheme_ids" field.</summary>
    public const int SchemeIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Types.Hash> _repeated_schemeIds_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Types.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.Hash> schemeIds_ = new pbc::RepeatedField<global::AElf.Types.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.Hash> SchemeIds {
      get { return schemeIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatedSchemeIds);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatedSchemeIds other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!schemeIds_.Equals(other.schemeIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= schemeIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      schemeIds_.WriteTo(output, _repeated_schemeIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += schemeIds_.CalculateSize(_repeated_schemeIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatedSchemeIds other) {
      if (other == null) {
        return;
      }
      schemeIds_.Add(other.schemeIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            schemeIds_.AddEntriesFrom(input, _repeated_schemeIds_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetManagingSchemeIdsInput : pb::IMessage<GetManagingSchemeIdsInput> {
    private static readonly pb::MessageParser<GetManagingSchemeIdsInput> _parser = new pb::MessageParser<GetManagingSchemeIdsInput>(() => new GetManagingSchemeIdsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetManagingSchemeIdsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetManagingSchemeIdsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetManagingSchemeIdsInput(GetManagingSchemeIdsInput other) : this() {
      manager_ = other.manager_ != null ? other.manager_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetManagingSchemeIdsInput Clone() {
      return new GetManagingSchemeIdsInput(this);
    }

    /// <summary>Field number for the "manager" field.</summary>
    public const int ManagerFieldNumber = 1;
    private global::AElf.Types.Address manager_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Manager {
      get { return manager_; }
      set {
        manager_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetManagingSchemeIdsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetManagingSchemeIdsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Manager, other.Manager)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (manager_ != null) hash ^= Manager.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (manager_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Manager);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (manager_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Manager);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetManagingSchemeIdsInput other) {
      if (other == null) {
        return;
      }
      if (other.manager_ != null) {
        if (manager_ == null) {
          Manager = new global::AElf.Types.Address();
        }
        Manager.MergeFrom(other.Manager);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (manager_ == null) {
              Manager = new global::AElf.Types.Address();
            }
            input.ReadMessage(Manager);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SchemePeriod : pb::IMessage<SchemePeriod> {
    private static readonly pb::MessageParser<SchemePeriod> _parser = new pb::MessageParser<SchemePeriod>(() => new SchemePeriod());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SchemePeriod> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemePeriod() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemePeriod(SchemePeriod other) : this() {
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      period_ = other.period_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemePeriod Clone() {
      return new SchemePeriod(this);
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 1;
    private global::AElf.Types.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 2;
    private long period_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SchemePeriod);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SchemePeriod other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      if (Period != other.Period) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      if (Period != 0L) hash ^= Period.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (schemeId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SchemeId);
      }
      if (Period != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Period);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      if (Period != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Period);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SchemePeriod other) {
      if (other == null) {
        return;
      }
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Types.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      if (other.Period != 0L) {
        Period = other.Period;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
          case 16: {
            Period = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetProfitDetailsInput : pb::IMessage<GetProfitDetailsInput> {
    private static readonly pb::MessageParser<GetProfitDetailsInput> _parser = new pb::MessageParser<GetProfitDetailsInput>(() => new GetProfitDetailsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProfitDetailsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfitDetailsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfitDetailsInput(GetProfitDetailsInput other) : this() {
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      beneficiary_ = other.beneficiary_ != null ? other.beneficiary_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfitDetailsInput Clone() {
      return new GetProfitDetailsInput(this);
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 1;
    private global::AElf.Types.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    /// <summary>Field number for the "beneficiary" field.</summary>
    public const int BeneficiaryFieldNumber = 2;
    private global::AElf.Types.Address beneficiary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Beneficiary {
      get { return beneficiary_; }
      set {
        beneficiary_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProfitDetailsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProfitDetailsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      if (!object.Equals(Beneficiary, other.Beneficiary)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      if (beneficiary_ != null) hash ^= Beneficiary.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (schemeId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SchemeId);
      }
      if (beneficiary_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Beneficiary);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      if (beneficiary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Beneficiary);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProfitDetailsInput other) {
      if (other == null) {
        return;
      }
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Types.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      if (other.beneficiary_ != null) {
        if (beneficiary_ == null) {
          Beneficiary = new global::AElf.Types.Address();
        }
        Beneficiary.MergeFrom(other.Beneficiary);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
          case 18: {
            if (beneficiary_ == null) {
              Beneficiary = new global::AElf.Types.Address();
            }
            input.ReadMessage(Beneficiary);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ResetManagerInput : pb::IMessage<ResetManagerInput> {
    private static readonly pb::MessageParser<ResetManagerInput> _parser = new pb::MessageParser<ResetManagerInput>(() => new ResetManagerInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResetManagerInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetManagerInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetManagerInput(ResetManagerInput other) : this() {
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      newManager_ = other.newManager_ != null ? other.newManager_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetManagerInput Clone() {
      return new ResetManagerInput(this);
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 1;
    private global::AElf.Types.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    /// <summary>Field number for the "new_manager" field.</summary>
    public const int NewManagerFieldNumber = 2;
    private global::AElf.Types.Address newManager_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address NewManager {
      get { return newManager_; }
      set {
        newManager_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResetManagerInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResetManagerInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      if (!object.Equals(NewManager, other.NewManager)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      if (newManager_ != null) hash ^= NewManager.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (schemeId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SchemeId);
      }
      if (newManager_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NewManager);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      if (newManager_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewManager);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResetManagerInput other) {
      if (other == null) {
        return;
      }
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Types.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      if (other.newManager_ != null) {
        if (newManager_ == null) {
          NewManager = new global::AElf.Types.Address();
        }
        NewManager.MergeFrom(other.NewManager);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
          case 18: {
            if (newManager_ == null) {
              NewManager = new global::AElf.Types.Address();
            }
            input.ReadMessage(NewManager);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Events
  /// </summary>
  internal sealed partial class SchemeCreated : pb::IMessage<SchemeCreated> {
    private static readonly pb::MessageParser<SchemeCreated> _parser = new pb::MessageParser<SchemeCreated>(() => new SchemeCreated());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SchemeCreated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Profit.ProfitContractReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemeCreated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemeCreated(SchemeCreated other) : this() {
      virtualAddress_ = other.virtualAddress_ != null ? other.virtualAddress_.Clone() : null;
      manager_ = other.manager_ != null ? other.manager_.Clone() : null;
      profitReceivingDuePeriodCount_ = other.profitReceivingDuePeriodCount_;
      isReleaseAllBalanceEveryTimeByDefault_ = other.isReleaseAllBalanceEveryTimeByDefault_;
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemeCreated Clone() {
      return new SchemeCreated(this);
    }

    /// <summary>Field number for the "virtual_address" field.</summary>
    public const int VirtualAddressFieldNumber = 1;
    private global::AElf.Types.Address virtualAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address VirtualAddress {
      get { return virtualAddress_; }
      set {
        virtualAddress_ = value;
      }
    }

    /// <summary>Field number for the "manager" field.</summary>
    public const int ManagerFieldNumber = 2;
    private global::AElf.Types.Address manager_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Manager {
      get { return manager_; }
      set {
        manager_ = value;
      }
    }

    /// <summary>Field number for the "profit_receiving_due_period_count" field.</summary>
    public const int ProfitReceivingDuePeriodCountFieldNumber = 3;
    private long profitReceivingDuePeriodCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProfitReceivingDuePeriodCount {
      get { return profitReceivingDuePeriodCount_; }
      set {
        profitReceivingDuePeriodCount_ = value;
      }
    }

    /// <summary>Field number for the "is_release_all_balance_every_time_by_default" field.</summary>
    public const int IsReleaseAllBalanceEveryTimeByDefaultFieldNumber = 4;
    private bool isReleaseAllBalanceEveryTimeByDefault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReleaseAllBalanceEveryTimeByDefault {
      get { return isReleaseAllBalanceEveryTimeByDefault_; }
      set {
        isReleaseAllBalanceEveryTimeByDefault_ = value;
      }
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 5;
    private global::AElf.Types.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SchemeCreated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SchemeCreated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VirtualAddress, other.VirtualAddress)) return false;
      if (!object.Equals(Manager, other.Manager)) return false;
      if (ProfitReceivingDuePeriodCount != other.ProfitReceivingDuePeriodCount) return false;
      if (IsReleaseAllBalanceEveryTimeByDefault != other.IsReleaseAllBalanceEveryTimeByDefault) return false;
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (virtualAddress_ != null) hash ^= VirtualAddress.GetHashCode();
      if (manager_ != null) hash ^= Manager.GetHashCode();
      if (ProfitReceivingDuePeriodCount != 0L) hash ^= ProfitReceivingDuePeriodCount.GetHashCode();
      if (IsReleaseAllBalanceEveryTimeByDefault != false) hash ^= IsReleaseAllBalanceEveryTimeByDefault.GetHashCode();
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (virtualAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(VirtualAddress);
      }
      if (manager_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Manager);
      }
      if (ProfitReceivingDuePeriodCount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(ProfitReceivingDuePeriodCount);
      }
      if (IsReleaseAllBalanceEveryTimeByDefault != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsReleaseAllBalanceEveryTimeByDefault);
      }
      if (schemeId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SchemeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (virtualAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VirtualAddress);
      }
      if (manager_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Manager);
      }
      if (ProfitReceivingDuePeriodCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ProfitReceivingDuePeriodCount);
      }
      if (IsReleaseAllBalanceEveryTimeByDefault != false) {
        size += 1 + 1;
      }
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SchemeCreated other) {
      if (other == null) {
        return;
      }
      if (other.virtualAddress_ != null) {
        if (virtualAddress_ == null) {
          VirtualAddress = new global::AElf.Types.Address();
        }
        VirtualAddress.MergeFrom(other.VirtualAddress);
      }
      if (other.manager_ != null) {
        if (manager_ == null) {
          Manager = new global::AElf.Types.Address();
        }
        Manager.MergeFrom(other.Manager);
      }
      if (other.ProfitReceivingDuePeriodCount != 0L) {
        ProfitReceivingDuePeriodCount = other.ProfitReceivingDuePeriodCount;
      }
      if (other.IsReleaseAllBalanceEveryTimeByDefault != false) {
        IsReleaseAllBalanceEveryTimeByDefault = other.IsReleaseAllBalanceEveryTimeByDefault;
      }
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Types.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (virtualAddress_ == null) {
              VirtualAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(VirtualAddress);
            break;
          }
          case 18: {
            if (manager_ == null) {
              Manager = new global::AElf.Types.Address();
            }
            input.ReadMessage(Manager);
            break;
          }
          case 24: {
            ProfitReceivingDuePeriodCount = input.ReadSInt64();
            break;
          }
          case 32: {
            IsReleaseAllBalanceEveryTimeByDefault = input.ReadBool();
            break;
          }
          case 42: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
